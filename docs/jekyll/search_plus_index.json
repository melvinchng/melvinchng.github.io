{"./":{"url":"./","title":"Cover","keywords":"","body":" Last modified: Thu Aug 16 2018 22:48:59 GMT+0800 (Malay Peninsula Standard Time) Note: If you are viewing the content from your mobile devices, use the hamburger style menu icon located at the top left corner of your browser to navigate between sections. "},"About.html":{"url":"About.html","title":"About The Author","keywords":"","body":" Last modified: Thu Aug 16 2018 22:48:59 GMT+0800 (Malay Peninsula Standard Time) About The Author Melvin Ch'ng moved to United States after he graduated from high school in Malaysia. He earned his Bachelor of Science in Computer Engineering from San Jose State University, CA. He has an autobiography as he loves to share his journey and experiences. If you would like to know more about him, he writes in great length about himself in his autobiography. Once in a while, he writes in LinkedIn too. He believes in open source and hates advertisement the most. To add, he love to contribute to a few of the open source projects. His open source projects and open source projects that he contributes to can be found at his Github. "},"Acknowledgements.html":{"url":"Acknowledgements.html","title":"Acknowledgements","keywords":"","body":" Last modified: Thu Aug 16 2018 22:48:59 GMT+0800 (Malay Peninsula Standard Time) Acknowledgements This tutorial is written by Melvin Ch’ng and available to everyone at no cost. You may not reproduce this material without seeking the permission of the author. This is not an ordinary coding tutorial that explains in depth in theory. This is a tutorial that allow people with minimal to zero experience that would like to learn more about coding and web development. I am unable to guarantee that my attempt is the most efficient nor all the information in this tutorial is correct. However, I will try my best to keep the the information as accurate as possible. Most of the tutorial was written and tested on a Windows 8.1 machine running on Ruby 2.2.3, Ruby 2.4.1 and Ruby 2.5.1. The code entered into the terminal window may vary based on the operating system and your system configurations. If you followed my Ruby installation guide on Windows, Ubuntu Linux, or MacOS installation guide in this tutorial, you should be able to run run the commands in this tutorial without any issue. #include /* * * Anyone including myself are not responsible for bricked computer, * dead hard drives, thermonuclear war, or you getting fired * because the installation failed. Please do some research if you * have any concern about all the installation files required in this * guide before installing it! YOU are choosing to make these * modifications, and if you point the finger at us for messing up * your machine, we will laugh at you. * */ "},"Introduction.html":{"url":"Introduction.html","title":"Introduction","keywords":"","body":" Last modified: Thu Aug 16 2018 22:48:59 GMT+0800 (Malay Peninsula Standard Time) Introduction There are a lot of content creator, especially on the Internet. However, there are people that would love to share but no experience on how and where to get started. If you would like to share by writing but have no clue where to start, this is definitely a tutorial for you. This tutorial will provide all the necessary information for people who would like to learn more about hosting your own website and host your own tutorial (book, autobiography, etc) for free. The most important part is it will be written in ELIA5 (Explains Like I Am Five - explained to you like you were an actual literal five year old) styles. Do not worry if you do not have any programming or technology background. This tutorial is meant for people with less to zero programming knowledge and would to get their hand dirty (AKA learn). I will try my very best to explain everything in simple words and use even more visual. However, third party sources and examples will be attached as there are a lot of great resources on the Internet that explains certain concepts. All the necessary information will be given out at the respective section. How I am inspired to write this tutorial? It is all started because of my readers from my autobiography and Ruby on Rails Tutorial. Most of them usually come back with a few similar questions and this tutorial will go through them in depth: how did you managed to get a well done template that is optimized for both browser and mobile view? how everything is done behind the scene? Can you show me? (After they realized that how simple it is, they do not have any coding background) how did you organize your materials? I love the flow that you introduced. how did you managed to host it for free? Do you pay for anything? This tutorial is separated into two major parts: Jekyll and GitBook. The first part will discuss how to host your Jekyll pages on Github. Then, GitBook will be added to the discussion as GitBook (basically) will not work without Github pages. Part of the content available in this tutorial will be adopted from my Ruby on Rails tutorial as many of the introductory contents have already been discussed in detail from the tutorial. If you follow this tutorial from the first page to the very last page, you will gain minimal (or good amount of) knowledge in programming. You will have the ability to own personal website, CV or Resume, and documentation that wrote on your personal website. The complete starter code based on my personal website and video instructions on how to get started on using the code will also be provided. Example and expected final product: My personal website My CV or Resume My documentation that you may write For questions, comments and suggestions, please contact me at you.email.melvin@gmail.com. Also, if you want to me to include a specific topic here, please e-mail me. Thank you for reading and have fun learning and experimenting! PS. I am not an English major. You are welcome to correct my grammatical mistakes. "},"SUMMARY.html":{"url":"SUMMARY.html","title":"Table of Content","keywords":"","body":" Last modified: Thu Aug 16 2018 22:48:59 GMT+0800 (Malay Peninsula Standard Time) Table of Content Getting Started Cover About The Author Acknowledgements Introduction Table of Content Technology Introduction Introduction Visual Studio Code HTML, CSS, Markdown Terminal Ruby on Rails, Jekyll Git, Github GitBook Summary Install Required Programs Introduction Text Editor, Visual Studio Code Github, Git GUI Github Desktop for Windows & Mac Alternative for Linux User Ruby and Node.JS Installation Windows Installation Guide Obtaining Required Files Ruby Installation MSYS2 Installation and Setup Node.JS Installation Ubuntu Linux Ruby Installation Node.JS Installation MacOS Ruby Installation Homebrew Installation Jekyll GitBook CLI Default Template Generator Introduction Jekyll Create an Initial Website Start Jekyll Server View and Edit Jekyll Files Jekyll Directory Structure Important Jekyll Notes GitBook Create an Initial Gitbook Start Gitbook Server View and Edit Gitbook Files Gitbook Directory Structure Important Gitbook Notes Sample Starter Code Introduction Initial Setup Fork The Project Edit Repository Name Clone The Repository Edit Config File Access The Website Files Structure Index Page CV Gitbook Other Edit The Content View The Content Locally Tips On Writing Gitbook Conclusion "},"technology.html":{"url":"technology.html","title":"Introduction","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:00 GMT+0800 (Malay Peninsula Standard Time) Technology Introduction Introduction In this section, each technology will be discussed in a great length. I will provide as much information as possible to get you become a geek among your non-tech friends. You should also make use of Google if you would like to learn more about a specific piece of technology. The discussion below will get you started on knowing some technical information that I am going to use in this tutorial. There will be more discussion and information when it comes to using specific technology. Do not worry about getting and installing the technology discuss in this section as there will be a section dedicated to the installation. Note: Some of the contents, if stated, in this section are directly and indirectly obtained from highly reputable Internet source. There is no point for me to rewrite their content in my own words. Visual Studio Code Visual Studio Code is a text editor. Figure below shows the interface of Visual Studio Code. Figure: Visual Studio Code A text editor is a program that allow you to edit any form of text file. It is an advance version of Notepad (on Windows OS) or text editor (on Mac OS) that offers a lot more features. Most of the code editor, including Visual Studio Code, is able to detect the programming language that you are using and color the syntax (reserved wording) according. Visual Studio Code will be the preferred text editor for this tutorial. By comparison, Microsoft Word is a program that allows you to edit a Word document while Visual Studio Code is an text editor that allow you to edit text file. Figure below shows a folder with your program folder opened in Visual Studio Code. Figure: Visual Studio Code with program folder opened In the text editor, we can see that it is partitioned into a few sections. The purpose and explanation of each sections, labelled with numbers from the figure above, are discussed below. A list of files that are currently opened. The exact same files can be also found at 2. A list of files that are currently opened. The exact same files can be also found at 1. The content of the selected file that is opened. Different colours are used to show the syntax. The file directory of your project. A project usually contains (a lot of) folders and files. Information about the files: programming language, the current line number and column that your cursor is at, etc HTML, CSS, Markdown HTML (Markup Language), CSS (Style Sheet Language), and Markdown (Light Weight Markup Language) are three major languages that we are going to use throughout this entire tutorial (they are not considered as programming languages). A website usually consists of HTML and CSS (and more components). Other than the three languages mentioned, a few other languages will also be discussed along the way. The languages mentioned above share the concept as human languages. Depending on the purpose of the program, a program usually consists of one or more languages. As a comparison to human world, different people may speak different languages: English, Mandarin, Malay, Japanese, etc. Do not worry if anything that discuss below does not make sense to you. At the end of the day, your main goal is to gain some knowledge from here. HTML Note: Information below is adapted from W3School. HTML is the standard markup language for creating Web pages. A HTML web pages usually ends with the extension .html. HTML stands for Hyper Text Markup Language HTML describes the structure of Web pages using markup HTML elements are the building blocks of HTML pages HTML elements are represented by tags HTML tags label pieces of content such as \"heading\", \"paragraph\", \"table\", and so on Browsers do not display the HTML tags, but use them to render the content of the page A code snippet shows a basic HTML code. Page Title My First Heading My first paragraph. The explanation for code snippet above is explained below. The declaration defines this document to be HTML5 The element is the root element of an HTML page The element contains meta information about the document The element specifies a title for the document The element contains the visible page content The element defines a large heading The element defines a paragraph HTML Tags are element names surrounded by angle brackets: content goes here... HTML tags normally come in pairs like and The first tag in a pair is the start tag, the second tag is the end tag The end tag is written like the start tag, but with a forward slash inserted before the tag name The start tag is also called the opening tag, and the end tag the closing tag. CSS CSS is a language that describes the style of an HTML document. It describes how HTML elements should be displayed. The extension of CSS stylesheet usually ends with the extension .css. Note: Information below is adapted from W3School. CSS is a language that describes the style of an HTML document. CSS describes how HTML elements should be displayed. Below is a code snippet of CSS stylesheet. body { background-color: lightblue; } h1 { color: white; text-align: center; } p { font-family: verdana; font-size: 20px; } Markdown Note: Information below is adapted from markdowntutorial.com. Markdown is a way to write content for the web. It is written in what nerds like to call \"plaintext\", which is exactly the sort of text you are used to writing and seeing. Plaintext is just the regular alphabet, with a few familiar symbols, like asterisks ( * ) and backticks ( ` ). Unlike cumbersome word processing applications, text written in Markdown can be easily shared between computers, mobile phones, and people. It’s quickly becoming the writing standard for academics, scientists, writers, and many more. Websites like GitHub and Reddit use Markdown to style their comments. Formatting text in Markdown has a very gentle learning curve. It does not do anything fancy like change the font size, color, or type. All you have control over is the display of the text—stuff like making things bold, creating headers, and organizing lists. This is one of the best Markdown Cheat Sheet in my opinion. I always refer to this cheat sheet when I need some references. Terminal A terminal or console is a place where you can execute commands directly. Some tasks can be completed quicker in terminal compared to graphical interface (navigate around menus and windows). Also, many commands and scripts can be used in terminal than graphical interface. In Windows OS, terminal is known as Command Prompt while Ubuntu Linux and MacOS has it as Terminal and Terminal Window. By default, all the terminal that you open are pointing to the root directly. For example, both figures below shows root directory of my Web Application MyApp; First figure shows the terminal window in Windows OS while second figure shows the terminal window in Ubuntu Linux OS. Figure: Root directory of my Web Application in Windows OS. Figure: Root directory of my Web Application in Ubuntu Linux OS. All the examples in the tutorial will be shown on Windows OS. If you are using Ubuntu Linux and MacOS, I assume you know how to navigate in terminal window. You can always choose to open a terminal windows that has your application as the root directory. Go to the application folder of your application and hold Shift + Right Click at the blank area. You will see the option Open command window here. Click it and you will see a terminal window that has the root directory of your Web Application. Figure below shows the operation. Note: If you using on Linux OS, you will need to install custom packages to have this feature. For MacOS user, you can turn on this feature in your system preferences. Figure: Open a Terminal Window in Windows using Shift + Right Click. Now, a terminal window, as shown in Figure, is opened and has the root directory of your Web Application. Figure: Terminal Window with Root Directory of my Web Application Ruby on Rails, Jekyll Ruby on Rails, also known as RoR, is an open source (source code are available for free) framework (basic structure of a thing, eg: Web Development files structure) for Web development in Ruby (programming language). It is super powerful as a Web Application can be done rapidly with the available libraries. After you are done with this tutorial and would like to jump into more Web Development, if you are interested, you can take a look at my Ruby on Rails Tutorial that I wrote for people with some programming background. So what exactly is Jekyll? Jekyll is a simple site generator (it generate the specific code given that you follow certain rules) that created using Ruby (programming language). It can be installed as a Gem (Ruby libraries, a package that consists of certain code, is known as Gem) It takes in Markdown (explained in the section earlier) and generate a HTML files for Web by using the HTML templates. We have to make sure that our files that we created follow a set of rules and structure. One of the top advantages of using Jekyll is the website is static and requires less resources (processing power, etc) This leads to Jekyll website is able to load rapidly on your device, leading to one of the top reason why people choose Jekyll. Jekyll is also the technology that we are going to discuss and implement in this tutorial. Git, Github Git is a version control (similar to Google Docs, but better, where you can keep track of the changes made by different people at different time) system that keep track of the changes in your computer files and you may work together with multiple people. Although it is designed for software development, you can still use it to keep track of your personal files. Github is one of the online project hosting that use Git. This is also the services that we are going to host our Website, known as Github pages that uses Jekyll, at zero cost (no credit card required, no referral required, etc). Note: Github is one of the website that is built by using Ruby on Rails. GitBook What is a Gitbook? The legacy GitBook is both an online platform for writing and hosting documentation, and an open source book format and toolchain. Hundreds of thousands of users use GitBook to write documentation (library, API, tools, etc.), or knowledge bases (like this F.A.Q.). People also use GitBook to publish technical books, teaching material, and many other things. The Gitbook that will be discussed in the tutorial is known as legacy (v3.2.3, last version before v4) Gitbook as the company launched a new version of Gitbook (v4) in mid 2018. The new Gitbook (v4) is no longer open source and required you to pay for the services (there is still a free tier). Gitbook v4+ no longer work offline and requires you to use their online platform. The main advantage of legacy Gitbook is you are able to use the template generator they created without using their online platform. This means that you are able to write anywhere you want without being tied yourself to the connected world (Internet). The code that legacy Gitbook generated can be used at any web hosting services as it will be in HTML coe. Summary To sum up, this tutorial will use Jekyll for static page generator. The code generated by the static page generator will be in the form of HTML and CSS. Then, we will host our website at Github. Template generator that generated by Gitbook will be hosted on Github too. "},"installation.html":{"url":"installation.html","title":"Introduction","keywords":"","body":" Last modified: Thu Aug 16 2018 22:48:59 GMT+0800 (Malay Peninsula Standard Time) Installing Required Programs Introduction In this section, all the required programs and packages are discussed. Please go through the installation in the order from top to bottom as some of the packages are depending on one another. I tried my very best to provide a complete installation guide. The entire installation guide is tested on Windows platform, but only the major components (Ruby and Node.JS) are tested on MacOS and Linux. Please get back to me if you found out that the installation guide is not working on the platform you are using. Text Editor, Visual Studio Code There are a few text editors available for free. At the moment, my favorite text editor is Visual Studio Code. I have been using the text editor since it was started a few years back and I absolutely love it. It is free and available for Windows, Linux, and MacOS. Download a copy of Visual Studio Code if you do not have any preferences. The installation is simple and straight forward. Figure below shows the interface of Visual Studio Code. Figure: Visual Studio Code Github, Git GUI To begin, head to Github and sign up for an account. We are going to use Github's services for our version control. Then, we need to hook up our machine with Github services. The easiest way is through GUI (Graphical User Interface) and it can be done easily by installing Github Desktop (GUI Git Client created by Github). Another way of doing the same thing, but not recommended for people with zero programming experience, is through CLI (Command Line Interface; Perform operations in the form of command in Terminal Window). If you would like to learn more about how to use Git in CLI, please refer to Version Control Chapter on my Ruby on Rails Tutorial. Github Desktop for Windows & Mac The Github Desktop is only available for Mac and Windows platform. Download the Github Desktop and install it to your machine. Use the default setting provided in the installer. Please stick with Github Desktop if you are using Windows and Macintosh machine. Launch the Github Desktop and login to your account that you have just created. Figure below shows Github Desktop user interface. This is the latest Github Desktop application as of May 2018. Figure: Github Desktop Application Alternative for Linux User You may use use GitKraken as an alternative tool or you may use CLI (Command Line Interface). I have never used GitKraken before and you may have to look for alternative source to get started. You may want to look up for additional resources to take care of Git installation on your machine. Ruby and NodeJS Installation The installation guides from this section are selectively obtained from my Ruby on Rails Tutorial. Ruby and NodeJS are the two giant components and should be installed successfully without any errors. Windows Installation Guide The following guide in this section was tested on machines running Windows 7 Professional 64-bit Windows 8.1 Professional 64-bit Obtaining Required Files Note: You may follow this video tutorial for installation. However, the video is meant for Ruby 2.4.1 instead of Ruby 2.5.1 and the video shows complete Ruby on Rails installation instead of Ruby installation. Please stop after you have installed Ruby. To begin, determine your Windows Architecture (32-bit or 64-bit). The easiest way of getting your Windows Architecture is through system information page. For machine with Windows 7+, you can easily get to the page by typing system on your start menu. Figure below shows the system information for my machine. Figure: Operating System Architecture for Windows As shown on the image, my operating system is 64-bit. Obtain the URL to the files from correct table below. Table: Required files for 32-bits Operating System File File Name Ruby 2.5.1-1 Installer rubyinstaller-2.5.1-1-x86.exe Node.JS node-v8.11.2-x86.msi Table: Required files for 64-bits Operating System File File Name Ruby 2.5.1-1 Installer rubyinstaller-2.5.1-1-x64.exe Node.JS node-v8.11.2-x64.msi Ruby Installation (Windows) Run the Ruby Installer and the screen as shown in the figure will should show up. Accept the license agreement and proceed to the next step by pressing the “Next” button. Figure: Ruby 2.5.1 License Agreement Check “Add Ruby executables to your PATH” and complete the installation by pressing the “Install” button as shown below. Figure: Ruby 2.5.1 Installation Destination and Optional Tasks Before the installation begin, as shown in the figure below, you will ask if you would like to have MSYS2 install. Make sure the option is checked and press \"Next\" to continue the installation. The installation will then begin. Figure: MSYS2 installation option After the installation is completed, a window shown in the figure below will show up. Make sure that the check box is checked and press finish to complete the installation. Figure: MSYS2 installation option MSYS2 Installation and Setup After the Ruby installation is completed, a terminal window, as shown in figure below, will pop up. Figure: MSYS2 Installation Window All the components 1, 2, and 3 are required to be installed. To begin, insert 1, 2, 3 into the terminal. Figure below shows the required files are being downloaded. Note: Figure shows only 1 is inserted into the next box. You should insert 1, 2, 3. Figure: MSYS2 required files are being downloaded. The installation may take a while depending on your computer processing speed and internet connection. Figure below shows the installation has been successfully completed. Figure: MSYS2 setup completed Node.JS Installation (Windows) Run the Ruby Installer and the following screen shown in the figure below will show up. Figure: Node.js Setup Wizard Accept the license agreement as shown in the figure below and proceed to the next step by pressing the “Next” button. Figure: Node.js License Agreement Screen Ubuntu Linux The following guide was tested only on machine running Ubuntu 16.04 64-bit. It should work on any machine that runs on 32-bit. This may or may not work on earlier version of Linux or distribution. You may follow this video tutorial. Ruby Installation (Linux) Open a terminal as shown in figure below by pressing the Ubuntu logo in your top left navigation bar. Figure: Terminal Window icon in Applications The root directory of the terminal as shown in figure below is Home directory. Figure: Terminal Window and root directory in Ubuntu Next, enter the following command below to begin your installation. Enter the command as in a line. Do not hit enter until you are done entering it. sudo apt-get install build-essential patch ruby-dev zlib1g-dev liblzma-dev libsqlite3-dev After the command above is inserted, your user account’s password will be be request. When the screen, as shown in Figure below, is requesting for user input, enter Y to download and install the required files. Figure: Ruby Installation After the installation is complete, run the command below to check if Ruby is installed successfully. Figure below shows the input and the output text from the Terminal Window. If the code does not return a Ruby version, please repeat the installation process ruby -v Figure: Ruby version shown in Terminal Window Node.JS Installation (Linux) To download Node.JS, enter the code below in a Terminal Window. Figure below shows the Node.JS installation in the Terminal Window. The operation may require you to respond. Respond y if there is a screen asking for a user permission to download the files. sudo apt-get install nodejs Figure: Node.JS installation MacOS The following guide was tested only on machine running MacOS Sierra (10.12). If you are using older version of MacOS, this tutorial may not work. At the time this tutorial is written (for my Ruby on Rails tutorial) the latest stable Ruby version for MacOS is Ruby 2.4.0. If any of the command require you to match the Ruby version that you have downloaded, change the version accordingly. Ruby Installation (Mac) Open a terminal as shown in the figure below.. Figure: Terminal Window icon in Applications The root directory of the terminal as shown in the figure below is your Home directory. Figure: Terminal Window in MacOS Sierra By default, modern MacOS come preinstalled with Ruby. To check your Ruby version, enter the command below. ruby -v After the command above is inserted, you will see the Ruby version on your terminal window. Figure below shows the terminal window with Ruby version 2.0.0 returned to the terminal window. Figure: Ruby version The default Ruby version, Ruby 2.0.0. is old. The latest stable Ruby version for MacOS when I prepared the installation tutorial for my Ruby on Rails Tutorial is Ruby 2.4.0. To update your Ruby in your Mac to the latest version, enter the command below. Figure below shows the output after the command is entered into the terminal window. curl -sSL https://get.rvm.io | bash -s stable --ruby Figure: Updating Ruby version If you do not have XCode installed in your machine, a window will pop up and ask you to see if you would like to install XCode. XCode and Git command line are part of the developer tools required in order to update Ruby on your machine. Select Install, as shown in figure below, to install the required files and enter your admin password in the terminal window. Figure: XCode installation window pop up and Admin password request A License Agreement window, as shown in figure below, will then pop up. Press \"Agree\" to continue. Figure: License Agreement window If you received Return Error 1 message as shown in figure below, skip to Chapter 3.2. However, if you received an output as shown in figure below, you have successfully updated your Ruby version to Ruby 2.4.0 (as shown in the console output). Figure: Status 1 error message Figure: Ruby 2.4.0 installed successfully Now, set Ruby 2.4.0 as your default Ruby version, enter the command below. Figure below shows the default Ruby version is set to Ruby 2.4.0. If you are not using Ruby 2.4.0, change the number in the command according to the version shown in Figure 3.1.8. If the code does not return a correct Ruby version, please repeat the installation process: rvm use 2.4 --default To check your updated Ruby version, use the command ruby -v. Figure: Ruby 2.4.0 is set as default Ruby version Homebrew Installation If you received Return Error 1 message as shown in figure below, continue reading. If not, proceed to next section for other installation. Figure: Status 1 error message The reason this error shows up is because you do not have Homebrew installed. To fix this, install Homebrew by entering the command below into your terminal. A confirmation screen, as shown in figure below, will display all the files and scripts that will be installed on your machine. Press return key to install the files. ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" Figure: Homebrew installation confirmation screen If your machine is password protected, you will asked to enter your password next. Figure below shows the password request window. Figure: Password request window Figure below shows Homebrew is installed successfully to your machine. Now, update your Ruby by repeating the process as discussed in Ruby Installation section above. Figure: Homebrew installed successfully Jekyll To install Jekyll, open your terminal window (Windows: Command Prompt; Ubuntu Linux & Mac: Terminal) and insert the follow code to the window. The command inserted into the terminal should work for any operating system. Note: You may also follow the official Jekyll installation guide if you wished to. gem install jekyll bundler Figure below shows the code is entered into a terminal window (known as Command Prompt) in Windows 7 32-bit. Figure: Installing Jekyll and Bundler The installation may take a while depending on your machine. Figure below shows that Jekyll was installed successfully. The result should be similar even if you are using different operating system. Figure: Jekyll installed successfully To verify that you have installed Ruby and Jekyll successfully, type the command below in your terminal window. ruby -v jekyll -v Figure belows shows the result after the two lines of command were inserted to the terminal window. Figure: Ruby and Jekyll versions shown If you are unable to get the version for either Ruby or Jekyll, you may want to stop here and redone the installation. GitBook CLI The next step is to install GitBook CLI. The command inserted into the terminal should work for any operating system. Note: For your reference: the official documentation for installation by GitBook is available here. To install GitBook CLI, open your terminal window (Windows: Command Prompt; Ubuntu Linux & Mac: Terminal) and insert the follow code to the window. npm install gitbook-cli -g Figure: Command above is inserted to terminal window Figure below shows the installation has been completed successfully. Figure: Gitbook CLI installed successfully "},"default.html":{"url":"default.html","title":"Introduction","keywords":"","body":" Last modified: Thu Aug 16 2018 22:48:59 GMT+0800 (Malay Peninsula Standard Time) Default Template Generator Introduction A template generator is a tool that allow you to get started with a project by using the starter code (more like a sample code provided to get you started). Both Jekyll and GitBook have the ability to generate a template. In this section, we will use the template generator to generate the starter code. The purpose of doing this is to check out the files structure and get a concept of what it can do. You should go through this section as it will give you a sense of how things should be done and what is given to you. There are important sections that explains what should and should not be done for both Jekyll and GitBook. Jekyll Create an Initial Website To create a new Jekyll site, open a terminal window and insert the command below. Blog will the the website that it will be called and the folder that it will create to store all the files. jekyll new Blog Note: You may obtain some additional information from Jekyll Quick-start Guide. Figure: Command inserted to terminal window Figure below shows an a website is created with the template generator. The folder can be found at C:/Users/Melvin/Blog according to the information shown on the terminal window. Figure: Template generator generated a website Figure below shows the files in the Blog folder. Figure: Files in the folder Start Jekyll Server To view the website created using the template generator, start the server at the root directory of your folder using the command jekyll serve. For my case, the root directory of my application is Blog. You may want to refer to the terminal window section if you have forgotten how to start a terminal window pointing to the directory. Figure below shows the command mentioned is entered in the terminal window and a local (on your machine) web server is started. Figure: A Jekyll server is started From the figure above, the server address to access our website is localhost:4000. Head to your preferred web browser and enter the address localhost:4000 at the address bar. Figure below shows the landing page of the website generated by template generator. Figure: Landing page of the website View and Edit Jekyll Files The easiest way of editing the content is through a text editor. The operation may be different if you use a text editor other than Visual Studio Code. Open your folder in Visual Studio Code by navigating to File > Open Folder. Go to the root directory of your folder, C:/Users/Melvin/Blog for my case, and select \"Open Folder\". Figure below shows the content of the folder Blog before \"Open Folder\" action is performed. Figure: Blog folder is selected. After the folder is opened, a list of files available in Blog folder are shown in the bottom left panel. Figure below shows the result after the folder is opened. Figure: index.md is opened at VS Code There is nothing much that we can edit as this is the template. The homepage is not editable as they are created by Jekyll internally. The only content that we can edit as a proof of concept is the file under _post subdirectory. For any files that is edited, you will have to restart your web server. This is due all the changes has to be regenerated before users can view it on the browser. Jekyll Directory Structure The information in this section is selectively obtained from Official Jekyll Documentation. You may take a look if you are interested. Depending on the programmer and the purpose of the Jekyll website, the file structures may be slightly different. A basic Jekyll site usually looks something like this: . ├── _config.yml ├── _data | └── members.yml ├── _drafts | ├── begin-with-the-crazy-ideas.md | └── on-simplicity-in-technology.md ├── _includes | ├── footer.html | └── header.html ├── _layouts | ├── default.html | └── post.html ├── _posts | ├── 2007-10-29-why-every-programmer-should-play-nethack.md | └── 2009-04-26-barcamp-boston-4-roundup.md ├── _sass | ├── _base.scss | └── _layout.scss ├── _site ├── .jekyll-metadata └── index.html # can also be an 'index.md' with valid YAML Frontmatter It contains a list of folders and files. Each of them serves a different purpose. Here is an overview of what each of these does: File/Directory Description _config.yml Stores configuration data. Many of these options can be specified from the command line executable but it’s easier to specify them here so you don’t have to remember them. _drafts Drafts are unpublished posts. The format of these files is without a date: title.MARKUP. Learn how to work with drafts. _includes These are the partials that can be mixed and matched by your layouts and posts to facilitate reuse. The liquid tag {% include file.ext %} can be used to include the partial in _includes/file.ext. _layouts These are the templates that wrap posts. Layouts are chosen on a post-by-post basis in the YAML Front Matter, which is described in the next section. The liquid tag {{ content }} is used to inject content into the web page. _posts Your dynamic content, so to speak. The naming convention of these files is important, and must follow the format: YEAR-MONTH-DAY-title.MARKUP. The permalinks can be customized for each post, but the date and markup language are determined solely by the file name. _data Well-formatted site data should be placed here. The Jekyll engine will autoload all data files (using either the .yml, .yaml, .json or .csv formats and extensions) in this directory, and they will be accessible via site.data. If there's a file members.yml under the directory, then you can access contents of the file through site.data.members. _sass These are sass partials that can be imported into your main.scss which will then be processed into a single stylesheet main.css that defines the styles to be used by your site. _site This is where the generated site will be placed (by default) once Jekyll is done transforming it. It’s probably a good idea to add this to your .gitignore file. .jekyll-metadata This helps Jekyll keep track of which files have not been modified since the site was last built, and which files will need to be regenerated on the next build. This file will not be included in the generated site. It’s probably a good idea to add this to your .gitignore file. index.html or index.md and other HTML, Markdown files Provided that the file has a YAML Front Matter section, it will be transformed by Jekyll. The same will happen for any .html, .markdown, .md, or .textile file in your site’s root directory or directories not listed above. Other Files/Folders Every other directory and file except for those listed above—such as css and images folders, favicon.ico files, and so forth—will be copied verbatim to the generated site. There are plenty of sites already using Jekyll if you’re curious to see how they’re laid out. Important Jekyll Notes Do not remove the content between the two ---. It is part of the Jekyll Front Matter. The purpose if it is to tell Jekyll that it is a special file. Figure below shows the content between two --- are YAML font matter. Figure: index.md contains --- special files content From my experience, people who are new to Jekyll will simply remove the lines as they do not know there are part of the special files. GitBook Create An Initial GitBook To create a new GitBook, open a terminal window and insert the command below. If you are doing it for the first time after GitBook CLI installation, it may take a while to complete. Gitbook is the name of our book and the folder that it will create. Figure below shows the command below is inserted into terminal window. gitbook init ./Gitbook Command inserted to terminal window Note: You may obtain some additional information from Gitbook Setup Guide. Figure below shows the initialization process is completed along with a list of files created. Figure: Gitbook initialized completed Figure below shows Gitbook is initialized for the very first time and it is installing Gitbook v3.2.3. It will take some time to install all the required packages if you are doing it for the very first time. Figure: Initial Gitbook creation. The folder can be found at C:/Users/Melvin/Gitbook according to the information shown on the terminal window. Figure below shows the files in the Gitbook folder. Figure: Files in the folder Start GitBook Server To view the GitBook created using the template generator, start the server at the root directory of your folder using the command gitbook serve. For my case, the root directory of my application is Gitbook. You may want to refer to the terminal window section if you have forgotten how to start a terminal window pointing to the directory. Figure below shows the command mentioned is entered in the terminal window and a local (on your machine) web server is started. Figure: A Gitbook server is started From the figure above, the server address to access our Gitbook website is localhost:4000. Head to your preferred web browser and enter the address localhost:4000 at the address bar. Figure below shows the landing page of the Gitbook generated by template generator. Figure: Landing page of the website View and Edit GitBook Files The easiest way of editing the content is through a text editor (still). The operation may be different if you use a text editor other than Visual Studio Code. Open your folder in Visual Studio Code by navigating to File > Open Folder. Go to the root directory of your folder, C:/Users/Melvin/Gitbook for my case, and select \"Open Folder\". Figure below shows the content of the folder Gitbook before \"Open Folder\" action is performed. Figure: Gitbook folder is selected After the folder is opened, a list of files available in Gitbook folder are shown in the bottom left panel. Figure below shows the result after the folder is opened. Figure: readme.md is opened at VS Code The content of Gitbook is written in Markdown. It is very simple to write in markdown. You may use Markdown Cheat Sheet for your reference. For demo purpose, insert the code below to readme.md. # Introduction First paragraph ## Subheader Second paragraph ### Another subheader More information Figure below shows the result of the Gitbook after the following text are inserted to readme.md. For any files that is edited, you will have to restart your web server. This is due all the changes has to be regenerated before users can view it on the browser. Figure: Content of readme.md is replaced by the given code GitBook Files Structure The information in this section is selectively obtained from Official Gitbook Documentation. You may take a look if you are interested. Depending on the programmer and the purpose of the Gitbook, the file structures may be slightly different. A basic Gitbook usually looks something like this: . ├── book.json ├── README.md ├── SUMMARY.md ├── chapter-1/ | ├── README.md | └── something.md └── chapter-2/ ├── README.md └── something.md It contains a list of folders and files. Each of them serves a different purpose. Here is an overview of what each of these does: File Description book.json Stores configuration data (optional) README.md Preface / Introduction for your book (required) SUMMARY.md Table of Contents (See Pages) (optional) GLOSSARY.md List of terms to annotate (See Glossary) (optional) Important GitBook Notes Gitbook is generated every time you start the Gitbook server and stored in the folder /YOUR_GITBOOK_FOLDER/_book. If you would like to have the book generated without starting the server, you can use the command gitbook build. The _book folder contains all the generated code and can be moved to any web server. If you would like to export your Gitbook to ePub, Mobi, or PDF files after publishing it on the web, refer to this documentation. "},"starter.html":{"url":"starter.html","title":"Introduction","keywords":"","body":" Last modified: Sat Jan 26 2019 20:00:12 GMT+0800 (Malay Peninsula Standard Time) Sample Starter Code Introduction I compiled a package that contains three major components: homepage, CV, and Gitbook. The index page is a strip down version of Jekyll Uno while the CV a modification of Online CV. However, Legacy Gitbook (v3.2.3) is used instead of modern Gitbook (v4+). The main reason of using it is due to the fact that users can own their source code and edit them locally instead of doing it on the cloud. This package is very user friendly for non-programmer as I reorganized all the files and have all the variables written in several data files. This make it them to edit without needing to go into the actual code. Example of Final Product My Personal Website Melvin's landing page Melvin's CV Melvin's Ruby on Rails Tuturial Jekyll For Everyone Sample Website Landing page CV Gitbook Note: The content in jekyll-for-everyone sample website is for illustration purpose only. It may not contain accurate information. List of Features in the Package Index Page Name Title Line Secondary Information Line Links to social pages Links to other pages CV Summary or Background Education Experiences Individual Projects Group Projects Skill & Proficiency Related Courses Honors & Awards Languages Social Link Volunteer Experiences Gitbook Sample Gitbook Initial Setup You may follow this video that I made for Initial Setup or follow the steps below. It is fairly easy to setup as most of the things are already done for you. There should not much things to be done for initial setup as it is ready to go. Please go through the steps in ascending order. Fork The Project To begin, head to my Github repository and fork (clone the project and store it in your account) the project. Figure below shows the repository. Press the \"fork\" button on the top right corner. Figure: Repository for the project to be forked Figure below shows the project is in the progress of being forked. Figure: Repository in the progress of being forked Then, your project will then be forked to your own github repository. Figure below shows the project is forked to my alternative Github account: \"jekyll-for-everyone/jekyll-for-everyone\" compared to my original account \"melvinchng/jekyll-for-everyone\". Figure: Repository is forked Edit Repository Name The next step is to edit the repository name. To begin, head to setting (gear icon). Replace your website URL to your YOUR_GITHUB_USERNAME.github.io. Since my Github username is jekyll-for-everyone, the my repository will be jekyll-for-everyone.github.io. Figure below shows the repository name is edited. Figure: Repository's name is edited Note: The steps can be also found on the Adding a Jekyll theme to your GitHub Pages site with the Jekyll Theme Chooser on Github. Complete the steps by pressing the button \"rename\". The name of your repository will then be updated. Figure belows shows the name of my repository is updated. Figure: Repository name has been updated Clone The Repository Login to your Github Desktop (or alternative if you are using Ubuntu Linux). Go to File > Clone Repository and a pop up window will show up. Figure below shows the repository list for my account. Figure: Clone repository screen Select your repository and press clone. Figure below shows the repository is cloned. Figure: Repository cloned Edit Config File The next step is to edit the configuration file _config.yml. Open your project folder in Visual Studio Code. In the file _config.yml, replace the website URL, line 5: url: 'http://your-url.github.io', to your YOUR_GITHUB_USERNAME.github.io. Since my Github username is jekyll-for-everyone, the link will be jekyll-for-everyone.github.io`. Figure below shows line 5 is modified. Figure: URL is changed To save the changes, press the green \"commit\" button at the end of the page. Figure below shows the location of the green \"commit\" button. If you would like to learn more about using Github, you may want to refer to Version Control Chapter on my Ruby on Rails Tutorial. Figure: Commit the changes Access The Website You should be able to access your website via YOUR_GITHUB_USERNAME.github.io. Since my Github username is jekyll-for-everyone, the link to my website is jekyll-for-everyone.github.io. Figure below shows the landing page of my website. Figure: Landing page at my website If you would like to access the CV and Gitbook, use the link YOUR_GITHUB_USERNAME.github.io/cv and YOUR_GITHUB_USERNAME.github.io/gitbook. You can also view the status of website in your \"commits\" tab at Github repository website. Figure below shows the status of github pages is building (orange circle). Figure: Github pages is building Figure below shows the status of my repository is built successfully (green check mark). Figure: Github pages has been built successfully Files Structure The files and structures are listed below. This information will assist you in finding the content you would like to edit. If you are unsure what to do, skip to the next section and follow the sample video instruction. Index Page The background picture for index page, named as background-cover.jpg can be found and replaced at index_style/images. The profile picture for index page and cv page, named as profile.png can be found and replaced at assets/images. All the data that shown in the index page are stored in /_data/index_page.yml. Replace all the content in the files. CV All the data that shown in the cv are stored in /_data/cv_NAME.yml. Replace all the content in the files. If you would like to remove a specific section in the cv, change the variable from true to false for the variable in /_data/cv_enable_section.yml. Gitbook If you are not going to use the Gitbook feature, remove the gitbook folder. The source code is stored at /gitbook_source_code The content of generated book using the command gitbook build is coped from /gitbook_source_code/_book to /gitbook. your-website-link.github.io/gitbook will be the link to access your Gitbook. If you would like to change the link, rename the link in /data/index_link.yml and rename your Gitbook folder based on the link you provide. There are a lot of plugins that you can use to modify the appearence of Gitbook. More information available here. Other If you would like to replace the website icon, you can use this website to create one and replace the downloaded icon at /favicon.io. You may also use Website Planet's favicon generator as reflected by one of the reader of this tutorial, N Johnson. If you would like to use Google Analytics, add your tracking number to /_config.yml. Edit The Content You may follow this video that I made for Editing The Content Section or follow the steps below. All the edit will be done via Visual Studio Code (as mentioned in earlier chapter). The location of the files and the content you should edit to make the web pages become yours are mentioned in the files structure. Once all the changes are made, commit the changes to Github Desktop. Within a minute or two, the webpages will be updated. If you are not going to use the Gitbook feature, remove the link group (shown in video, but added back later) in /data/index_links.yml and Gitbook folder. View The Content Locally You may also view the changes locally in your machine before committing the changes. To start the server for Jekyll and Gitbook, use the command jekyll serve and gitbook serve (as mentioned in earlier chapter). Only one server can be started at the same time as they are sharing the same port number (4000). Note: For the first time user, install Jekyll Sitemap and Jekyll SEO gems by using the command gem install jekyll-sitemap and gem install wdm. You may also want to install missing Gitbook plugins by using the command gitbook install. Tips On Writing Gitbook My best suggestion to you is to not to rush yourself while trying to prepare your material. Do not give yourself an ETA (Estimated Time of Arrival usually refers to when it should be completed) if you are trying to write a quality content. If you wonder how long it takes me to write this tutorial, it is definitely more than you have expected. I took more than two weeks (including weekend) to plan, write, and test this tutorial while working full time. I enjoy sharing and write content that like no other, especially content that is tailored to newbie. Conclusion I hope you enjoy the reading and managed to get the website working. As a reminder, if you love this project and would like to support it, spread the message and keep the footer as in. If you would like to learn more about Web Development and attempt to write your own web application, you may read my Ruby on Rails Tutorial that I wrote for people with minimal programming experience. "}}