{"./":{"url":"./","title":"Cover","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Note: If you are viewing the content from your mobile devices, use the hamburger style menu icon located at the top left corner of your browser to navigate between sections. "},"About.html":{"url":"About.html","title":"About The Author","keywords":"","body":" Last modified: Sat Jan 26 2019 20:08:01 GMT+0800 (Malay Peninsula Standard Time) About The Author Melvin Ch'ng is finishing his last semester in B.S. Computer Engineering from San Jose State University (Graduated on December 2017; If you would like to know what he is doing as of today, you can connect with him via LinkedIn). He took Professor Ronald Mak's Software Engineering class at Spring 2016. He developed his first Ruby on Rails Web Application with three other teammates: one Computer Engineering, one Software Engineering and one Industrial and System Engineering student. He was the main developer for the application at that time. During Summer 2016, he developed his second Ruby on Rails application and applied the knowledge that he learnt from his Database System class. At the same time, he developed two a Jekyll on Rails websites: one to brush up his CSS skills and one for a Student Technology Conference that he was invited to participate. Then, he fell in love with Ruby on Rails and his first choice of technology use for a project will always be Ruby on Rails. In Fall 2016, he developed two Ruby on Rails websites: one for a class project and another one for a prototyping challenge (Full Stack Development, both hardware and software) he and his team participated. The team won 4th place in a 6 months long prototyping challenge. In May 2017, he attended a public hackathon with his friends. His team was the only team developed in full stack (both hardware and software). The team built a robot (ate Dim Sum and sleep for 6 hours at home) in 24 hours period and they were in the Top 10 teams list won the Best use of AWS technology in the competition. Currently, he and his team is developing a Full Stack Ruby on Rails project (hardware and software approach) for his senior project. Other than attending school, he is an active conference attendee. Some of conferences that he attended include Nvidia's GPU Technology Conference, Apigee's I Love APIs Conference, Game Developers Conference (GDC), IoT World Conference, and The International Consumer Electronics Show (CES). His interest and favorite activities include reverse engineering, recondition and repair collectible electronics, alpha and beta testing new and unannounced products, low light and 360-degree photography, CAD and 3D printing, and crafting. His open source projects can be found in his Github repository. "},"Acknowledgements.html":{"url":"Acknowledgements.html","title":"Acknowledgements","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:03 GMT+0800 (Malay Peninsula Standard Time) Acknowledgements This tutorial is written by Melvin Ch’ng and available to everyone at no cost. You may not reproduce this material without seeking the permission of the author. This is not an ordinary coding tutorial that explains in depth in theory. This is a tutorial that shows you examples and step by step process of design, integrate, and test a feature. I am unable to guarantee that my attempt is the most efficient nor all the information in this tutorial is correct. However, I will try my best to keep the the information as accurate as possible. A secondary source such as documentation is required to understand the concept behind. Most of the tutorial was written and tested on a Windows 8.1 machine running Ruby 2.2.3 and Rails 5.0 while some of the tutorial was written on Ruby 2.4.1 and Rails 5.1. The code entered into the terminal window may vary based on the operating system and your system configurations. If you followed my Ruby on Rails Windows, Ubuntu Linux, or MacOS installation guide in this tutorial, you should be able to run run the commands in this tutorial without any issue. This tutorial is used as a reference material for the following classes in San Jose State University Term Class Section Description Professor Fall 2016 CMPE 131 01 Software Engineering Ronald Mak Fall 2016 CMPE 131 03 Software Engineering Ronald Mak Spring 2017 CMPE 131 03 Software Engineering Ronald Mak Fall 2017 CMPE 131 05 Software Engineering Hungwen Li I was invited by Professor Hungwen Li to give a few guest lectures for his CMPE 131 Software Engineering class on Fall 2017. The lecture slide can be downloaded below. Topic Slide Ruby on Rails Introduction download Database Introduction - Ruby on Rails ORM download Version Control (GitHub) and Software Testing download Note: There is a big jump from Ruby 2.2.3 to Ruby 2.4.1. Please contact me if you followed the tutorial and you are unable to get the same result as discussed #include /* * * Anyone including myself are not responsible for bricked computer, * dead hard drives, thermonuclear war, or you getting fired * because the installation failed. Please do some research if you * have any concern about all the installation files required in this * guide before installing it! YOU are choosing to make these * modifications, and if you point the finger at us for messing up * your machine, we will laugh at you. * */ "},"Introduction.html":{"url":"Introduction.html","title":"Introduction","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Introduction This tutorial will provide all the necessary information for people that are new to Ruby on Rails and Web Development. As I am doing this during my free time, there will be no ETA (Estimated Time of Arrival) of new materials. Please provide feedbacks so that I can improve on it. Clearly, I am not a English major and I make grammatical errors. You are always welcome to correct me my mistake. The tutorial was written based on Ruby 2.2.3 on 2016. I am constantly updating this tutorial to Ruby 2.4.1. If you think any parts of the tutorial does not work with newer Ruby version, please contact me. This tutorial will be broken into a few parts: Part I: Ruby on Rails Installation Part II: Ruby on Rails Crash Course Part III: First Rails Application Part IV: Layout and Styling Part V: Implementing Features Part VI: Other Rails Applications The first part of the tutorial will ensure that each reader is able to install Ruby on Rails successfully and able to run the command in this tutorial without any issue. Then, the second part will provide a user some basic syntax to people that are new to Ruby on Rails. The third part of the tutorial will focus on creating a Web Application and deploy to Heroku PaaS. Then layout and styling will be discussed in Part IV. In Part V, several examples are discussed and shown to ensure that each reader is able to implement the features. The final part, Part VI, will discuss some of the extra thing that you can do with Ruby on Rails. To make this tutorial more fun, pictures of my work including my collectible and photography will be included at the appropriate sections. For questions, comments and suggestions, please contact me at you.email.melvin@gmail.com. Also, if you want to me to include a specific topic here, please e-mail me. Thank you for reading and have fun learning Ruby on Rails! "},"SUMMARY.html":{"url":"SUMMARY.html","title":"Table of Content","keywords":"","body":" Last modified: Sat Mar 23 2019 16:01:03 GMT+0800 (Malay Peninsula Standard Time) Table of Content Cover About The Author Acknowledgements Introduction Table of Content Part I. Ruby on Rails Installation Chapter 1. Windows Installation Guide 1.1 Obtaining Required Files 1.2 Ruby Installation 1.3 DevKit Installation and Setup 1.4 Node.JS Installation 1.5 Change RubyGems’ Source 1.6 Rails Installation 1.7 Create a Rails Application 1.8 Start your server 1.9 Generate a simple MVC Chapter 2. Ubuntu Linux Installation Guide 2.1 Ruby Installation 2.2 Rails Installation 2.3 Node.JS Installation 2.4 Create a Rails Application 2.5 Start your server 2.6 Generate a simple MVC Chapter 3. MacOS Installation Guide 3.1 Ruby Installation 3.2 Homebrew Installation 3.3 Rails Installation 3.4 Create a Rails Application 3.5 Start your server 3.6 Generate a simple MVC Chapter 4. Windows Installation Guide for Ruby 2.4.x 4.1 Obtaining Required Files 4.2 Ruby Installation 4.3 MSYS2 Installation and Setup 4.4 Node.JS Installation 4.5 Change RubyGems’ Source 4.6 Rails Installation 4.7 Create a Rails Application 4.8 Start your server 4.9 Generate a simple MVC Chapter 5. Windows Installation Guide for Ruby 2.5.x 5.1 Obtaining Required Files 5.2 Ruby Installation 5.3 MSYS2 Installation and Setup 5.4 Node.JS Installation 5.5 Change RubyGems’ Source 5.6 Rails Installation 5.7 Create a Rails Application 5.8 Start your server 5.9 Generate a simple MVC Part II. Ruby On Rails Crash Course Chapter 1. Ruby Basics 1.1 Ruby IRB 1.2 Create And Run A Script 1.3 Print and Comment 1.4 Variable Scope and Checking 1.5 While Loop 1.6 Array and Loop 1.7 Fixnum Loop 1.8 For Loop 1.9 Recursive 1.10 If, Else, Else If Statement Chapter 2. Ruby Objects and Methods 2.1 .first and .last Methods 2.2 .include? Method 2.3 .inspect Method 2.4 .to_str Method 2.5 .pluck Method 2.6 .gsub! Method 2.7 .all Method 2.8 .join Method Part III. First Rails Application Chapter 1. Before We Begin 1.1 Terminal 1.2 Model, View, Controller 1.3 Text Editor 1.4 Relational Database Basics 1.5 Database Manager Basics 1.6 Ruby Gems Chapter 2. Create a Rails Application 2.1 Ruby on Rails MVC 2.2 Rails Scaffolding 2.3 Database Migration 2.4 Start a Web Server 2.5 Insert, Edit, Delete Operation 2.6 Populating Database with seeds.rb 2.7 More rake:db Command 2.8 Scaffolding With References 2.9 Create a New Page 2.10 Retrieve Objects using ActiveRecord from Multiple Table Chapter 3. Version Control: Github 3.1 Git 3.2 Github Desktop 3.3 Add Project to Github 3.4 Github Website 3.5 Add Collaborators 3.6 Changes and Deletions 3.7 History 3.8 Branches 3.9 Merge 3.10 Conflict Chapter 4. Deploy your Application 4.1 Heroku CLI 4.2 Prepare to Deploy 4.3 Deploy to Heroku 4.4 Database Migration 4.5 Some Useful Heroku Commands Chapter 5. 10 Minutes Setup Challenge 5.1 Video Transcript Part IV. Layout and Styling Chapter 1. Bootstrap Framework 1.1 Install Bootstrap Gem 1.2 Use Bootstrap Gem 1.3 Containers 1.4 Header and Footer 1.5 Style a Form 1.6 Bootstrap Button Style 1.7 Bootstrap Button Size Chapter 2. Materialize Framework 2.1 Install Materialize Gem 2.2 Use Materialize Gem 2.3 Add noUiSlider 2.4 Add Material Icon 2.5 Header and Footer 2.6 Containers Part V. Implementing Features Chapter 1. Add Comment Feature to Any Model 1.1 Create a Post Model 1.2 Install and Configure Commontator GEM 1.3 Testing and Verifying the Feature Chapter 2. Joint Table and Booking GEM 2.1 Create Car and Store Model 2.2 Joint table for Car and Store 2.3 Installing Bookable Gem 2.4 Routing for Bookable GEM 2.5 Result Verification with SQLiteStudio Chapter 3. Simple Calendar Gem 3.1 Replaced JS Calendar with simple_calendar Gem 3.2 Removed unnecessary files and Gem Chapter 4. Search Feature 4.1 Create a page for Search 4.2 Create a Search Bar 4.3 Adding a simple search feature 4.4 How to Query in SQLiteStudio 4.5 Wildcards for LIKE Operator 4.6 Search across Multiple Tables 4.7 Testing and Verification Chapter 5. Adding User to Any Table 5.1 Adding User Association 5.2 The Famous current_user 5.3 More Testing and Function Verification Chapter 6. Google Map 6.1 Initial Setup 6.2 Configure gmaps4rails 6.3 Obtain API Key 6.4 Add Google Map To View 6.5 Dynamic Map Marker Chapter 7. Shortest Path Finder 7.1 Initial Setup 7.2 Distance Calculation 7.3 Dijkstra Library 7.4 Search and Result Page 7.5 Define Search and Result in Controller 7.6 Test and Verify Feature Chapter 8. Data Analysis 8.1 Initial Setup 8.2 Import Data From CSV File 8.3 Output The Table 8.4 Group By And Mean 8.5 Filter By (String) 8.6 Filter By (Value) 8.7 Sort By (Value) Chapter 9. Plotting A Chart 9.1 Initial Setup 9.2 Hash and Array Explanation 9.3 Array of Hash to Array of Array 9.4 Bar Chart 9.5 Pie Chart Chapter 10. Devise Part VI. Other Rails Application Chapter 1. RESTful JSON API 1.1 Initial Setup 1.2 Controller Setup 1.3 HTTP POST Script 1.4 Run the Script 1.5 Clean Up Chapter 2. ActionCable 2.1 Initial Setup 2.2 Configure Model, Channel, and Job 2.3 Testing and Verification 2.4 Deploy Feature To Heroku Chapter 3. Offline Application Cache 3.1 Setup 3.2 Testing and Verification Chapter 4. Rails JSONB 4.1 Initial Setup 4.2 Add a JSONB Column To Existing Table 4.3 Use JSONB Column To In Form 4.4 Testing and Validation "},"RubyOnRailsInstallation.html":{"url":"RubyOnRailsInstallation.html","title":"Part I. Ruby on Rails Installation","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Part I. Ruby on Rails Installation The goal of this part is to install Ruby on Rails onto your machine and generate a sample Web Application. There are many ways of installing Ruby on Rails, but some of them that you may find on the internet are very complicated. The method that I introduce in my tutorial is easy and reliable. You may find three different installation guide in this part: Windows, Ubuntu Linux, and MacOS. I have also created step by step video installation guide for Windows and Ubuntu Linux. Please refer to the specific chapter to obtain the video link. 360-Degree Photography, Mercedes-Benz’s concept car in CES 2017 "},"WindowsInstallationV2.2.3.html":{"url":"WindowsInstallationV2.2.3.html","title":"Chapter 1. Windows Installation Guide","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Chapter 1. Windows Installation Guide for Ruby 2.2.x This chapter will discuss Ruby 2.2.3 installation. If you are planning to use the latest Ruby version, Ruby 2.4.1, as of August 2017, please refer to Chapter 4. However, you may have compatibility issues due to some of the Gems that you may want to use is not updated and tested for Ruby 2.4. The following guide in this chapter was tested on machines running Windows 7 Professional 64-bit Windows 8.1 Professional 64-bit Windows 10 Professional 64-bit It should work on any machine that runs on modern Windows Operating System. You may follow this video tutorial. However, you may receive SSL_connect error during or after installation. If you received SSL_connect” error after creating your Website or while trying to start your server, please refer to Chapter 1.7. If you received SSL Certificate Error while installing Rails or pulling updates from RubyGems.org, please read Chapter 1.5. 1.1 Obtaining Required Files If you already have a copy of Ruby and Rails installed on your machine, it is recommended to remove them from your machine. To begin, determine your Windows Architecture and obtain the URL to the files from correct table below. For Windows users, it is highly recommended to use Ruby 2.2.3 instead of newer Ruby versions. Any other Ruby version between 2.2.3 and 2.4.1 tend to have issue with Windows machine. Table 1.1.1: Required files for 32-bits Operating System File File Name Ruby 2.2.3 Installer rubyinstaller-2.2.3.exe Development Kit DevKit-mingw64-32-4.7.2-20130224-1151-sfx.exe Node.JS node-v4.6.0-x86.msi Table 1.1.2: Required files for 64-bits Operating System File File Name Ruby 2.2.3 Installer rubyinstaller-2.2.3-x64.exe Development Kit DevKit-mingw64-64-4.7.2-20130224-1432-sfx.exe Node.JS node-v4.6.0-x64.msi 1.2 Ruby Installation Run the Ruby Installer and the screen as shown in Figure 1.2.1 will should show up. Accept the license agreement and proceed to the next step by pressing the “Next” button. Figure 1.2.1: Ruby 2.2.3 License Agreement Check “Add Ruby executables to your PATH” and complete the installation by pressing the “Install” button as shown in Figure 1.2.2. Figure 1.2.2: Ruby 2.2.3 Installation Destination and Optional Tasks 1.3 DevKit Installation and Setup Figure 1.3.1 shows a self-extracting archive. When you execute the file, it’ll ask you for a destination for the files. Enter a path that has no spaces in it. I recommend something simple, like C:\\DevKit. Click “Extract” and wait until the process is finished. Figure 1.3.1: 7-Zip self-extracting and extract location Next, you need to initialize the DevKit and bind it to your Ruby installation. Open your favorite command line tool and navigate to the folder you extracted the DevKit into. cd C:\\DevKit Auto-detect Ruby installations and add them to a configuration file for the next step. ruby dk.rb init Install the DevKit, binding it to your Ruby installation. ruby dk.rb install A similar terminal output as shown in Figure 1.3.2 shows that the binding process is completed successfully without any error. Figure 1.3.2: DevKit and Ruby initialization If you are unable to get a similar output in Figure 1.3.2 that shows DevKit initialized successfully, modify the file config.yml in C:\\DevKit. Figure 1.3.3 shows an error that states you have to fix config.yml. Figure 1.3.3: config.yml error Open the file using any editor and specifying your Ruby directory as shown in line 15 in Figure 1.3.4. Figure 1.3.4: Initialization Ruby Path manually using text editor Save the file and run the command ruby dk.rb install and you should be able to initialize and install correctly. 1.4 Node.JS Installation Run the Ruby Installer and the following screen shown in Figure 1.5.1 will show up. Figure 1.4.1: Node.js Setup Wizard Accept the license agreement as shown in Figure 1.4.2 and proceed to the next step by pressing the “Next” button. Figure 1.4.2: Node.js License Agreement Screen Complete the installation by going through each steps. 1.5 Change RubyGems’ Source To avoid receiving SSL error when trying to install Rails or pull updates from RubyGems, open a command line window and enter the following commands below. gem sources -r https://rubygems.org/ gem sources -a http://rubygems.org/ A similar output as shown in Figure 1.5.1 will be generated from the command line tool after you inputted the second command. Figure 1.5.1 shows the second command only. Please run both of the commands. Input the character y to the command line tool to add http://rubygems.org/ to sources. Figure 1.5.1: Output of terminal 1.6 Rails Installation Open a command line window and insert the following command below. The command below will install the latest version of Rails. gem install rails A similar output as shown in Figure 1.6.1 will be generated from the command line tool. Figure 1.6.1: Output of terminal while installing Rails To verify that you have successfully installed both Ruby and Rails, enter the following command. A similar output as shown in Figure 1.6.2 will be generated from the command line tool. Ruby –v Rails -v Figure 1.6.2: Ruby and Rails successfully installed. 1.7 Create a Rails Application To create your website, it is highly recommending to create a folder name Code in the Ruby file directory. The purpose the folder Code is to store all your source code folder. The Ruby folder location may vary depending on your Operating System Architecture. Enter the folder Code and create a sample application name Blog. Enter the following command to command line window a similar output as shown in Figure 1.7.1 below will be generated. Rails new Blog Figure 1.7.1: Generating a new Blog You may or may not receive SSL_connect error, as shown in the screenshot below. Figure 1.7.2: SSL_connect error while creating a Blog It is recommended to not to skip the steps below even if you are not having SSL_connect error. To resolve this error, navigate to the root of your source code and open Gemfile using a text editor. Figure 1.7.3 shows a Gemfile is being opened. Figure 1.7.3: Gemfile (with no extension) is being opened After opening the Gemfile, replace https with http as shown in line 1 of Figure 1.7.4 and save the file. The SSL_connect error should be resolved now. Figure 1.7.3: https is replaced with http as shown in line 1 1.8 Start your server To start the Web Server, navigate to the folder of your code and run the follow command below. A similar output as shown in Figure 1.8.1 will be generated from the command line window. rails s Figure 1.8.1: A Rails server is started. Insert the URL in your Web Browser based on what you have seen from the terminal window to visit your website. According to Figure 1.8.1, localhost:3000 is the path to my website. A similar output as shown below will be generated from the command line tool. Figure 1.8.2: A working Ruby on Rails website 1.9 Generate a simple MVC A second command line window is opened to prevent termination of local Web Server. To verify that Ruby and Rails were installed correctly without any errors, use the scaffold command to generate a simple set of a model, views, and controller for Rails Application. rails g scaffold User name:string age:integer A similar output as shown in Figure 1.9.1 will be generated from the command line tool. Figure 1.9.1: Output of terminal window when a scaffold command is used. Run the command rake db:migrate to migrate the database generated by the command scaffold to local database server. A similar output as shown Figure 1.9.2 will be generated from the command line tool. Figure 1.9.2: Output of terminal window when a migrate command is used. Navigate to the index page of newly generated page by entering the path at your browser. The index page of Users will be generated as shown in Figure 1.9.3. localhost:3000/users Figure 1.9.3: Users index page To make sure that the application is working and does not throw any error when new data are committed to the database, press the link New User create a new sample data set. A form will be rendered a shown in Figure 1.9.4. Populate the form with any sample data that you prefer and press \"Create User\". Figure 1.9.4: New user form An alert message, as shown in Figure 1.9.5, User was successfully created alert message will be shown on the screen when the data is inserted into the database successfully. Figure 1.9.5: User was successfully created alert To redirect to the index page of Users, press the Back button located under the Age shown in Figure 1.9.5. By looking at Figure 1.9.6, we can see that the Users index page was being rendered. Figure 1.9.6: Users index page was being rendered from output log Figure 1.9.7 shows a picture of Users index page with the data that populated in the form earlier. Figure 1.9.7: Users index page was being rendered Congratulation, you have successfully installed Ruby on Rails on your own machine! "},"LinuxInstallation.html":{"url":"LinuxInstallation.html","title":"2.1 Ruby Installation","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Chapter 2. Ubuntu Linux Installation Guide The following guide was tested only on machine running Ubuntu 16.04 64-bit. It should work on any machine that runs on 32-bit. This may or may not work on earlier version of Linux or distribution. You may follow this video tutorial. 2.1 Ruby Installation Open a terminal as shown in Figure 2.1.1 by pressing the Ubuntu logo in your top left navigation bar. Figure 2.1.1: Terminal Window icon in Applications The root directory of the terminal as shown in Figure 2.1.2 is Home directory. Figure 2.1.2: Terminal Window and root directory in Ubuntu Next, enter the following command below to begin your installation. Enter the command as in a line. Do not hit enter until you are done entering it. sudo apt-get install build-essential patch ruby-dev zlib1g-dev liblzma-dev libsqlite3-dev After the command above is inserted, your user account’s password will be be request. When the screen, as shown in Figure 2.1.2, is requesting for user input, enter Y to download and install the required files. Figure 2.1.2: Ruby Installation After the installation is complete, run the command below to check if Ruby is installed successfully. Figure 2.1.3 shows the input and the output text from the Terminal Window. If the code does not return a Ruby version, please repeat the installation process ruby -v Figure 2.1.3: Ruby version shown in Terminal Window 2.2 Rails Installation To download Rails, enter the code below in a Terminal Window. Figure 2.2.1 shows the input and the output text from the Terminal. This operation can take up to 5 minutes depending on your computer’s processing speed and Internet connection. sudo gem install rails Figure 2.2.1 Input and the output text from the Terminal After the installation is complete, run the following code to check if Ruby is installed successfully. Figure 2.2.2 Rails version in the Terminal Window. If the code does not return a Rails version, please repeat the installation process rails -v Figure 2.2.2: Rails version shown in Terminal Window 2.3 Node.JS Installation To download Node.JS, enter the code below in a Terminal Window. Figure 2.3.1 shows the Node.JS installation in the Terminal Window. The operation may require you to respond. Respond y if there is a screen asking for a user permission to download the files. sudo apt-get install nodejs Figure 2.3.1 Node.JS installation 2.4 Create a Rails Application To create your website, it is highly recommending to create a folder name Code in the Ruby file directory. The purpose the folder Code is to store all your source code folder. The Ruby folder location may vary depending on your Operating System Architecture. Enter the folder Code and create a sample application name Blog. Enter the following command to command line window a similar output as shown in Figure 2.4.1 below will be generated. rails new Blog Figure 2.4.1 Generating a new Blog 2.5 Start your server To start the Web Server, navigate to the folder of your code and run the follow command below. Figure 2.5.1 shows a Rails server is running. rails s Figure 2.5.1: A Rails server is running Insert the URL in your Web Browser based on what you have seen from the Terminal Window to visit your website. Figure 2.5.2 shows a running Ruby on Rails website. Based on the Figure 2.5.1, localhost:3000 is the path to my website. Figure 2.5.2 A working Ruby on Rails website 2.6 Generate a simple MVC A second command line window is opened to prevent termination of local Web Server. To verify that Ruby and Rails were installed correctly without any errors, use the scaffold command to generate a simple set of a model, views, and controller for Rails Application. rails g scaffold User name:string age:integer A similar output as shown in Figure 2.6.1 will be generated from the command line tool. Figure 2.6.1: Output of terminal window when a scaffold command is used. Run the command rake db:migrate to migrate the database generated by the command scaffold to local database server. A similar output as shown Figure 2.6.2 will be generated from the command line tool. Figure 2.6.2: Output of terminal window when a migrate command is used. Navigate to the index page of newly generated page by entering the path at your browser. The index page of Users will be generated as shown in Figure 2.6.3. `localhost:3000/users` Figure 2.6.3: Users index page To make sure that the application is working and does not throw any error when new data are committed to the database, press the link New User create a new sample data set. A form will be rendered a shown in Figure 2.6.4. Populate the form with any sample data that you prefer and press Create User. Figure 2.6.4: New user form An alert message, as shown in Figure 2.6.5, User was successfully created alert message will be shown on the screen when the data is inserted into the database successfully. Figure 2.6.5: User was successfully created alert To redirect to the index page of Users, press the Back button located under the Age shown in Figure 2.6.5. By looking at Figure 2.6.6, we can see that the Users index page was being rendered. Figure 2.6.6: Users index page was being rendered from output log Figure 2.6.7 shows a picture of Users index page with the data that populated in the form earlier. Figure 2.6.7: Users index page Congratulation, you have successfully installed Ruby on Rails on your own machine! "},"MacInstallation.html":{"url":"MacInstallation.html","title":"Chapter 3. MacOS Installation Guide","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Chapter 3. MacOS Installation Guide The following guide was tested only on machine running MacOS Sierra (10.12). If you are using older version of MacOS, this tutorial may not work. At the time this tutorial is being written the latest stable Ruby version for MacOS is Ruby 2.4.0. If any of the command require you to match the Ruby version that you have downloaded, change the version accordingly. 3.1 Ruby Installation Open a terminal as shown in Figure 3.1.1. Figure 3.1.1: Terminal Window icon in Applications The root directory of the terminal as shown in Figure 3.1.2 is your Home directory. Figure 3.1.2: Terminal Window in MacOS Sierra By default, modern MacOS come preinstalled with Ruby. To check your Ruby version, enter the command below. ruby -v After the command above is inserted, you will see the Ruby version on your terminal window. Figure 3.1.3 shows the terminal window with Ruby version 2.0.0 returned to the terminal window. Figure 3.1.3: Ruby version The default Ruby version, Ruby 2.0.0. is old. The latest stable Ruby version for MacOS when this tutorial is written is Ruby 2.4.0. To update your Ruby in your Mac to the latest version, enter the command below. Figure 3.1.4 shows the output after the command is entered into the terminal window. curl -sSL https://get.rvm.io | bash -s stable --ruby Figure 3.1.4: Updating Ruby version If you do not have XCode installed in your machine, a window will pop up and ask you to see if you would like to install XCode. XCode and Git command line are part of the developer tools required in order to update Ruby on your machine. Select Install, as shown in Figure 3.1.5, to install the required files and enter your admin password in the terminal window. Figure 3.1.5: XCode installation window pop up and Admin password request A License Agreement window, as shown in Figure 3.1.6 will then pop up. Press \"Agree\" to continue. Figure 3.1.6: License Agreement window If you received Return Error 1 message as shown in Figure 3.1.7, skip to Chapter 3.2. However, if you received an output as shown in Figure 3.1.8, you have successfully updated your Ruby version to Ruby 2.4.0 (as shown in the console output). Figure 3.1.7: Status 1 error message Figure 3.1.8: Ruby 2.4.0 installed successfully Now, set Ruby 2.4.0 as your default Ruby version, enter the command below. Figure 3.1.9 shows the default Ruby version is set to Ruby 2.4.0. If you are not using Ruby 2.4.0, change the number in the command according to the version shown in Figure 3.1.8. If the code does not return a correct Ruby version, please repeat the installation process: rvm use 2.4 --default To check your updated Ruby version, use the command ruby -v. Figure 3.1.7: Ruby 2.4.0 is set as default Ruby version Proceed to Chapter 3.3 to install Rails. 3.2 Homebrew Installation If you received Return Error 1 message as shown in Figure 3.2.1, continue reading. If not, proceed to Chapter 3.3 to install Rails. Figure 3.2.1: Status 1 error message The reason this error shows up is because you do not have Homebrew installed. To fix this, install Homebrew by entering the command below into your terminal. A confirmation screen, as shown in Figure 3.2.2, will display all the files and scripts that will be installed on your machine. Press return key to install the files. ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" Figure 3.2.2: Homebrew installation confirmation screen If your machine is password protected, you will asked to enter your password next. Figure 3.2.3 shows the password request window. Figure 3.2.3: Password request window Figure 3.2.4 shows Homebrew is installed successfully to your machine. Now, update your Ruby by repeating the process as discussed in Chapter 3.1. Figure 3.2.4: Homebrew installed successfully 3.3 Rails Installation To download Rails, enter the code below in a Terminal Window. Figure 3.3.1 shows the input and the output text from the Terminal. This operation can take up to 5 minutes depending on your computer’s processing speed and Internet connection. gem install rails Figure 3.2.1 Input and the output text from the Terminal After the installation is complete, run the following code to check if Ruby is installed successfully. Figure 3.2.2 Rails version in the Terminal Window. If the code does not return a Rails version, please repeat the installation process. rails -v Figure 3.2.2: Rails version shown in Terminal Window 3.4 Create a Rails Application To create your website, it is highly recommending to create a folder name Code in the Ruby file directory. The purpose the folder Code is to store all your source code folder. The Ruby folder location may vary depending on your Operating System Architecture. Enter the folder Code and create a sample application name Blog. Enter the following command to command line window a similar output as shown in Figure 3.4.1 below will be generated. rails new Blog Figure 3.4.1 Generating a new Blog 3.5 Start your server To start the Web Server, navigate to the folder of your code and run the follow command below. Figure 3.5.1 shows a Rails server is running. rails s Figure 3.5.1: A Rails server is running Insert the URL in your Web Browser based on what you have seen from the Terminal Window to visit your website. Figure 3.5.2 shows a running Ruby on Rails website. Based on the Figure 3.5.1, localhost:3000 is the path to my website. Figure 3.5.2 A working Ruby on Rails website 3.6 Generate a simple MVC A second command line window is opened to prevent termination of local Web Server. To verify that Ruby and Rails were installed correctly without any errors, use the scaffold command to generate a simple set of a model, views, and controller for Rails Application. rails g scaffold User name:string age:integer A similar output as shown in Figure 3.6.1 will be generated from the command line tool. Figure 3.6.1: Output of terminal window when a scaffold command is used. Run the command rake db:migrate to migrate the database generated by the command scaffold to local database server. A similar output as shown Figure 3.6.2 will be generated from the command line tool. Figure 3.6.2: Output of terminal window when a migrate command is used. Navigate to the index page of newly generated page by entering the path at your browser. The index page of Users will be generated as shown in Figure 3.6.3. localhost:3000/users Figure 3.6.3: Users index page To make sure that the application is working and does not throw any error when new data are committed to the database, press the link New User create a new sample data set. A form will be rendered a shown in Figure 3.6.4. Populate the form with any sample data that you prefer and press Create User. Figure 3.6.4: New user form An alert message, as shown in Figure 3.6.5, User was successfully created alert message will be shown on the screen when the data is inserted into the database successfully. Figure 3.6.5: User was successfully created alert To redirect to the index page of Users, press the Back button located under the Age shown in Figure 3.6.5. By looking at Figure 3.6.6, we can see that the Users index page was being rendered. Figure 3.6.6: Users index page was rendered from output log Figure 3.6.7 shows a picture of Users index page with the data that populated in the form earlier. Figure 3.6.7: Users index page Congratulation, you have successfully installed Ruby on Rails on your own machine! "},"WindowsInstallationV2.4.1.html":{"url":"WindowsInstallationV2.4.1.html","title":"Chapter 4. Windows Installation Guide for Ruby 2.4.x","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Chapter 4. Windows Installation Guide for Ruby 2.4.x The following guide in this chapter was tested on machines running Windows 7 Professional 64-bit Windows 8.1 Professional 64-bit 4.1 Obtaining Required Files If you already have a copy of Ruby and Rails installed on your machine that is not installed based on this tutorial, it is recommended to remove them from your machine and follow the instruction in this tutorial. You may have multiple copies of Ruby version in your machine. You may follow this video tutorial. To begin, determine your Windows Architecture and obtain the URL to the files from correct table below. If you are using Windows machine, it is recommended for you to use Ruby 2.4.1. The next recommended Ruby version for Windows machine is Ruby 2.2.3. Any other Ruby version between 2.2.3 and 2.4.1 tend to have issue with Windows machine. Refer to next chapter if you would like to install Ruby 2.5.1. Table 4.1.1: Required files for 32-bits Operating System File File Name Ruby 2.4.1-2 Installer rubyinstaller-2.4.1-2-x86.exe Node.JS node-v6.11.2-x86.msi Table 4.1.2: Required files for 64-bits Operating System File File Name Ruby 2.4.1-2 Installer rubyinstaller-2.4.1-2-x64.exe Node.JS node-v6.11.2-x64.msi 4.2 Ruby Installation Run the Ruby Installer and the screen as shown in Figure 4.2.1 will should show up. Accept the license agreement and proceed to the next step by pressing the “Next” button. Figure 4.2.1: Ruby 2.4.1 License Agreement Check “Add Ruby executables to your PATH” and complete the installation by pressing the “Install” button as shown in Figure 4.2.2. Figure 4.2.2: Ruby 2.4.1 Installation Destination and Optional Tasks At the end of the screen as shown in Figure 4.2.3, do not uncheck the option that install MSYS2. Press “Finish” to complete the installation and a terminal window shown in Figure 4.3.1 will show up. Figure 4.2.3: MSYS2 installation option 4.3 MSYS2 Installation and Setup After the Ruby installation is completed, a terminal window, as shown in Figure 4.3.1, will pop up. Figure 4.3.1: MSYS2 Installation Window All the components 1, 2, and 3 are required to be installed. To begin, insert 1 into the terminal. Figure 4.3.2 shows the required files are being downloaded. Figure 4.3.2: MSYS2 required files are being downloaded After the installation is completed, a installation window as shown in Figure 4.3.3 will show up. Go through and complete the installation by selecting “Next”. Figure 4.3.3: MSYS2 64bit setup At the end of the installation as shown in Figure 4.3.4, uncheck the option “Run MSYS2 now”. Figure 4.3.4: End of installation of MSYS2 Return to the Terminal Window and enter 2 to run MSYS 2 system update. Figure 4.3.5 shows MSYS2 system update is completed. Figure 4.3.5: MSYS2 system update succeed Return to the Terminal Window and enter 3 to run MSYS2 and MINGW development toolchain. Figure 4.3.6 shows MSYS2 and MINGW development toolchain installation is completed. Figure 4.3.6: MSYS2 and MINGW development toolchain installed successfully. Exit the program by closing the terminal window. 4.4 Node.JS Installation Run the Ruby Installer and the following screen shown in Figure 4.4.1 will show up. Figure 4.4.1: Node.js Setup Wizard Accept the license agreement as shown in Figure 4.4.2 and proceed to the next step by pressing the “Next” button. Figure 4.4.2: Node.js License Agreement Screen Complete the installation by going through each steps. 4.5 Change RubyGems’ Source To avoid receiving SSL error when trying to install Rails or pull updates from RubyGems, open a command line window and enter the following commands below. gem sources -r https://rubygems.org/ gem sources -a http://rubygems.org/ A similar output as shown in Figure 4.5.1 will be generated from the command line tool after you inputted the second command. Figure 4.5.1 shows the second command only. Please run both of the commands. Input the character y to the command line tool to add http://rubygems.org/ to sources. Figure 4.5.1: Output of terminal 4.6 Rails Installation Open a command line window and insert the following command below. The command below will install the latest version of Rails. gem install rails A similar output as shown in Figure 4.6.1 will be generated from the command line tool. Figure 4.6.1: Output of terminal while installing Rails To verify that you have successfully installed both Ruby and Rails, enter the following command. A similar output as shown in Figure 4.6.2 will be generated from the command line tool. Ruby –v Rails -v Figure 4.6.2: Ruby and Rails successfully installed. 4.7 Create a Rails Application To create your website, it is highly recommending to create a folder name Code in the Ruby file directory. The purpose the folder Code is to store all your source code folder. The Ruby folder location may vary depending on your Operating System Architecture. Enter the folder Code and create a sample application name Blog. Enter the following command to command line window a similar output as shown in Figure 4.7.1 below will be generated. Rails new Blog Figure 4.7.1: Generating a new Blog You may or may not receive SSL_connect error, as shown in the screenshot below. Figure 4.7.2: SSL_connect error while creating a Blog It is recommended to not to skip the steps below even if you are not having SSL_connect error. To resolve this error, navigate to the root of your source code and open Gemfile using a text editor. Figure 4.7.3 shows a Gemfile is being opened. Figure 4.7.3: Gemfile (with no extension) is being opened After opening the Gemfile, replace https with http as shown in line 1 of Figure 4.7.4 and save the file. The SSL_connect error should be resolved now. Figure 4.7.3: https is replaced with http as shown in line 1 4.8 Start your server To start the Web Server, navigate to the folder of your code and run the follow command below. A similar output as shown in Figure 4.8.1 will be generated from the command line window. rails s Figure 4.8.1: A Rails server is started. Insert the URL in your Web Browser based on what you have seen from the terminal window to visit your website. According to Figure 4.8.1, localhost:3000 is the path to my website. A similar output as shown below will be generated from the command line tool. Figure 4.8.2: A working Ruby on Rails website 4.9 Generate a simple MVC A second command line window is opened to prevent termination of local Web Server. To verify that Ruby and Rails were installed correctly without any errors, use the scaffold command to generate a simple set of a model, views, and controller for Rails Application. rails g scaffold User name:string age:integer A similar output as shown in Figure 4.9.1 will be generated from the command line tool. Figure 4.9.1: Output of terminal window when a scaffold command is used. Run the command rake db:migrate to migrate the database generated by the command scaffold to local database server. A similar output as shown Figure 4.9.2 will be generated from the command line tool. Figure 4.9.2: Output of terminal window when a migrate command is used. Navigate to the index page of newly generated page by entering the path at your browser. The index page of Users will be generated as shown in Figure 4.9.3. localhost:3000/users Figure 4.9.3: Users index page To make sure that the application is working and does not throw any error when new data are committed to the database, press the link New User create a new sample data set. A form will be rendered a shown in Figure 4.9.4. Populate the form with any sample data that you prefer and press Create User. Figure 4.9.4: New user form An alert message, as shown in Figure 4.9.5, User was successfully created alert message will be shown on the screen when the data is inserted into the database successfully. Figure 4.9.5: User was successfully created alert To redirect to the index page of Users, press the Back button located under the Age shown in Figure 4.9.5. By looking at Figure 4.9.6, we can see that the Users index page was being rendered. Figure 4.9.6: Users index page was being rendered from output log Figure 4.9.7 shows a picture of Users index page with the data that populated in the form earlier. Figure 4.9.7: Users index page was being rendered Congratulation, you have successfully installed Ruby on Rails on your own machine! "},"WindowsInstallationV2.5.1.html":{"url":"WindowsInstallationV2.5.1.html","title":"Chapter 5. Windows Installation Guide for Ruby 2.5.x","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Chapter 5. Windows Installation Guide for Ruby 2.5.x The following guide in this chapter was tested on machines running Windows 7 Professional 64-bit Windows 8.1 Professional 64-bit 5.1 Obtaining Required Files If you already have a copy of Ruby and Rails installed on your machine that is not installed based on this tutorial, it is recommended to remove them from your machine and follow the instruction in this tutorial. You may have multiple copies of Ruby version in your machine. To begin, determine your Windows Architecture and obtain the URL to the files from correct table below. If you are using Windows machine, it is recommended for you to use Ruby 2.2.3, 2.5.1, and 2.5.1 as they are the version that I personally tested. Any other Ruby version between 2.2.3 and 2.5.1 tend to have issue with Windows machine. Table 5.1.1: Required files for 32-bits Operating System File File Name Ruby 2.5.1-1 Installer rubyinstaller-2.5.1-1-x86.exe Node.JS node-v8.11.2-x86.msi Table 5.1.2: Required files for 64-bits Operating System File File Name Ruby 2.5.1-1 Installer rubyinstaller-2.5.1-1-x64.exe Node.JS node-v8.11.2-x64.msi 5.2 Ruby Installation Run the Ruby Installer and the screen as shown in Figure 5.2.1 will should show up. Accept the license agreement and proceed to the next step by pressing the “Next” button. Figure 5.2.1: Ruby 2.5.1 License Agreement Check “Add Ruby executables to your PATH” and complete the installation by pressing the “Install” button as shown in Figure 5.2.2. Figure 5.2.2: Ruby 2.5.1 Installation Destination and Optional Tasks Before the installation begin, as shown in Figure 5.2.3, you will ask if you would like to have MSYS2 install. Make sure the option is checked and press \"Next\" to continue the installation. The installation will then begin. Figure 5.2.3: MSYS2 installation option After the installation is completed, a window shown in Figure 5.2.4 will show up. Make sure that the check box is checked and press finish to complete the installation. Figure 5.2.4: MSYS2 installation option 5.3 MSYS2 Installation and Setup After the Ruby installation is completed, a terminal window, as shown in Figure 5.3.1, will pop up. Figure 5.3.1: MSYS2 Installation Window All the components 1, 2, and 3 are required to be installed. To begin, insert 1, 2, 3 into the terminal. Figure 5.3.2 shows the required files are being downloaded. _Not: Figure 5.3.2 shows only 1 is inserted into the next box. You should insert 1, 2, 3. Figure 5.3.2: MSYS2 required files are being downloaded. The installation may take a while depending on your computer processing speed and internet connection. Figure 5.3.3 shows the installation has been successfully completed. Figure 5.3.3: MSYS2 setup completed 5.4 Node.JS Installation Run the Ruby Installer and the following screen shown in Figure 5.4.1 will show up. Figure 5.4.1: Node.js Setup Wizard Accept the license agreement as shown in Figure 5.5.2 and proceed to the next step by pressing the “Next” button. Figure 5.5.2: Node.js License Agreement Screen Complete the installation by going through each steps. 5.5 Change RubyGems’ Source To avoid receiving SSL error when trying to install Rails or pull updates from RubyGems, open a command line window and enter the following commands below. gem sources -r https://rubygems.org/ gem sources -a http://rubygems.org/ A similar output as shown in Figure 5.5.1 will be generated from the command line tool after you inputted the second command. Figure 5.5.1 shows the second command only. Please run both of the commands. Input the character y to the command line tool to add http://rubygems.org/ to sources. Figure 5.5.1: Output of terminal 5.6 Rails Installation Open a command line window and insert the following command below. The command below will install the latest version of Rails. gem install rails A similar output as shown in Figure 5.6.1 will be generated from the command line tool. Figure 5.6.1: Output of terminal while installing Rails To verify that you have successfully installed both Ruby and Rails, enter the following command. A similar output as shown in Figure 5.6.2 will be generated from the command line tool. Ruby –v Rails -v Figure 5.6.2: Ruby and Rails successfully installed. 5.7 Create a Rails Application The steps are identical compared to Ruby V2.4.1. Please refer to this section. 5.8 Start your server The steps are identical compared to Ruby V2.4.1. Please refer to this section. 5.9 Generate a simple MVC The steps are identical compared to Ruby V2.4.1. Please refer to this section. "},"RailsCrashCourse.html":{"url":"RailsCrashCourse.html","title":"Part II. Ruby On Rails Crash Course","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Part II. Ruby On Rails Crash Course This part is meant to give you the basics of Ruby On Rails with the assumption that you have minimal programming experience. This chapter serves as a reference and a documentation on some of the methods used in this tutorial. A few of the Ruby basics programming method and frequently used Ruby Objects and Methods are discussed in this chapter. 360-Degree Photography, Caples Lake at June 2017 "},"RubyBasics.html":{"url":"RubyBasics.html","title":"Chapter 1. Ruby Basics","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Chapter 1. Ruby Basics This chapter will provide you some basics of Ruby programming language. All the examples shown in this chapter will be written and ran in the form of Ruby IRB (Interactive Ruby Shell) or Ruby script. The result of both method will be similar or identical depending on how you write it. However, almost all the example in this chapter will be written in the form of script. 1.1 Ruby IRB To use Ruby IRB (Interactive Ruby Shell), simply use the command irb in your terminal window. Figure 1.1.1 shows the Interactive Ruby Shell when Hello World is assigned to variable a and the content of variable a is then printed on the IRB. Figure 1.1.1: Ruby IRB 1.2 Create And Run A Script A Ruby script is a file that ends with the extension .rb. Create a file named hello.rb and open the file with your text editor and insert the Hello World code below. Figure 1.2.1 shows the code shown in Table 1.2.1 is inserted into the file created. Table 1.2.1: File to create and code to insert #hello.rb print “hello world\\n” Figure 1.2.1: Hello World code in text editor To run the Ruby script that you have created, use the command ruby YOUR_FILE_NAME.rb. Depending on the location where you save your file, you may have to insert the complete path of the file. Figure 1.2.2: Result of executing hello.rb script in terminal window Figure 1.2.2 shows the Ruby script that I have created is located at C:\\Ruby22-x64\\code\\intro and hello world is printed on the terminal window. 1.3 Print and Comment There are two ways of printing a statement from the script: print and puts. Both of the method will have the same output result. The symbol # is used for single line comment while =begin and =end are used for multiple line comment. Commented code will not be executed as they are for comment purpose. Table 1.3.1: Two different printing method #print.rb #single line comment =begin multiple line comment multiple line comment =end print “hello world” puts “hello world” Figure 1.3.1: Result of executing print.rb script in terminal window Figure 1.3.1 shows the output where the code from Table 1.3.1 is executed. Both of the method shows the same result and code in comment will not be printed. 1.4 Variable Scope and Checking In Ruby, there are has five types of variable scope: local, global, instance, class, and constant type. Table 1.4.1 shows each of the Ruby variable scope and how they are declared. Each variable is began by declaring using using the special character shown in the table. Table 1.4.1: Ruby variable scope Name Begins With Variable Scope $ A global variable @ An instance variable [a-z] or _ A local variable [A-Z] A constant @@ A class variable Local variable and instance variable are widely used in Ruby on Rails programming. To check the scope of a Ruby variable, we can use the defined? method. Table 1.4.2 shows a simple script that is written to check the variable scope. Table 1.4.2: Two different printing method #variable.rb hello = “bla?” puts defined? hello Figure 1.4.1 shows the output where the code from Table 1.4.2 is executed. The type of the variable scope is defined and shown on the terminal window. Figure 1.4.1: Result of executing variable.rb script in terminal window 1.5 While Loop While loop in Ruby is straightforward. Table 1.5.1 shows a sample while loop statement and Figure 1.5.1 shows the result when the script is executed. Table 1.5.1: While Loop #while.rb a = 0 while (a Figure 1.5.1: Result of executing while.rb script in terminal window 1.6 Array and Loop Table 1.6.1 shows an sample array and loop statement and Figure 1.6.1 shows the result when the script is executed. Table 1.6.1: Array and Loop array_loop.rb a = [100,\"hello world\",-9.9, 3.142] a.each do |b| print \"#{b}\\n\" end Figure 1.6.1: Result of the while.rb script on terminal window 1.7 Fixnum Loop There are two methods we can use for Fixnum Loop: upto and downto. It will print ascendingly or descendingly within the range you assigned and based on method you use. Table 1.7.1 shows a sample fixnum loop and Figure 1.7.1 shows the result when the script is executed. Table 1.7.1: Fixnum Loop #fixnum.rb 8.upto(11) {|a| print \"#{a}\\t\"} puts \"\\n\" 5.downto(2) {print \"Hello World\\t\"} Figure 1.7.1: Result of executing fixnum.rb script on terminal window 1.8 For Loop For Loop and Fixnum Loop are very similar. Generally, Ruby’s For Loop syntax is similar to other programming language. Table 1.8.1 shows a sample For Loop and Figure 1.8.1 shows the result when the script is executed. Table 1.8.1: For Loop for.rb for a in [99, 100, 101, -102, \"sandwich\"] puts \"#{a}\" end puts \"\\n\" for b in (1000..1004) print \"#{b}\\t\" end Figure 1.8.1: Result of executing for.rb script in terminal window 1.9 Recursive Ruby’s recursive syntax is similar to other programming language. Table 1.9.1 shows a sample Recursive program and Figure 1.9.1 shows the result when the script is executed. Table 1.8.1: For Loop recursive.rb def decrease(n) return if n.zero? puts n decrease(n-1) end decrease(3) Figure 1.9.1: Result of executing recursive.rb script in terminal window 1.10 If, Else, Else If Statement Ruby’s syntax for If Else Elsif are different compared to other programming language. Do not that the Else If statement is spelled as Elsif. Table 1.10.1 shows a sample If, Else, Else If program and Figure 1.10.1 shows the result when the script is executed. Table 1.10.1: If, Else, Else If Statement #if_else.rb a = 3 if a == 1 puts \"Meow\" elsif a == 2 puts \"Woof\" elsif a == 3 puts \"Moo\" else puts \"Haha\" end Figure 1.10.1: Result of executing if_else.rb script in terminal window "},"RubyObjectsAndMethods.html":{"url":"RubyObjectsAndMethods.html","title":"Chapter 2. Ruby Objects and Methods","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Chapter 2. Ruby Objects and Methods Ruby is an object-oriented language. Everything (yes, everything) in Ruby is an Object. This means all other classes including Array, Fixnum and String are inheriting all methods from Object unless they are overridden in their own definition. In this chapter, we are going to see how are the predefined methods help us in our programming. 2.1 .first and .last Methods Instead of accessing an array by remembering the position, we can use .first to access the first element and .last to access the last element of the array. Figure 2.1.1 shows the result of the value in third, first and last position of the array being printed. Figure 2.1.1: Printing value in third, first, and last position the array a using IRB. 2.2 .include? Method We usually use a loop to check whether a value is in the array. In Ruby, we can use .include? to check if the value that we want to find is in the array. Figure 2.2.1 shows the result of the checking two different values. Figure 2.2.1: Result of checking two values in the array using IRB. 2.3 .inspect Method In my opinion, .inspect is the most useful method for Ruby on Rails developer. Most of the time, we may face an issue where we do not know what and how the return parameter will return. We may get an array that contains multiple array. At this point, we can use .inspect method to inspect what is in the array. Figure 2.3.1 shows a sample array that contains multiple arrays within an array. By using the .inspect method, we can print everything in the array and inspect by ourselves. Figure 2.3.1: A sample array that contains multiple arrays within an array. 2.4 .to_str Method .to_str method is a method that will convert any object to string. It is commonly use when you are trying to merge an integer to string. Figure 2.4.1 shows a sample program that merge two integers to a string. In Ruby, plus sign, +, can be used to add two numbers or combine two string. Figure 2.4.1: Sample program of .to_str method in IRB. 2.5 .pluck Method .pluck is a method that grab the attributes in the database we want. The return values will be string by default. Table 2.5.1 shows a database table for users. Table 2.5.1: Sample Database Table id firstname lastname age gender 1 Andrew Hui 22 m 2 Christine Lee 31 f 3 Matthew Nguyen 22 m To get a list of firstname from users table, we can use the command below. User.pluck(:firstname) The result of the operation above will be [‘Andrew’, ‘Christine’, Matthew’]. We can use SQL DISTINCT in the method. Assume that we are trying to get distinct ages of all users, we can use the command below. User.pluck(‘DISTINCT age’) The result of the operation above will be [‘22’, ‘31’]. We can always select more than one columns. If we are trying to get the firstname and lastname attributes, we can use the command below. User.pluck(:lastname, :firstname) The result of the operation above is shown below. Do note that the arrange of each attribute matter. [[‘Hui’, ‘Andrew’], [‘Lee’ ,‘Christine’], [‘Nguyen’, Matthew’]] 2.6 .gsub! Method .gsub is a method that is able to substitute a word in a string. The operation is illustrated in Figure 2.6.1. Figure 2.6.1: Sample program of .gsub! method in IRB. 2.7 .all Method .all is a method that grab all attributes in the database. The return values will be string by default. Table 2.7.1 shows a database table for users. Table 2.5.1: Sample Database Table id firstname lastname age gender 1 Andrew Hui 22 m 2 Christine Lee 31 f 3 Matthew Nguyen 22 m The code below is retrieving every single available row and attributes from the users database table. Do note that the name of the model is in capital letter. User.all The result of the operation above is at shown below. The order of attributes are based on the arrange of the attribute in the database. [[‘1’, ‘Andrew’, ‘Hui’, ‘22’, ‘m’], [‘2’, ‘Christine’, ‘Lee’ , ‘31’, ‘f’], [‘3’, Matthew’, ‘Nguyen’, 22, ‘m’]]. The equivalent of the code in SQL is as below. SELECT * FROM Users 2.8 .joins Method .joins is a method that joins database based on the reference key or foreign key. Before a joins operation is able to carry out, you have to make sure that you have all the relationship of the model setup correctly. Table 2.8.1 shows a database table for users. Table 2.8.1: Sample users Database Table id firstname lastname age gender 1 Andrew Hui 22 m 2 Christine Lee 31 f 3 Matthew Nguyen 22 m Table 2.8.2 shows a database table for comments database table that contains a foreign key, user_id. Table 2.8.2: Sample comments Database Table id title body user_id 1 Great! sample body 1 1 2 Love it! sample body 2 1 3 Never get it sample body 3 2 To join comments and users table, we use the command below. Do note that comments table contains a user’s foreign key, user_id. Comment.joins(:user) The code below is retrieving every single rows with all attributes from the comments database table and join it with users table that matches the integer value in user_id attribute. The result of the operation above is at shown below. The order of attributes are based on the arrange of the attribute in the database. [[‘Great!’, ‘sample body 1’, ‘1’, ‘1’, ‘Andrew’, ‘Hui’, ‘22’, ‘m’], [‘Love it!’, ‘sample body 2’, ‘1’, ‘2’, ‘Christine’, ‘Lee’ , ‘31’, ‘f’], [‘Great!’, ‘sample body 3’, ‘2’, ‘Christine’, ‘Lee’ , ‘31’, ‘f’]] The equivalent of the code in SQL is as below. There is no difference between using uppercase or lowercase for the first letter in the table’s name (Comments vs comments). However, you have to use the exact table name (singular vs plural). SELECT * FROM Comments, Users WHERE Comments.user_id = Users.id 2.9 .min Method .min is a method that will return the minimum value in an array. The operation is illustrated in Figure 2.9.1. Figure 2.9.1: Sample program of .min method in IRB. 2.10 .max Method .max is a method that will return the maximum value in an array. The operation is illustrated in Figure 2.10.1. Figure 2.10.1: Sample program of .max method in IRB. 2.11 .minmax Method .minmax is a method that will return the minimum and maximum value from an array in the form of array. The operation is illustrated in Figure 2.11.1. Figure 2.11.1: Sample program of .minmax method in IRB. 2.12 .min_by Method .min_by is a method that will return the minimum value in a hash specified by the condition. Assuming that we have a hash, friends, with two parameters: name and age, the code is shown as below. friends = {'kitty' => 12, 'lily' => 31, 'moh' => 23} We would like to find who is the youngest. In this case, we can use the method .min_by. To find the person who is the youngest in the hash, we use the command below. friends.min_by { |name, age| age } The operation is illustrated in Figure 2.12.1. Figure 2.12.1: Sample program of .min_by method in IRB. 2.13 .max_by Method .max_by is a method that will return the maximum value in a hash specified by the condition. Assuming that we have a hash, friends, with two parameters: name and age, the code is shown as below. friends = {'kitty' => 12, 'lily' => 31, 'moh' => 23}` We would like to find who is the youngest. In this case, we can use the method .max_by. To find the person who is the youngest in the hash, we use the command below. friends.max_by { |name, age| age } The operation is illustrated in Figure 2.13.1. Figure 2.13.1: Sample program of .max_by method in IRB. 2.14 .minmax_by Method .max_by is a method that will return the minimum and maximum value in a hash specified by the condition. Assuming that we have a hash, friends, with two parameters: name and age, the code is shown as below. friends = {'kitty' => 12, 'lily' => 31, 'moh' => 23} We would like to find who is the youngest. In this case, we can use the method .minmax_by. To find the person who is the youngest in the hash, we use the command below. friends.minmax_by { |name, age| age } The operation is illustrated in Figure 2.14.1. Figure 2.14.1: Sample program of .minmax_by method in IRB. "},"FirstRailsApplication.html":{"url":"FirstRailsApplication.html","title":"Part III. First Rails Application","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Part III. First Rails Application This part of the tutorial will go through the basic operation of creating a Ruby on Rails Web Application as well as version control, collaboration, and deploy your Web Application to a server. It is best to deploy your initial Web Application to a hosting server. This will ensure that you will spend less time on debugging when you come across an error. Github, a version control and collaboration tool, will be discussed. Step by step operation of deploying your Web Application to Heroku PaaS (platform as a service) will be discussed at the end of this part. Heroku PaaS is chosen due to it has low difficulty. A 10 Setup Challenge Video is made and can be found in Chapter 5 to show how quickly you can create and deploy your website to Heroku PaaS. iBook Clamshell Indigo in mint condition, purchased on June 2017 "},"BeforeWeBegin.html":{"url":"BeforeWeBegin.html","title":"Chapter 1. Before We Begin","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Chapter 1. Before We Begin This chapter will explain some of the basics of Ruby on Rails and concept before generating our first Web Application. 1.1 Terminal By default, all the terminal window that you open should have your application at your root directory. Figure 1.1.1 shows the root directory of my Web Application in Windows OS while Figure 1.1.2 shows the root directory of my Web Application in Ubuntu Linux. Figure 1.1.1: Root directory of my Web Application in Windows OS. Figure 1.1.2: Root directory of my Web Application in Ubuntu Linux OS. All the examples in the terminal will be shown on Windows OS. If you are using Ubuntu Linux, I assume you know how to navigate in terminal window. If you are not in the root directory of your Web Application, follow the instruction below to get to the root directory of your Web Application. Figure 1.1.1 shows the root of my Web Application is located at C:\\Ruby22-x64\\code\\MyApp. However, in Figure 1.1.3, I am currently at Ruby22-x64 directory, a few level above. Figure 1.1.3: Ruby22-x64 directory, a few level above Assume that you have no clue what is in the directory, use the command ls to list all the files and folder in the directory for Ubuntu Linux user or dir /p for WIndows user. Figure 1.1.4 shows the command dir /p being used in a Windows machine. Figure 1.1.4: dir /p command in Terminal Window. To go into a folder, use the command cd YOUR_FOLDER_NAME. Figure 1.1.5 shows the operation of going into a folder named code. Figure 1.1.5: cd command in Terminal Window. Use the command cd .. if you would like to go back to the previous level. Figure 1.1.6 shows the operation of going into a folder a level above and the folder is named Ruby22-x64. Figure 1.1.6: cd .. command in Terminal Window. Do take note that we always run all Ruby commands, including scaffold, rails server, database migration command, at the root directory of your Web Application. If you dislike the Command Line Interface (CLI), you can always choose to open a terminal windows that has your application as the root directory. Go to the application folder of your application and hold Shift + Right Click at the blank area. You will see the option Open command window here. Click it and you will see a terminal window that has the root directory of your Web Application. Figure 1.1.7 shows the operation. Figure 1.1.7: Open a Terminal Window in Windows using Shift + Right Click. Now, a terminal window, as shown in Figure 1.1.8, is opened and has the root directory of your Web Application. Figure 1.1.8: Terminal Window with Root Directory of my Web Application 1.2 Model, View, Controller Model, View, Controller (MVC) is a design pattern and was developed in 1979 by Trygve Reenskaug (Smalltalk). It split an application into three distinct parts, Model, View, and Controller. Model Contains data for the application and usually linked to a database. No knowledge of user interfaces. View Generates the user interface. Does not do any processing. Views work is completed once the data is displayed to the user. Views can access the same model for at the same time. Controller Receive events from the view. Interact with the model. Fetch and display the appropriate view to the user. Figure 1.3.1 shows the interaction between Model, View, and Controller. A user interacts with the controller via buttons and input text fields in the view. The command that user inputs may notify the controller to modify the view or read and modify the model. A user will never interact with the model directly. Figure 1.3.1: MVC Diagram 1.3 Text Editor If you are still using a Notepad (or Notepad++) to code, you should switch to a more advanced code editor. The common code editor that programmers use is Sublime Text. However, I prefer Visual Studio Code because it has a lot of extensions and completely open source. Of course, both Sublime Text and Visual Studio Code are completely free. Do not that Visual Studio Code is not the same as Visual Studio. Visual Studio Code is a text Editor while Visual Studio is an IDE. Visual Studio Code, as shown in Figure 1.3.1, has some wonderful feature such as able to search text within the project you can push your code directly to Github by using the combination key of Ctrl + Enter built in Command Prompt; Easily open or close with Ctrl + ` able to start a Rails server and debug (extension required) Figure 1.3.1: Interface of Visual Studio Code 1.4 Relational Database Basics Before we begin the actual part of Database, we should first learn the “grammar” for Database. Figure 1.4.1 shows two standalone in Entity Relationship (also known as ER) Diagrams, one on the left and one on the right. Each of the ER diagrams contains two Entities and each entity contains three attributes. The ER Diagram on the right shows that Customer entity contains three attributes: address, name, and email. Item entity contains three attributes: price, name, and description. The Primary Key of Customer entity is Email (underlined = Primary Key, also known as PK). The Primary Key of Item entity is Name (underlined = Primary Key, also known as PK). Each customer orders zero to many Items (zero-to-many relationship). Each of the items belong to one Customer (one-to-one relationship). Figure 1.4.1: Sample ER Diagram If you think the information above is too much for you, you can choose to skip to the next section. However, if you would like to learn more about ER Diagram, please read more at tutorialspoint. Figure 1.4.1 shows a very basic ER Diagram. In order to design an efficient website, part of it is based on a database that enables to store, retrieve and analyze data efficiently. Nevertheless, the first step of designing a good Database is to draw ER Diagram correctly. After an ER Diagram is created, map it into Relational Schema. Figure 1.4.2 shows a Relational Schema of the database on the right above. If you would like to learn more about how to map the ER Diagram into Relational schema, head to this website. The Relational Schema in Figure 1.4.2 shows that There are two tables: Item and Customer The primary key of Item table is Name (underlined = Primary Key, also known as PK) The primary key of Customer table is Name (underlined = Primary Key, also known as PK) The foreign key of the Item table is Email (FK = Foreign Key) Figure 1.4.2: Sample Relational Schema Once a Relational Schema is generated, we can start to build our Database. To make everything simple, we can always choose choose to use Rail’s scaffolding command to create a database for your website. However, you are advised to create an ER Diagram and Relational Schema so you can normalize them. The recommended normalization form is always 3NF (read about normalization to get more information). You should never go beyond 3NF. However, there is always an exception. You may have 2NF database that have better performance compared to a database that derived to 3NF. 1.5 Database Manager Basics A database manager is a tool that we use to allow us to see the data in our database. The database manager is based on the database management system that you are using. In Ruby on Rails, by default, the application will use SQLite as the default database system. However, when the application is pushed to cloud, PostgreSQL will be used as the database system. SQLiteStudio, as shown in Figure 1.5.1 is database manager that SQLite use. It is a great tool to investigate our data when we are developing locally in our machine. Figure 1.5.1 shows the name of parts shown in a database manager. Figure 1.5.1: SQLiteStudio Database Manager To view the database table in SQLiteStudio, we have to add our database file to the Database Manager. Figure 1.5.2 shows the steps to add the file. Figure 1.5.2: Add your database to SQLiteStudio After successfully adding your database to SQLiteStudio, follow the operation shown in Figure 1.5.3 to navigate to the Posts table that we have in database. Figure 1.5.3: Database table in SQLiteStudio From Figure 1.5.3, we can see that there are 5 attributes in the Posts table. They are id, title, contents, created_at, and updated_at. The table is empty as we have not created or inserted any new values yet. 1.6 Ruby Gems A Ruby Gem is a package manager for Ruby programming language that has a standard format for distributing Ruby program and libraries. The good thing about Ruby on Rails is you don’t really have to code a feature from zero. There is always a case that someone has already packaged the feature into a Gem that you can download and use it easily. To find a gem, go to https://rubygems.org/: a search engine for Ruby Gems. Enter something that you would like the search engine to find. Figure 1.6.1 shows that Bootstrap (Bootstrap is the most popular HTML, CSS, and JS framework for developing responsive, mobile first projects on the web) Gem is inserted into the search engine. Figure 1.6.1: Search engine for Ruby Gems. Figure 1.6.2 shows the result of the search is shown in the screenshot below. There are several Bootstrap Gem and the ideal selection is to go with the one that has the most download. However, It does not mean that it will fit your need. In order to know whether it fits our need, we have to go into the page and read the document in detail. Figure 1.6.2: Search result Figure 1.6.3 shows the information about bootstrap-sass Gem, the most downloads Gem from the search result shown in Figure 1.6.2. In the page, we will find quite a lot of information regarding the Gem. On the bottom right of Figure 1.6.3, visit Source Code and Documentation to find out more about the Gem. Do note that some of the Gems will not be compatible with the Ruby or Rails version that you use. Figure 1.6.3: Bootstrap-sass Gem information Figure 1.6.4 shows the page that we will redirect to after we visit Source Code’s link. Figure 1.6.4: Bootstrap-sass’s Github page Figure 1.6.5 shows the readme file in the Github page. A readme file is where you should always read as it is a documentation that will providing you information on how to integrate the Gem to your program. Read and follow the instruction to install the Gem. Figure 1.6.5: Bootstrap-sass readme in Github. "},"CreateARailsApplication.html":{"url":"CreateARailsApplication.html","title":"Chapter 2. Create a Rails Application","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Chapter 2. Create a Rails Application In this Chapter, we are going to create a sample Ruby on Rails application. By default, SQLite3 will be serve as the database engine when you generate a website. However, PostgreSQL will be serve as the database engine when you deploy it to Heroku PaaS. 2.1 Ruby on Rails MVC Ruby on Rails uses Model, View, Controller (MVC) architecture. Refer to Chapter 1.2 to for MVC explanation. Model, usually located at the directory MyApp/models/, is where you should declare the associations and SQL Query for a specific purpose. Rails support six types of associations: “belongs_to”, “has_one”, “has_many”, “has_many :through”, “has_one :through”, and “has_and_belongs_to_many”. In Chapter 2.2, Scaffolding with references, we will see an example that uses “belongs_to” association. The naming conventions for the model is based on the name of your View and Controller. For example, if you have a View folder named Comments and controller named Comments, your model’s file name should be comment.rb. Note: comment.rb is singular. View, usually located at the directory MyApp/views/, is where you style your page. It is the front end where it display messages to user. Your header and footer file should belongs to here. All files should end with the extension .html.erb or if you are familiar with HAML, you can replace the extension with .haml. Your CSS stylesheet should be located at MyApp/assets/stylesheets/ and the naming conventions for the stylesheet will be based on your View. For example, if you have a View folder named Comments, your stylesheet should named comments.scss. For Javascripts, it should be located at MyApp/assets/javascript/. Note: You should also rename your application.css file to application.scss. Controller, usually located at the directory MyApp/controllers/, the place where all the “things” are happening. This is the place where you should declare all your operations. The naming conventions for the controller will based on the name of your View. For example, if you have a View folder named Comments, your controller for Comments should be comments_controller.rb. By the time you are done with this part, ActiveRecord Associations, you should be able to identify the Model, View, and Controller components correctly. 2.2 Rails Scaffolding Scaffold command generates major pieces of an application. A model, view, and controller will be generated in just one line of code. To do this, enter the code below in your terminal window. Do note that Post is the name of the MVC and the first character should begin with a capital letter. rails generate scaffold Post title:string content:text The scaffold command will generate a few folders and files in your application as discussed in Chapter 2.1. This includes a Post model, Posts controller, Post view to list, create, edit, and delete post(s). Figure 2.2.1 below shows the operation and files created. Figure 2.2.1: Files created when a scaffold command is used If you have done a mistake and would like to undo the operation, replace the word generate with destroy in the command you have ran and run it again. All the files that was just created will be removed. Figure 2.2.2 shows the operation and the output of files being removed. rails destroy scaffold Post title:string content:text Figure 2.2.2: Removed a scaffold using destroy command 2.3 Database Migration For each model that are created, modified, and deleted, a migration operation has to be done in order for the Web Application to rebuild the database. To this, run the command below. Figure 2.3.1 shows the terminal window that show a database is migrated. rake db:migrate However, to destroy a database, you may have to manually delete the file development.sqlite3 file in db folder. Whenever you receive an error stating that the table is already exists, the quickest way resolving this error is to delete the file development.sqlite3 in db folder and run a migration again. Figure 2.3.1: A database table is migrated 2.4 Start a Web Server Run the command rails server or rails s at the root directory of your Web Application. Be sure that you are at the root directory of your directory of your Web Application. Figure 2.4.1: A Rails server is started Based on Figure 2.4.1, we see that there are two links on terminal output. Both of the addresses may be different. The default address for your Web Server should be localhost:3000. However, you may get a different address depending on your operating system and configuration. Try the other address if localhost:3000 is not working for you. At some point, you may get an error saying that A server is already running. Check /PATH/server.pid. To fix this, go to the folder mentioned and remove at the server.pid. I do not have the screenshot of that as it is really rare to encounter that issue, but at some point, it will happen. 2.5 Insert, Edit, Delete Operation Navigate to localhost:3000/posts to view the index page of Posts. Figure 2.5.1 shows the index page of Posts. The index of the page is the based on the name you used on the scaffold command earlier. Do note that the path is plural, Posts. If you are unable to access the page, you may have a different path. Refer to Chapter 2.4 to learn more about the path. Figure 2.5.1: Index page of Posts Create a few posts and we can see our Post that we created in SQLiteStudio. Refer to section 1.5 to learn how to add your database table to SQLiteStudio. Refresh window by pressing the blue refresh icon, . The data that you have entered will show up in the database. The data shown in the database should match the data shown in the index of Posts. Figure 2.5.2 shows the result of the operation. The logs of the Web Server show the detail operation of inserting and committing a transaction successfully. Figure 2.5.2: Data in SQLiteStudio matches the information shown in Posts index 2.6 Populating Database with seeds.rb The file in db/seeds.rb allows developer to feed default values easily and quickly to an application. In the seeds file, you have full access to all the classes and methods you defined within your application. Assume that you have a Post model. In the model, there is only one fields: title and text. To populate the database with data, we can use create command. If you have a model with reference key, do make sure that the content exists in the table that the reference key is pointing to. #MyApp/app/db/seeds.rb Post.create(title: 'Hello World 1', content: 'Test 1') Post.create(title: 'Hello World 2', content: 'Test 2') Post.create(title: 'Hello World 3', content: 'Test 3') Post.create(title: 'Hello World 4', content: 'Test 4') Figure 2.6.1 shows the content of the seeds.rb with the sample that shown in the table above. Figure 2.6.1: Content in seeds.rb To feed the file to the database, run the command below. Do note that rake db:seed will not output in the terminal unless there is an error in the seed.rb. Figure 2.6.2 shows the data is fetched to the database successfully without any issue. Figure 2.6.2. rake db:seed command ran successfully without output any log. To verify the result, we can view the data in the Posts table in SQLiteStudio database manager. Figure 2.6.3 shows Posts table is populated and matched with the data in seeds.rb as shown in Figure 2.6.1. Figure 2.6.3. Posts table with populated data from seeds.rb If you are unable to achieve the step above, remove your database table and run the migration. After the migration is successfully, fetch the data using the command rake db:seed. 2.7 More rake db Command This table is compiled by Jaco Pretorites. He combined the information shown in Table 2.7.1 from StackOverflow and Rails source code. In his website, he explains all different Rails db Rake Tasks and what each task they do. Personally, I have not tried all the commands and do not guarantee it will work. In order for the commands below to work, you have to add rake to each of the command. For example, for the first command in the table, we have to use rake db:create. Table 2.7.1: All Rails db Rake Tasks and What They Do Command Description db:create Creates the database for the current RAILS_ENV environment. If RAILS_ENV is not specified it defaults to the development and test databases. db:create:all Creates the database for all environments. db:drop Drops the database for the current RAILS_ENV environment. If RAILS_ENV is not specified it defaults to the development and test databases. db:drop:all Drops the database for all environments. db:migrate Runs migrations for the current environment that have not run yet. By default it will run migrations only in the development environment. db:migrate:redo Runs db:migrate:down and db:migrate:up or db:migrate:rollback and db:migrate:migrate depending on the specified migration. I usually run this after creating and running a new migration to ensure the migration is reversible. db:migrate:up Runs the up for the given migration VERSION. db:migrate:down Runs the down for the given migration VERSION. db:migrate:status Displays the current migration status. db:migrate:rollback Rolls back the last migration. db:version Prints the current schema version. db:forward Pushes the schema to the next version. db:seed Runs the db/seeds.rb file. db:schema:load Loads the schema into the current environment’s database. db:schema:dump Dumps the current environment’s schema to db/schema.rb. db:setup Runs db:schema:load and db:seed. db:reset db:drop and db:setup. db:migrate:reset Runs db:drop, db:create and db:migrate. db:test:prepare Check for pending migrations and load the test schema. (If you run rake without any arguments it will do this by default.) db:test:clone Recreate the test database from the current environment’s database schema. db:test:clone_structure Similar to db:test:clone, but it will ensure that your test database has the same structure, including charsets and collations, as your current environment’s database. 2.8 Scaffolding With References Assume that you have created Post with scaffold command. Now, you want to add comment feature to each of the post. To achieve that, we can scaffold with references. To do that, enter the command below and migrate the database after all the files are created successfully. If you wished to create just the controller or model, you can replace the scaffold command with controller and model. rails generate scaffold Comment comment:text post:references Based on the command above, we are creating Comment with two arguments, comment and post. comment is a text and post is a reference to post model. Now, each of the comment that you create will belong to each of the post. In Figure 2.8.1, by viewing your Comment entity in the SQLiteStudio, you will notice that an attribute, post_id, is created automatically. post_id will store the ID of the post that each comment reference to. Figure 2.8.1: Comments table in SQLiteStudio Database Manager. Navigate to localhost:3000/comments to view the index page of Comments and populate some data by creating new comments. Figure 2.8.2 shows a sample input of a new comment. Post field will accepts integer only and the integer must exist within the ID column in Post table. If you entered the value 1 in the Post field, the new comment that you create will associate itself to the specific post with the ID you enter in the Post table. Figure 2.8.2: Creating new comment with reference ID Figure 2.8.3 shows the Comments table and Index page. It is usual that Post column in the index page is showing some garbage value since the view does not reference to the correct parameter in the table. To fix this, refer to Chapter 2.10. Figure 2.8.3: The result of the operation When a scaffold command with reference is used, associations are added automatically to the models. In Comment.rb, we see that belongs_to :post association is added by default. This simply means that post_id is referencing to Posts table. Figure 2.8.4 shows the Relation Schema of the Database Figure 2.8.4: Relation Schema of the Database table Posts and Comments If you the Model is created manually, you have to add the associate by yourself. You have to setup the associate in order for the Web Application to behave correctly during Insert, Update, and Delete operations. You can not simply add an associate without understand what it is doing. It will give you a lot of trouble if you do so. 2.9 Create a New Page A page can be created under any controller. However, the page method in the controller has the match the filename of your view. To create a new page in Post controller, navigate to the directory below and add the code in Table 2.9.1 to controller. Figure 2.9.1 shows the result after the code is added. Table 2.9.1: Code to add to controller #MyApp/controllers/posts_controller.rb def more end Figure 2.9.1: Result of the code added Create a View file with filename and path listed below as shown in Table 2.7.2. Add Hello World! to the file that you create. Figure 2.9.2 shows the result of the operation in Table 2.9.2. Table 2.9.2: Create a view file and insert Hello World! #MyApp/views/posts/more.html.erb Hello World! Figure 2.9.2: Result of the operation shows in Table 2.9.2 The last step would define and tell your web server where to find and retrieve the file. Add the following code to the file shown in Table 2.9.3. Figure 2.9.3 screenshot with the operations carried out is shown below. more_info is the route that you will need to enter in your web browser to view the content of the page while posts is the folder in the directory MyApp/views and more is the of the file where you want your Web Server to fetch. Table 2.9.3: Setting up the routes.rb #MyApp/config/routes.rb get 'more_info', to: 'posts#more' Figure 2.9.3: The code, as shown in line 6, is added to routes.rb To view the page that you have created, insert the address below in your Web Browser. Figure 2.9.3 shows the Hello World! is rendered. localhost:3000/more_info Figure 2.9.4: Hello World! is shown in the page If you are unable to access this page, check your route and local address to your Web Application. 2.10 Retrieve Objects using ActiveRecord from Multiple Table The advantage of using ActiveRecord is you can easily retrieve information from the other table that contain reference key to the specific table. Usually, we have to write SQL (Structured Query Language) query to achieve the same operation. To see the magic, let’s begin by modifying the controller as shown in Table 2.10.1. The result of the modification is shown in Figure 2.10.1. Table 2.10.1: Code to add to controller #MyApp/controller/posts_controller.rb #Add under def more @comments = Comment.all Do note that Comment is a case sensitive variable. This will reference to the Comment model while .all means it will get field from the Comment model. The equivalent of Comment.all in SQL is shown as below. SELECT * FROM Comments @comments in the controller is an instance variable and is available to all methods within the class and available to View. If you removed the ampersand, @, the variable is only available within the class. Figure 2.10.1: Result of the controller Add the code as shown in Table 2.10.2 to the file specified below. Figure 2.10.2 shows the result of the code added to the file. Table 2.10.2: Code to add to View #MyApp/view/posts/posts/more.html.erb More Information Post ID Title Content Comment ID Comment Figure 2.10.3: Result of the code added to View In the view, as shown in Figure 2.10.3, we use .each to print each of the content in the @comments instance variable. In Figure 2.10.3, line 24, comment.post.content, is retrieving content field in Post model. This is because there is a post_id field in our Comment table. The post_id will go to Post table and retreive the row and fetch the content field. In line 31, edit_post_path(comment.post), the concept is similar. To view the page that you just created, insert the address below in your Web Browser. The result is shown in Figure 2.10.4. localhost:3000/more_info Figure 2.10.4: Result of the operation shown in Web Browser By looking at the result as shown in Figure 2.10.4, we can see that we managed to reference the Post model from Comment model easily by referencing. From the result, we can see that there are two posts, Hello World and Hello 2. There are three comments First, Second, and Fourth that belongs to Hello World and there is only one comment Third that belongs to Hello 2. If everything is done correctly, you should be able to use the perform each operation successfully as shown in the description of the link: Show Comment, Edit Comment, Destroy Comment, Show Post, Edit Post, and Destroy Post. "},"VersionControlGithub.html":{"url":"VersionControlGithub.html","title":"Chapter 3. Version Control: Github","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Chapter 3. Version Control: Github Now, we can see that it is getting harder and harder to keep track of what we have created, modified, and deleted. To solve this, we are going to use Git. Git is one of the Version Control system that allows you to keep track of your code changes. 3.1 Git Git is a version control system that keep track of the changes in your computer files and you may work together with multiple people. Although it is designed for software development, you can still use it to keep track of your files changes. There are two ways of achieving the same goal: GUI (Graphic User Interface) and CLI (Command Line Interface). For beginner, my recommendation for you is to choose GUI method as it is easier to illustrate. Depending on the difficulty of performing certain tasks, it is easier to work on both GUI and CLI. Both GUI and CLI methods will be discussed. Bitbucket and Github are two of the online project hosting that use Git. In this Chapter, Github will be discussed. You may choose to use other services, but Heroku (a platform that we can host our Web Application) has a good integration with Github. 3.2 Github Desktop To begin, head to Github and sign up for an account. Download the Github Desktop and install it to your machine. Use the default setting provided in the installer. The Github desktop Desktop application will install CLI tool on your machine. Unfortunately, the Github Desktop is only available for Mac and Windows platform. Linux users have to use the CLI. Linux users may have to use GitKraken as an alternative tool if you choose to use GUI interface. I have never used GitKraken before and you may have to look for alternative source to get started. Please stick with Github Desktop if you are using Windows and Macintosh machine. Launch the Github Desktop and login to your account that you have just created. Figure 3.2.1 shows Github Desktop user interface. This is the latest Github Desktop application as of August 2017 and you may find an older version of Github Desktop user interface in this tutorial. Figure 3.2.1: Github Desktop Application 3.3 Create a New Repository A new repository can be created from Github Desktop or from Github Website. It cannot be created in CLI. If you are planning to use CLI to create your first commit, you have to create a new repository from Github Website and obtain a HTTPS link to add to the CLI. Figure 3.3.1 shows the operation of creating a new Github repository in Github Desktop. Add your project by going to “File” > “New Repository”. Then, and press the “browse” button and select your root directory of your application. Press “OK” when you are selecting your root directory. Insert a name for your application and press “create” to create a new repository. Now, you will see that your project is added to “Current repository” tab. Figure 3.3.1: Adding a project to Github Desktop Figure 3.3.2 shows a project is added to Github desktop successfully. The project is listed under “Current repository” tab. Figure 3.3.2: Project added to Github Desktop Insert a short message in the “Summary” field and select “Commit to master”. Select “Publish” tab to publish your application. If you a Premium account in Github, you will have an option to make the repository private. Otherwise, your repository will be public and everyone has access to your work. Figure 3.3.3: Publishing project to Github All the operations in this section can be performed using command line interface (CLI). However, you must still create a repository on Github website before you are able to perform your first commit. When you are using CLI, do make sure that you are at the root directory of your application before performing any of the commands listed from the website. The typical operation using a CLI tool for adding a new project to Github is as below. Operations below are illustrated in Figure 3.3.4. Create a Github repository from Github.com At the root directory of your application, use the command git init to initialize. [OPTIONAL] Use the command git status to check the current status of the directory. To add all the files to commit, use the command git add . (include a dot). Commit to your repository by using the command git commit -m \"First commit\" From your repository, obtain your HTTP git link by pressing \"clone or download\". Switch to \"Use HTTPS\" to obtain a link that look like this: https://github.com/YOUR-USERNAME/YOUR-REPOSITORY.git. Add the link to your local repository by using the command git remote add origin https://github.com/YOUR-USERNAME/YOUR-REPOSITORY.git. Now, commit to master branch by using this command git push -u origin master. You may ask to enter your credential in order to commit to the repository. Figure 3.3.4: Credential is required after the command git push -u origin master is used. Figure 3.3.5 shows all the file(s) is added to my repository successfully. Figure 3.3.5: File(s) added to repository successfully 3.4 Github Website Now, head to Github and log in to your account. You will see your app that you have created is listed under “Your repositories” table located on the right. Figure 3.4.1 shows that the app I created is shown under “Your repositories”. Figure 3.4.1: App created shown in “Your repositories” table Press your repository that you created and a similar page will show in Figure 3.4.2. The page will show all the information about your application. Figure 3.4.2: MyApp in my Github repository You will see all your commits by pressing “commits”. Figure 3.4.3 shows all the changes (commits) of MyApp. Figure 3.4.3: All changes of MyApp You can easily go back to previous commit and view the files. To do so, press “Initial” and a screenshot below will show all the files and lines that you added in the commit. Section highlighted in green means newly added files while red means deleted files or lines. Figure 3.4.4 shows my “initial” commit Figure 3.4.4: My “initial” commit To browse all the files in this commit, press “Browse files”. Of course, it will look the same right now as our initial commit is similar to our first commit. In the future when you have more commits, you are able to browse the files in the specific commit. In short, it is more like a time machine where you can go back and see all the changes and download the entire version. 3.5 Add Collaborators To add collaborators in your project, go to “Setting” and press “Collaborators” on the left. Add the specific member by username, full name, or email address. Figure 3.5.1 shows the Collaborators section under “MyApp”. Figure 3.5.1: Add collaborates to your project. 3.6 Changes and Deletions Changes and deletions of files and lines of code can be seen easily in the Github Desktop app and Github Website (Chapter 3.7). Figure 3.6.1 shows a example of a file being modified. On the left section, we can see that the file Gemfile is changed. On the right section, line 11 and 12 are modified by having the text deleted and moved or added to line 40 and 41 as indicated in green. Figure 3.6.1: Changes and Deletions of Gemfile To commit your changes to your Github repository, insert a short summary and commit to master. The summary and description section are the place where you should provide information about the changes that you have done. This will let others to keep track of each commit. Figure 3.6.1: Adding summary before publish/commit After “Commit to master” is pressed, we have to upload the changes. This can be done by pressing the “Push origin” tab. The value “1” that shows next to “Push origin” indicates how many commit(s) has not been uploaded. Figure 3.6.2: Commit that has not been uploaded to cloud Screenshot below shows all the commit has been synced to Github. Figure 3.6.3: Committed and synced successfully 3.7 History Git keeps track of every changes we made. There are two ways of viewing the changes: through Github Desktop or Github Website. Figure 3.7.1 shows the history in the Github Desktop while Figure 3.7.2 shows the history in the Github Website. Figure 3.7.1: History in Github Desktop To view the history in Github website, head to your Github repository and press on the “commits”. Figure 3.7.2 shows the Github repository. Figure 3.7.2: Github repository Figure 3.7.3 shows the two commits that I have made. To view the changes of the commit, press on the name of the commits (“Moved sqlite” or “Initial”). Figure 3.7.3: Two commits show in the repository Figure 3.7.4 shows the addition and deletion that we made as discussed in Chapter 3.6. To get the snapshot of the repository, press “Browse files”. You can either view the files or download a copy of the snapshot at the screen. Figure 3.7.4: Changes for “Moved sqlite” 3.8 Branches Branch can be very complicated. The discussion in this section is the basic. A secondary source may be required. The following paragraphs are quoted directly from Github. \"A branch represents an independent line of development. Branches serve as an abstraction for the edit/stage/commit process discussed in Git Basics, the first module of this series. You can think of them as a way to request a brand new working directory, staging area, and project history. New commits are recorded in the history for the current branch, which results in a fork in the history of the project. The git branch command lets you create, list, rename, and delete branches. It doesn’t let you switch between branches or put a forked history back together again. For this reason, git branch is tightly integrated with the git checkout and git merge commands.\" The following paragraphs are quoted directly from Atlassian. \"In Git, branches are a part of your everyday development process. When you want to add a new feature or fix a bug—no matter how big or how small—you spawn a new branch to encapsulate your changes. This makes sure that unstable code is never committed to the main code base, and it gives you the chance to clean up your feature’s history before merging it into the main branch. Figure 3.8.1: A repository with three branches: little feature, master, and big feature. For example, the diagram above visualizes a repository with two isolated lines of development, one for a little feature, and one for a longer-running feature. By developing them in branches, it’s not only possible to work on both of them in parallel, but it also keeps the main master branch free from questionable code.\" Based on Figure 3.8.1, we can see that little feature branch is behind of master branch while big feature is ahead of master branch. The big feature branch can be merged into master branch easily using merge commands. Assuming that you have a master branch right now and you would like to add a feature to your application. There are two ways to create a branch: through Github website or command line interface (CLI). To create a branch from Github Website, head to your Github repository and press on the \"Branch\" and insert a name that does not exists to create a branch. The operation is illustrated in Figure 3.8.2. Figure 3.8.2: A branch name add-notes is being created After the branch is created, we have to switch to the branch add-notes. Figure 3.8.3 shows the branch is set to add-notes. To commit the change we made to the branch, add a name to the summary section and commit the changes. Based on the Figure 3.8.3, instead of \"Commit to master\", we can see that it has been changed to \"Commit to add-notes\". Figure 3.8.3: add-notes is the current branch that we are using To create a branch using CLI, open a terminal window and point to your root directory of your application. Then, we use the command git branch YOUR-FEATURE-NAME. For this case, we are going to use the command git branch add-notes. Figure 3.8.4: git branch command is used to create a branch. Figure 3.8.4 shows the root directory of my application is Blog and a branch named add-notes is created successfully. The typical workflow of branching is illustrated in the steps below. Do note that you have to be at the root directory of your application in order to perform the operations below. Create a new branch name add-notes using the command git branch add-notes Switch to add-notes branch by using the command git checkout add-notes Perform all your modifications Add all the files that have been changed by using the command git add . (include the dot). Commit the change by using the command git commit -m \"added notes\". Push the code to the cloud by using the command git push --set-upstream origin add-notes. Figure 3.8.5 shows a screenshot of a the operation shown in Table 3.8.1. From the figure, we can see that the new branch is created and all the changes are committed successfully. Figure 3.8.5: Screenshot of a workflow of a branch. 3.9 Merge We use the merge feature to merge from branches that we create to master branch. Merging could be very challenging depending on the modification that you have done on branch and master branch. Merging may leads to conflict on the changes that you or your team members made. Refer to Chapter 3.10 Conflict for more information about conflict. As usual, all (or most of) the tasks can be achieved via GUI and CLI methods. For GUI method, it can be done on Github website. To begin, head to your Github repository and create a new pull request by pressing on the button \"New pull request\". Figure 3.9.1 illustrates the operation discussed. Figure 3.9.1: Creating a pull request Based on Figure 3.9.2, we can see that we are asked to compare the changes between the two branches that we wish to create a pull request. Figure 3.9.2: Compare changes between two branches Select any of the branches that you wish to compare the master branch with. Figure 3.9.3 shows that there is no conflict between the master branch and add-notes branch. Well, you are in luck! Figure 3.9.3: Able to merge without having any conflict To merge, we first need to create a pull request. Create a pull request by pressing the green \"Create pull request\" button. Figure 3.9.4 shows the pull request is opening. Insert some notes and create your request. Figure 3.9.4: Creating a pull request Figure 3.9.5 shows a pull request is created. To merge into the branch, use the \"Merge Pull Request\" button. Insert come notes and complete the \"merge request\" by inserting a short summary about the merge. Figure 3.9.5: Pull request created Figure 3.9.6 shows a merge request is completed and merged. Merging can also be done in CLI. Assuming that we have an application called Blog we have a branch named add-notes and we would like to merge into the master branch The typical workflow of branching is illustrated in the steps below. Do note that you have to be at the root directory of your application in order to perform the operations below. Figure 3.9.7 illustrate the operation flow below in real environment. Switch to master branch by using the command git checkout master. Merge add-notes to master branch by using the command git merge add-notes. Push the changes of master branch by using the command git push -u origin master. Figure 3.9.7: Merge is completed in CLI. 3.10 Conflict A conflict usually happens when the same line(s) of code of the same file is modified in both master and other branch. In a simpler explanation, the same line of code is modified by two users at the same time will result in conflict. If modification is made on different files at the same time, conflict will not happen. Table 3.9.1 shows the the changes and histories of a file, hello.txt. Table 3.9.1: An illustration of a typical workflow between one or more users Row Name of Branch Created / Modified At Changes Content Conflict 1 Master Day 1 Created hello.txt ABC DEF GHI - 2 Branch-1 Day 2 Created branch ABC DEF GHI - 3 Branch-1 Day 2 Modified content ABC DEF - 4 Branch-1 Day 2 Merge to Master ABC DEF No 5 Master Day 2 - ABC DEF - 6 Master Day 3 Modified content ABC - 7 Branch-1 Day 3 Modified content ABC DEF GHI - 8 Branch-1 Day 4 Merge to Master ??? Yes From Table 3.9.1, we can see that the content of master (row 5) is modified and committed ahead of branch-1 (row 6). Then, a change is made on branch-1 and when it is merging into master, they conflict. There are two ways of resolving a conflict: through Github Website or CLI and text editor on your local machine. Figure 3.10.1 shows a pull request in Github Website that contains a conflict and unable to merge automatically. Figure 3.10.1: Unable merge due to conflict We are still able to create a pull request. However, we have to resolve the conflict before we are able to merge into the master branch. Figure 3.10. Figure 3.10.2: Resolve conflict option shown To resolve the conflict from the Github website, resolve the conflict using the option available. Figure 3.10.3 shows one of the 3 conflicts that is in config/puma.rb. Resolve the conflict by carrying out the appropriate editing. The conflicted sections are shown using symbols` Figure 3.10.3: Conflicts shown in config/puma.rb. Figure 3.10.4 shows that the conflicts are removed, no longer having or symbols. Figure 3.10.4: Conflicts resolved in config/puma.rb. After the changes are done, resolve the conflict by pressing on \"Mark as resolved\" button. Then, press on the \"commit merge\" that you see after the button is changed. Figure 3.10.5 shows it is ready to merge. Press the \"commit merge\" to complete the merge. Figure 3.10.5: Conflicts resolved in config/puma.rb. Now, we are able to \"Merge pull request\". Press on \"Merge pull request\", insert some text and \"confirm merge\". Resolving a conflict can also be done in CLI. Assuming that we have an application called Blog we have a branch named add-posts and we would like to merge into the master branch. However, there is a conflict while merging to master branch. The typical workflow of resolving a conflict issue in CLI is discussed in the steps below. Do note that you have to be at the root directory of your application in order to perform the operations below. Figure 3.10.6 illustrate the operation flow below in real environment. Switch to master branch by using the command git checkout master. Merge add-posts to master branch by using the command git merge add-posts. Resolve the conflict in your text editor. Add all the files that have been changed by using the command git add . (include the dot). Commit the change by using the command git commit -m \"resolved conflict\". Push the changes of master branch by using the command git push -u origin master. Figure 3.10.6: The process of resolving a conflict As a bonus information, we can also see the conflict information part in Github Desktop. Figure 3.10.7 shows that the conflicts are shown in Github desktop. It can be seen easily with the symbol or . Figure 3.10.7: conflict shown in Github Desktop If you are using Visual Studio Code Text Editor (more information can be found in the earlier part), you can fix the code easily by using the available options shown in the text editor in the file(s) that has conflict: Accept Current Change, Accept Incoming Change or Accept Both Change. Figure 3.10.8 shows that the conflicts are shown in Github desktop. It can be seen easily with the symbol or . Figure 3.10.8: Option to resolve a conflict automatically "},"DeployYourApplication.html":{"url":"DeployYourApplication.html","title":"Chapter 4. Deploy your Application","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Chapter 4. Deploy your Application Heroku is a platform that enables developers to build, run, and operate application entirely in the cloud. The best thing about it is it is free. There are add on that you can add to your application. There are free plans for almost add on available. The only drawback about Heroku server is your application will goes to sleep if there is no activity in 30 minutes. What does it mean? Everytime you go to your Web Application, it will take about 10-15 seconds to start your application. Other than that, it does not have any issue. Also, there is a way to keep the Web Application running at all time. Contact me to get more information about this. 4.1 Heroku CLI To deploy our application to Heroku server, the first step is to create an account. After you have created your account, download and install Heroku CLI. During installation, do not modify any of the default options. You can read more about Heroku CLI here. After the installation is completed, open a terminal window and type Heroku. A screenshot below shows the output message when the command is typed. Right now, the root directory of the terminal does not matter. However, you may be required to install some additional file. Read the output message from your terminal and install the required files. Figure 4.1.1: Heroku command in Terminal Window Add your Heroku credentials to your computer by using the heroku login. Follow the instruction on the screen to insert your password. Figure 4.1.2 shows a credential is added successfully. Figure 4.1.2: Adding my credentials Now, you are ready to deploy your first Web Application to the Web. 4.2 Prepare to Deploy To deploy your first application, we have to do a slight modification on our database. Follow the instruction below or read Heroku’s tutorial on Getting Started with Rails 5.x on Heroku. To begin, terminate or close your localhost server using the combination key of CTRL \\ C. Then, open your Gemfile and move the line gem ‘sqlite3’ into the group with development and test specified. And add the follow code to the Gemfile. Figure 4.2.1 shows the result of the modification. Table 4.2.1: Modify Gemfile #MyApp/gemfile group :production do gem 'pg' gem 'rails_12factor' gem 'dalli' end The reason to move sqlite3 Gem to development and test is due to sqlite3 is not supported in Heroku. We have to use pg (PostgreSQL) Gem. Do note that Ruby on Rails and PostgreSQL are “best friend”. They are the best combination. I do not recommend you to use MySQL over PostgreSQL. Figure 4.2.1: Result of modification Head to Github Desktop app and you can see that the file and lies that you change shows up in the “change” tab. As mentioned earlier, red means lines are removed while green means lines added. Figure 4.2.2 shows all the changes I made. Figure 4.2.2: Changes shown up after the modification is made Now, enter the command bundle install to update and install the Gem that we specify in our Gemfile. Figure 4.2.3 shows the output after the command is entered. We can see that all the gems are installed without any errors. If you unable to carry out the operation, do note that your path of your terminal has to be the root of your Web Application. Figure 4.2.3: Operations are carried out successfully. In your Github Desktop, commit and sync your changes in Github Desktop to prepare for our deploy. If you skipped the step, you will unable to deploy your Web Application successfully since we are going to use the integration available in Heroku. 4.3 Deploy to Heroku To deploy, there are two ways: GUI and CLI methods. I will always stick with the GUI method as it is easier to see and understand. You can read more about the CLI method if you wish to use CLI. Login to Heroku Website and you will be redirected to Heroku Dashboard. There are many settings that you can play with in Heroku Website. Do remember to check it out. Figure 4.3.1 shows the Heroku Dashboard. Since you have just created your account, you will not have any personal app shown on the dashboard. Figure 4.3.1: Heroku dashboard Press “new” and “create new app” on top right corner of the page. Fill in the information required. The field “App Name” is optional. You will still get to modify your app name later. However, that is part of the link to your Web Application. Press “Create App” to create your app. Figure 4.3.2 shows a new app is being created. Figure 4.3.2: Creating a new App You will then redirected to a page that ask you to choose a “Deployment method”. As mentioned earlier, GitHub and Heroku has a good integration. Choose “Github” as the Deployment method. You may have to connect your Github to Heroku if you are using it for the first time. Please complete that before following the next step. In the other hand, you may choose “Heroku Git” if you prefer CLI. Please follow instruction on the page to use CLI. Next, enter your repository’s name for the app that you created and press “Search”. Press “connect” when the name of your application matches the one you created. Figure 4.3.3 shows that my repository show up in the search result. You have to enter the name of your own repository. The owner of the repository has access to the repository only. If you are the collaborator of the repository, you are unable to search and deploy the app. Figure 4.3.3: An app is shown up after the search After the app is connected, you will get more option. To start deploy operation, press “Deploy Branch”. There is a feature, “Enable Automatic Deploys”, that will automatic deploy for every new commit that you did to Github. In the other word, for every commit that you do, Heroku will fetch the information and Github and deploy it at their end. Figure 4.3.4 shows the screen after I have connected to my app. Figure 4.3.4: Deploy Branch and Enable Automatic Deploys You may receive an email if you deploy is failed. However, you have to keep track of application by yourself to make sure that all the feature works. The operation may take one to two minutes and it is based on the size of your application. You can choose to look at the logs to make sure that everything is going well. If you have done everything correctly, you will some message showing that your application is deployed to Heroku. Figure 4.3.4 shows my application is deployed successfully. Figure 4.3.5: My app is deployed successfully Follow the link to your web application! The link to your Web application will always be YOUR_APP_NAME.herokuapp.com unless you changed the domain. Your application should show up at your Heroku Dashboard now. If you received the error “The page you were looking for doesn't exist”, it is completely normal. This is due to we have not configured the root of the Web Application. 4.4 Database Migration Before we are able to use our Web Application, we have to migrate our database on the server side. The command is pretty similar to what we have done earlier. To begin, open a new terminal window. Your root directory can be anywhere as we are now using Heroku CLI to interact with our application. To migrate your database, follow the command below. Replace YOUR_APP_NAME with the name of your app that you defined earlier. All commands are case sensitive. If you did not put a name below, you have to return to your Heroku Dashboard to get the name. Figure 4.4.1 shows a migration is completed without any error. heroku run rake db:migrate --app YOUR_APP_NAME Figure 4.4.1: A migration is completed without any error Now return to your link given by the Heroku and you should be able to see your Posts page shows up correctly. The link to your Web application will always be YOUR_APP_NAME.herokuapp.com unless you changed the domain. Figure 4.4.2 shows that I am able to access my Posts index page after migration. Figure 4.4.2: My Posts index page after migration 4.5 Some Useful Heroku Commands Some Heroku Commands that you may need are listed below. For your information, you should not simply run them without needing them. For the first command, follow the information output on the terminal to confirm the action. Reset your ENTIRE database or the ENTIRE database heroku pg:reset PG_DB_NAME --app YOUR_APP_NAME Database Migration in Heroku heroku run rake db:migrate --app YOUR_APP_NAME Load preloaded seed table (will Discuss in Part II) heroku run rake db:seed --app YOUR_APP_NAME To obtain PG_DB_NAME (Postgres Database Name), go to your Heroku Dashboard and click on the name of your app. You will be redirected to a page. Figure 5.5.1 shows I am redirected to my app. Figure 4.5.1: Overview of my application in Heroku On the screen, press on the “Heroku Postgres” under “Installed add-ons” You will now redirected to another page and the name of the database is shown on the top part of the screen. Figure 4.5.2 shows my Postgres Database table name. Figure 4.5.2: My Postgres database in Heroku "},"SetupChallenge.html":{"url":"SetupChallenge.html","title":"Chapter 5. 10 Minutes Setup Challenge","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Chapter 5. 10 Minutes Setup Challenge This is a challenge or demo to show how fast you can get Rails application to work and deploy to the Heroku PaaS within 10 minutes. A video tutorial that shows step by step operation is available and can be found here. The complete source code of the improved version of this tutorial can be found here. Here are the major components that we will try to achieve within 10 minutes Setup a new Website Add Materialize Styling Add user authentication Deploy it to Heroku PaaS Test our website There will be no major explanation in this chapter. All the information have already been discussed in this tutorial. Use the search feature to search or the specific topic. 5.1 Video Transcript A video tutorial that shows step by step operation can be found here. [0:04] To start a fresh website, use the new command. rails new Challenge [0:20] Add Materialize and Jquery Gem to your gemfile gem 'materialize-sass' gem 'jquery-rails' [0:39] Rename our stylesheet extension from .css to .scss. [0:43] Import the stylesheet by importing Materialize library @import \"materialize/components/color\"; $primary-color: color(\"blue\", \"lighten-2\") !default; $secondary-color: color(\"yellow\", \"base\") !default; @import 'materialize'; [0:49] Import the Javascript library to application.js //= require jquery //= require turbolinks //= require materialize-sprockets [0:53] Remove the duplicates //= require turbolinks [0:59] Add the library to application.js //= require materialize/extras/nouislider [1:05] Add noUiSlider to your stylesheet, app/assets/stylesheet/application.scss @import \"materialize/extras/nouislider\"; [1:10] Add the Materialize Icon by importing the library to your stylesheet. @import \"https://fonts.googleapis.com/icon?family=Material+Icons\"; [1:18] Set our directory to Challenge ``cd challenge [1:20] Generate a Page controller with home and help page action. rails g controller Page home help [1:39] Add the HTML5 tag ... [1:50] Wrap the body with container ... [2:05] Add the HTML tag header and render the partial [2:19] Add the HTML tag footer and render the partial [2:30] Create a header file, _header.html.erb and _footer.html.erb. [2:48] Add the following code to make the footer sticky body { display: flex; min-height: 100vh; flex-direction: column; } main { flex: 1 0 auto; } [2:53] In the _footer.html.erb, add thesample code below and also can be found from Materialize Documentation. Footer Content You can use rows and columns here to organize your footer content. Links Link 1 Link 2 Link 3 Link 4 © 2014 Copyright Text More Links [3:02] In the _header.html.erb, add the sample code below and also can be found from Materialize Documentation. Logo Sass Components JavaScript [3:17] Add devise to your Gemfile gem devise' [3:24] Comment out bcrypt and add ruby to the line. This is because there are many different bcrypt libraries. [3:37] Run the generator to generate the required files Rails g devise:install [3:44] Set up our default URL for Devise mailer for development environment. config.action_mailer.default_url_options = { host: 'localhost', port: 3000 } [3:56] Add the flash message to application.html.erb [4:25] In your config/routes.rb, modify the route for home and set it to root. root 'page#home' [4:32] Generate a User model and point to Devise controller. rails g devise User [4:44] Perform a database migration rails db:migrate [4:57] To deploy it to Deploy it to Heroku PaaS, we have to move the sqlite3 gem away to development group. [5:04] Add the following gems to production group. Do note that there is a typo at line 46 in the video. group :production do gem 'pg' gem 'rails_12factor' gem 'dalli' end [5:36] Add our repository to Github Desktop. [5:46] A typo is made and rails server is unable to start. [6:02] Reattempt to start the server. rails s [6:08] Commit our changes to Github. [6:21] Publish our application to Github. [6:25] View our application locally at localhost:3000. [6:28] Deploying our application to Heroku PaaS. [6:55] Discover header and footer are not rendered. [7:03] Fix typo at line 12 and line 27. [7:10] Reload the webpage and everything is working as expected this time. [7:16] Push our changes to Github. [7:58] Deploy our application again as we push our latest code to Github. [8:00] Perform a database migration at server side. rake db:migrate --app YOUR_APP_NAME [8:24] Heroku is still building our application and we are seeing our old homepage. [8:32] Our application is built and deployed successfully! [8:45] Create a new user to make sure that our database is working correctly [9:00] Success! "},"LayoutAndStyling.html":{"url":"LayoutAndStyling.html","title":"Part IV. Layout and Styling","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Part IV. Layout and Styling This part of the tutorial will focus on polishing your application by making your website more user friendly in terms of look. There are two available framework to choose from. If you are new to Web Development, it is recommended for you to use Bootstrap Framework instead of Materialize. As a reminder, to avoid any issues, install only one framework in your Web Application. "},"BootstrapFramework.html":{"url":"BootstrapFramework.html","title":"Chapter 1. Bootstrap Framework","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Chapter 1. Bootstrap Framework The easiest way of styling your Web Page is to use a framework. There are many framework that allows you to style your Web Page. In this Chapter, we are going to see how to use Bootstrap framework to style our website. It may not look as good as the fancy websites that you see everyday, but it does the job. An alternative of front end framework is Material Design. 1.1 Install Bootstrap Gem Before we are able to install the Gem, we have to read the documentation that the Gem provide. The document will include important information on how to install, configure and use the Gem in our application. Head to Bootstrap’s Github page and scroll down to the read me section. Figure 1.1.1 shows Bootstrap’s readme section in Github page. Figure 1.1.1: Readme file in Bootstrap’s Github Page By following the instruction provided in the Github Page, the first step is to add the following lines of code to your Gemfile and save it. I recommended adding the Gem at the top of the Gemfile instead of at the bottom. Figure 1.1.2 shows the operation of adding the code the respective file as shown in Table 1.1.1. Do note that your Web Server should not be running while you are trying to add or remove a Gemfile. Secondly, the arrangement of Gems matter! You have to prioritize (arrange) them based on how you use it. Table 1.1.1: Code to add to Gemfile #MyApp/Gemfile gem 'bootstrap-sass', '~> 3.3.6' gem 'sass-rails', '>= 3.2' Figure 1.1.2: Code added to the top of the Gemfile Whenever we add a Gem to our Gemfile, we have to run the command bundle install. In the terminal, type in the following code below to install the Gem listed in your Gemfile. bundle install If you wished to update all the Gem to your Gemfile to the latest version, use the command bundle update. It may be necessary to update the Gem if you see your terminal shows that your Gem is outdated. At this point, you may get an error as shown in Figure 1.1.3. According to the error message, it tells us that sass-rails exists twice with different version in our Gemfile. We can see that the error message is caused by the code in Line 12 of the Gemfile. Figure 1.1.3: Error installing Gem To fix the error, head to Gemfile and remove one of the sass-rails. Run the command bundle install again and you should be able to install the gem successfully. Figure 1.1.4 shows the Gems are installed successfully. Figure 1.1.4: All Gems are installed successfully 1.2 Use Bootstrap Gem Now, we will try to import the Bootstrap files. The operations carried out below are based on the Bootstrap’s readme file. Add the code as stated in Table 1.2.1 to the respective file. If you are unable to find application.scss file, rename application.css to the respective extension required. Do not remove any of the code in green. Figure 1.2.1 shows the result of the operation stated in Table 1.2.1. Table 1.2.1: Import Bootstrap Library #MyApp/assets/stylesheets/application.scss @import \"bootstrap-sprockets\"; @import \"bootstrap\"; Figure 1.2.1: Result of the operation stated in Table 1.2.1 The next step would be adding two lines of code into the javascript file. Add the following code into the specified file below. You should not add both lines of code in Table 1.2.2 to the Javascript file as one of them already exists. Figure 1.2.2 shows the operation after justifying which code from Table 1.2.2 to add. Table 1.2.2: Import Bootstrap JS Library #MyApp/assets/javascripts/application.js //= require jquery //= require bootstrap-sprockets Figure 1.2.2: Result of Javascript file Now start your server. If you do not receive error while redirecting to you application, you have done everything correctly. However, if you received some errors, you have to check back and see what you have done wrong. Figure 1.2.3 shows the result of the web application after the Bootstrap Gem is installed and used correctly. Figure 1.2.3: Result of Webpage after Bootstrap Gem is installed and used correctly 1.3 Containers Based on Figure 1.2.3, we see that we have a quite terrible webpage as everything sticks to the leftmost part of the browser. This is due to the missing configuration in Bootstrap layout. To fix this, we have to use a container. Container is an element that wrap site contents into Bootstrap grid system. In a simpler word, container contains some code that will automatically set the padding and margin of our page based on the screen width. According to Bootstrap Website, to implement the container, we have to wrap our container around our content. The code for the container is attached below. ... Add the code above to the Ruby on Rails application layout as shown in Table 1.3.1. Figure 1.3.1 shows the code after the operation is carried out. Do note that the in Table 1.3.1 should goes between the … . Table 1.3.1: Add container to our application #MyApp/views/layouts/application.html.erb ... Figure 1.3.1: Add container to our application Now, reload your webpage and you will see that the page is a responsive to the width of your browser window. Adjust the width of your browser will notice that the content is scaled dynamically. Figure 1.3.2 shows the result of Web Page after a container is added. Figure 1.3.2: Result of Web Page after a container is added To learn more about bootstrap, head to w3school.com. The website explains and has great example on Bootstrap framework. 1.4 Header and Footer Navigation bar in the Website allows us to navigate from page to page easily. To begin adding a Bootstrap header to our application, head to w3school website and copy the any of the Navigation Bar example. The code you copied should goes before the container as shown in Figure 1.4.1. You may also refer to Bootstrap Navigation Bar’s example. The navigation bar from w3school website will grouped in mobile view. You have to do slight modification on the code in order for it to be grouped together. Figure 1.4.1: Result of the code after a Navigation Bar is added Reload your website and you should see something similar to the Figure 1.4.2. Figure 1.4.2: Result of Web Page after a Navigation Bar is added For footer, check Bootstrap’s documentation. The operations required are similar. As we can see from Figure 1.4.1, our code starts to look long and messy. To solve this, we can use Ruby on Rails’ ActionView partial. Create a partial, shown in Figure 1.4.3, for header by creating a file name _header.html.erb at the same directory where application.html.erb is in. Move the Navigation Bar’s code, as shown in Figure 1.4.4 to _header.html.erb and replace the code you moved away with as shown in Figure 1.4.3. Reload your current webpage and you should still get the same layout as before. You do not have to include an extension or path for your partial. However, in this case, we have to include the layout directory in order for the application to find the partial file. In general, we do not have to include the directory if the partial is created within the folder of your view (e.g. Posts). Figure 1.4.3: Code moved into partial Figure 1.4.4: Code replaced by partial Repeat the same process for moving your creating a partial for your footer (if you have one). 1.5 Style a Form There are many ways to style a form. However, there is a way that you can style your form without needing to modify the code extensively. Hint 1: Google is your best friend! Hint 2: You may have to use a Gem. Hint 3: It is related to “helper”. Hint 4: You only have to replace one word in the form method. 1.6 Bootstrap Button Style There are six predefined styles of buttons in Bootstrap. Below are the predefined classes: .btn-default .btn-primary .btn-success .btn-info .btn-warning .btn-danger You may also refer the information above from Bootstrap’s Website. Table 1.6.1 shows six different buttons style listed above. Table 1.7.1: Bootstrap button style sizes Class Button Code Default \"button btn btn-default\" %> Primary \"button btn btn-primary\" %> Success \"button btn btn-success\" %> Info \"button btn btn-info\" %> Warning \"button btn btn-warning\" %> Danger \"button btn btn-danger\" %> 1.7 Bootstrap Button Size There are four different button sizes in Bootstrap. Below are the four predefined classes: .btn-lg .btn-md .btn-sm .btn-xs You may also refer the information above from Bootstrap’s Website. Table 1.7.1 shows four different buttons with different style and sizes based on the four button sizes listed above. Table 1.7.1: Buttons with different sizes Class Button Code None Extra Small \"button btn btn-primary btn-xs\" %> Small \"button btn btn-primary btn-sm\" %> Medium \"button btn btn-primary btn-md\" %> Large \"button btn btn-primary btn-lg\" %> "},"MaterializeFramework.html":{"url":"MaterializeFramework.html","title":"Chapter 2. Materialize Framework","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Chapter 2. Materialize Framework Materialize is a front-end framework based on Material Design. It is new and lack of well written documentation. If you are not familiar with Web development, I would recommend you to use Bootstrap Framework instead of Materialize Framework. This is because Bootstrap has a lot of great and well written documentation while Material Design is still in Beta stage. I created a starter template that is based on Materialize Framework and can be downloaded from my Github repository. The minimum Ruby version that is required to use the template is Ruby 2.4.1. 2.1 Install Materialize Gem Before we are able to install the Gem, we have to read the documentation that the Gem provide. The document will include important information on how to install, configure and use the Gem in our application. Head to Materialize’s Github page and scroll down to the read me section. Figure 2.1.1 shows Materialize’s readme section in Github page. Figure 2.1.1: Readme file in Bootstrap’s Github Page By following the instruction provided in the Github Page, the first step is to add the following lines of code to your Gemfile and save it. I recommended adding the Gem at the top of the Gemfile instead of at the bottom. Figure 2.1.2 shows the operation of adding the code the respective file as shown in Table 2.1.1. Do note that your Web Server should not be running while you are trying to add or remove a Gemfile. Secondly, the arrangement of Gems matter! You have to prioritize (arrange) them based on how you use it. Table 2.1.1: Code to add to Gemfile #MyApp/Gemfile gem ‘materialize-sass’ Figure 2.1.2: Code added to the top of the Gemfile Whenever we add a Gem to our Gemfile, we have to run the command bundle install. In the terminal, type in the following code below to install the Gem listed in your Gemfile. bundle install If you wished to update all the Gem to your Gemfile to the latest version, use the command bundle update. It may be necessary to update the Gem if you see your terminal shows that your Gem is outdated. 2.2 Use Materialize Gem Now, we will try to import the Materialize files. The operations carried out below are based on the Materialize’s readme file. Add the code as stated in Table 2.2.1 to the respective file. If you are unable to find application.scss file, rename application.css to the respective extension required. Do not remove any of the code in green. Figure 2.2.1 shows the result of the operation stated in Table 2.2.1. Table 2.2.1: Import Bootstrap Library #MyApp/assets/stylesheets/application.scss @import \"materialize\"; Figure 2.2.1: Result of the operation stated in Table 2.2.1 The next step would be adding three lines of code into the javascript file. Add the following code into the specified file below. You should not add three lines of code in Table 2.2.2 to the Javascript file as one of them already exists. Figure 2.2.2 shows the operation after justifying which code from Table 2.2.2 to add. Table 2.2.2: Import Materialize JS Library #MyApp/assets/javascripts/application.js //= require jquery //= require turbolinks //= require materialize-sprockets Figure 2.2.2: Result of Javascript file 2.3 Add noUiSlider noUiSlider is an extra feature that come with Materialize Gem. You may choose to install and import the extra feature if you wish to. Add the code as stated in Table 2.3.1 and Table 2.3.2 to the respective file. Table 2.3.1: Import Bootstrap Library #MyApp/assets/stylesheets/application.scss @import \"materialize/extras/nouislider\"; Figure 2.3.1: Result of the operation stated in Table 2.3.1 The next step would be adding one lines of code into the javascript file. Add the following code into the specified file in Table 2.3.1. Figure 2.3.2 shows the operation after justifying which code from Table 2.3.2 to add. Table 2.3.2: Import noUiSlider Library #MyApp/assets/javascripts/application.js //= require materialize/extras/nouislider Figure 2.3.2: Result of Javascript file 2.4 Add Material Icon To use Material Design Icon, there are three ways of importing it to our application. Choose any option that you think it work best for you. The first way is to include the stylesheet in our application’s head. This can be achieved by adding the code in Table 2.4.1 to your portion in application.html.erb. Table 2.4.1: Import Material Icon using HTML code #MyApp/views/layouts/application.html.erb The second way is to import the library stated below is to application.scss. Follow the instruction in Table 2.4.2 to add the required code. Table 2.4.2: Import Material Icon to SCSS file #MyApp/assets/stylesheets/application.scss @import \"https://fonts.googleapis.com/icon?family=Material\\Icons\"; Do note that the first two options require Internet access to import the code. However, the third way is able to can be used when you are developing offline. To install for offline access, add the code to the file stated in Table 2.4.3 and Table 2.4.4. Table 2.4.3: add material_icons Gem to Gemfile #MyApp/Gemfile gem 'material_icons' Figure 2.4.1 shows the code in Table 2.4.4 added to Line 15. Table 2.4.4 Import material_icons library to stylesheet #MyApp/assets/stylesheets/application.scss *= require material_icons Figure 2.4.1: Result of the operation stated in Table 2.4.4 2.5 Header and Footer Navigation bar in the Website allows us to navigate from page to page easily. To begin adding a Materialize header to our application, head to Materialize Website and copy the any of the Navigation Bar example. As a side note, Materialize is using HTML5 Section Elements. You have to place each of the tags, , , , correctly in order to get it to work. You may need to look up more reference before start to implementing Materialize. The arrangement of HTML5 Section Elements is as follow (refer to Figure 2.5.1): ... ... Figure 2.5.1 shows a Navigation Bar code is added to my MyApp/views/layouts/application.html.erb along with correctly formatted code using HTML5 Section Elements. Figure 2.5.1: Result of the code after a Navigation Bar is added Reload your website and you should see something similar to the Figure 2.5.2. However, some of the examples in the Materialize Website requires Javascript code. In that case, you have to add the Javascript/JQuery code to the element section. Figure 2.5.2: Result of Web Page after a Navigation Bar is added To add footer, visit Materialize’s website and add the code after the tag section. Figure 2.5.3 shows the code where footer code should goes to. Replace the footer section with the footer code you found in the website. Figure 2.5.3: Location where footer should be added Figure 2.5.4 shows a website with Materialize Header and Footer. Your final result may be different depending on the header and footer that you are using. Figure 2.5.4: A sample Rails website with Materialize Header and Footer As we can see from Figure 2.5.3, our code starts to look long and messy. To solve this, we can use Ruby on Rails’ ActionView partial. Create a partial, shown in Figure 2.5.5, for header by creating a file name _header.html.erb at the same directory where application.html.erb is in. Move the Navigation Bar’s code, as shown in Figure 2.5.5 to _header.html.erb and replace the code you moved away with as shown in Figure 2.5.6. Reload your current webpage and you should still get the same layout as before. You do not have to include an extension or path for your partial. However, in this case, we have to include the layout directory in order for the application to find the partial file. In general, we do not have to include the directory if the partial is created within the folder of your view (e.g. Posts). Figure 2.5.5: Code moved into partial Figure 2.5.6: Code replaced by partial Repeat the same process for moving your creating a partial for your footer (if you have one). The final result of your application.html.erb may look similar to Figure 2.5.7. Figure 2.5.7: Final result of application.html.erb with partial 2.6 Containers Based on Figure 2.6.4, we see that we have a quite terrible webpage as everything sticks to the leftmost part of the browser. This is due to the missing configuration in the layout. To fix this, we have to use a container. Container is an element that wrap site contents into Materialize grid system. In a simpler word, container contains some code that will automatically set the padding and margin of our page based on the screen width. According to Materialize Website, to implement the container, we have to wrap our container around our content within the element section. The code for the container is attached below. ... Add the code above to the Ruby on Rails application layout as shown in Table 1.3.1. Figure 1.3.1 shows the code after the operation is carried out. Do note that the in Table 1.3.1 should goes between the … . Table 2.6.1: Add container to our application #MyApp/views/layouts/application.html.erb ... Figure 2.6.1: Add container to our application Now, reload your webpage and you will see that the page is a responsive to the width of your browser window. Adjust the width of your browser will notice that the content is scaled dynamically. Figure 2.6.2 shows the result of Web Page after a container is added. Figure 2.6.2: Result of Web Page after a container is added "},"ImplementingFeatures.html":{"url":"ImplementingFeatures.html","title":"Part V. Implementing Features","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Part V. Implementing Features This part of the tutorial will assume that you have a little bit of Ruby on Rails knowledge. Do not jump in right away and expect everything will work. Some of features in this part will use Gems while some of the features are built from scratch. Note: This part of the tutorial will assume have a User model with Admin functionality and Basic Login and Logout system or user Session setup. "},"AddCommentFeatureToAnyModel.html":{"url":"AddCommentFeatureToAnyModel.html","title":"Chapter 1. Add Comment Feature to Any Model","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Chapter 1. Add Comment Feature to Any Model In this chapter, a comment feature will be added to a newly created model. The easier way of adding the ability of comment to an existing model is to use a GEM (AKA libraries that created by others). The GEM that we are going to use is commontator. Note: This Gem does not work with >= Ruby 2.4.1. 1.1 Create a Post Model For this example, I am going to start from scratch and show how to create and add a comment feature based to the Post model that I create with the scaffold comment below. However, this example will assume that you have a user model setup with session feature (login and logout feature). If you are not using Devise, please follow the additional instruction included in the special section. We want to associate each post to the user that created it. To create a Post model with reference to User’s ID, the easiest way is to use scaffolding command. rails g scaffold Post text:string user:references Note: g = generate; Post is the MVC that we want to create with scaffolding command; user:references is command that associate user’s ID to each of the new post, where user is the user’s model. Then, do a migration by using the command rake db:migrate. Now, we have a working Post with user association. 1.2 Install and Configure Commontator GEM In order to add comment to the Post, we will use commontator GEM. To begin, visit their Github’s repository. Based on the Readme file in the repository, we have to add the line of code below to our Gemfile. Instructions on how to use the GEM can be also found in the Readme file. There are many features that come with the GEM. Please refer to the Readme file on how to configure them. Table 1.2.1 shows the code that should be added to Gemfile and Figure 1.2.1 shows the result of the Gem is added to our Gemfile. Table 1.2.1: Code to add to Gemfile #MyApp/gemfile gem 'commontator', '~> 4.11.1' Figure 1.2.1: Code added to Gemfile, Line 3 Next, we have to run bundle install to install the GEM that we added to our Gemfile. Please terminate all your Rails server before running the bundle install command. Next, we have to copy commontator’s initializer and migrate to our app. To do that, run the command below. rake commontator:install Then, do a migration again by using the command rake db:migrate. After the migration is completed, we can see that there are a few database tables are created. Figure 1.2.2 shows the new database table that are created after a database migration. Figure 1.2.2: Tables created after database migration Now, we have to add the route to our routes.rb. Figure 1.2.3 shows the code from Table 1.2.2 is added to Line 6 of the file. Table 1.2.2: Code to add to routes.rb #MyApp/config/routes.rb mount Commontator::Engine => '/commontator' Figure 1.2.3: Route added to routes.rb Next, we have to import the stylesheet in order to have the comment to function properly. Figure 1.2.4 shows the code from Table 1.2.3 is added to Line 15. If you are unable to find the file application.scss, rename application.css to the respective extension required. Please do not remove any of the code in green as shown in Figure 1.2.4. Table 1.2.3: Code to add to stylesheet #MyApp/assets/stylesheets/application.scss *= require commontator/application Figure 1.2.4: Code added to stylesheet Add the code in Table 1.2.4 to your existing model. You may name your model differently. Please ensure that you place the code at the correct model. Or else, it will not work. In my case, User is the person that is allowed to leave a comment. Figure 1.2.5 shows the the code in Table 1.2.4 is added to Line 10. Table 1.2.4: Code to add to user.rb #MyApp/models/user.rb acts_as_commontator Figure 1.2.5: Code added to user.rb Then, add the code in Table 1.2.5 to your existing model that you want the comment to be left at. You may name your model differently. Please ensure that you place the code at the correct model. Or else, it will not work. In my case, Post is the model that I want user to leave the comment at. Figure 1.2.6 shows the code from Table 1.2.5 is added to Line 3. Table 1.2.5: Code to add to post.rb #MyApp/models/post.rb acts_as_commontable Figure 1.2.6: Code added to post.rb In the view that you want the user to leave comment, add code in Table 1.2.6 to the appropriate location where you want the view to show the comment. In my case, I will add the code below to my Post’s show page. The author of the GEM states that it is best to include the code below in the show.html.erb. Figure 1.2.7 shows the code from Table 1.2.6 is added to Line 13. You may want to replace @postwith the code that correspond to your controller. If you have a cars_controller, you have to replace it with @car. Table 1.2.6: Code to add to show.html.erb MyApp/views/posts/show.html.erb Figure 1.2.7: Code added to show.html.erb Please follow the instruction below in this page IF you are not using Devise GEM rake commontator:copy:controllers You will see that you have a Commontor folder created with four controllers. In your application_controller, add the code shown in Table 1.2.7. Figure 1.2.8 shows the code in red box are added to the controller. Table 1.2.7: Code to add to Application Controller under Commontator #MyApp/controller/commontator/application_controller.html.erb def current_user return unless session[:user_id] @current_user ||= User.find(session[:user_id]) end Figure 1.2.8: Code added to Application Controller under Commontator 1.3 Testing and Verifying the Feature Now, fire up your Rails server and you should have a working Comment feature for your model. In order for this feature to work correctly, ensure that a session is established (a user is currently logged in). Figure 1.3.1 shows a list of posts that I have created. Each post is associate with a user. In order to have the user’s information to show up correctly, you have to replace with in your show.html.erb. You may want to replace @post with the code that correspond to your controller. If you have a cars_controller, you have to replace it with @car. Figure 1.3.1: Index of Post Figure 1.3.2 shows a comment feature is implemented successfully. To show a comment that I have created earlier, I have to click on the “Show Comment” hyperlink. Figure 1.3.2: Comment feature implemented successfully Figure 1.3.3 shows a comment that I have left earlier. Do note that user is not allowed to leave a comment if they are not logged in. Figure 1.3.3: Expanded view of comment When a user is logged in, the user is allowed to leave a comment. Figure 1.3.4 shows the user has the ability to leave comment after he or she is logged in. Figure 1.3.4: New comment is allowed when a session is established To add more comments, click on the “add comment” and a comment box will be shown on the screen. Figure 1.3.5 shows a text box for comment. Figure 1.3.5: Adding a comment In our SQLiteStudio, we can verify the comments in store in the database table. Figure 1.3.6 shows the data populated in my database table. At the current stage, the editor_id does not contain any information. This is because, by default, the comment is anonymous. Refer to the Readme page in order to associate the user to each comment. Figure 1.3.6: Content in commontator_comments database table This GEM come with a built in feature that allow user to rate the comment. For more information on how to turn enable this feature, please follow the instruction from the GEM’s Github Readme page. "},"JointTableAndBookingGEM.html":{"url":"JointTableAndBookingGEM.html","title":"Chapter 2. Joint Table and Booking GEM","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Chapter 2. Joint Table and Booking GEM In this chapter, a booking GEM will be used to implement a booking feature for a Basic Car Reservation System that has multiple locations. Since not all the files generated by generator of the Gem are useful, I will show how to determine the unnecessary files. To make it into a more interesting tutorial, I will also try to replace part of the unnecessary files with a Gem that can do the same task. As a reminder, you should always try to look up for the Gem that will serve your need. There are two (or more) booking related Gems at the time that this tutorial is written, bookable and acts_as_bookable. After spending some time looking and reading the repository, I found out that bookable is a better choice and will serve my need. 2.1 Create Car and Store Model To create a car model, use the commands below. Figure 2.1.1 shows the result where the code below is executed. You should include the all fields (parameters) you need while using the scaffold command. rails g scaffold Store name:string Figure 2.1.1: Output of the terminal when the code is executed Repeat the process above, but this time, we are going to create a Car model instead. rails g scaffold Car name:string 2.2 Joint table for Car and Store If you are trying to implement a Booking feature, take Chapter 2.2 aa reading and follow the instruction in Chapter 2.3 instead. Since each of the make and model of the vehicle will be available in multiple locations, we need to create a join table. A joint table is used to store the primary keys of two database table. Figure 2.2.1 shows an Entity Relationship diagram of Store and Car entity. Each of the entity contains two attributes: id (primary key) and name. Figure 2.2.1: ER Diagram of Store and Car Entity The ER diagram above will be mapped into the Relation Schema as shown in Figure 2.2.2. Figure 2.2.2: Relational Schema of the ER Diagram in Figure 2.2.1 To create a join table model, use the commands below. Figure 2.2.3 shows the result after the code below is executed. rails g scaffold StoreCar store:references car:references Figure 2.2.3: Output of the terminal when the code is executed After the join table is created. We have to add the correct relationship that correspond to the join table we created. Follow the instruction in Table 2.2.1, 2.2.2, and 2.2.3 to add the code. Table 2.2.1: Code to add to store.rb #MyApp/app/models/store.rb has_many :cars, :through => :store_cars has_many :store_cars, :dependent => :destroy Table 2.2.2: Code to add to car.rb #MyApp/app/models/car.rb validates :name, presence: true, uniqueness: true has_many :stores, :through => :store_cars has_many :store_cars, :dependent => :destroy Table 2.2.3: Code to add to store_car.rb #MyApp/app/models/store_car.rb validates_uniqueness_of :car_id, :scope => [:store_id] belongs_to :store belongs_to :car The code in Table 2.2.1, 2.2.2, and 2.2.3 defines the relationship between stores, cars, and store_cars model. Please replace the models with the models that you have; uniqueness will ensure that there is no duplicate of the car with the same name; validates_uniqueness_of will ensure that there is no duplicate pair of car and garage. Now, migrate your newly created database by using the command rake db:migrate. Verify the model that we have created using scaffold command. Navigate to localhost:3000/stores and populate create some stores. Figure 2.2.4 shows the Store is populated with some sample data. Figure 2.2.4: Sample data created for Store Repeat the same process by navigating to localhost:3000/cars. Figure 2.2.5 shows the Store is populated with some sample data. Figure 2.2.5: Sample data created for Car Repeat the same process by navigating to localhost:3000/store_cars. Figure 2.2.6 shows the ability of associate a car to the store using the drop down menu. Figure 2.2.6: Sample data created for Store Car Figure 2.2.8 shows Store and Car are showing the random values. Figure 2.2.7: Store Cars showing some random values To fix the error, replace the following code with the code shown in Table 2.2.4. The final result of the modification in Figure 2.2.8. Table 2.2.4: Code to add to view #MyApp/app/view/store_cars/index.html.erb #code to remove #code to add Figure 2.2.8: Code added to view By adding .name, we are able to retrieve the name field in store and car model. The final result of the joint table is Figure 2.2.9. Figure 2.2.9: Store Cars showing the correct values 2.3 Installing Bookable Gem To begin, head to the bookable’s repository and follow the instruction to install the Gem or follow the instruction in Chapter 2.3. Follow the instruction in Table 2.3.1 to add the code to Gemfile. Perform bundle installafter the modification is made. Table 2.3.1: Code to add to Gemfile MyApp/gemfile gem 'bookable', '~> 0.0.52' Figure 2.3.1 shows result of the the terminal after bundle install operation is executed. After installing the Gem, we received an error stating that our current GEM is causing some issue. Note that the Gem that I am using is 6 years old. Figure 2.3.1: Result of the terminal after code execution After analyzing the output, we can resolve this issue by downgrading the version of jbuilder from ~> 2.5 in Gemfile to greater than ~> 1.2. Run bundle install and the error should be gone and the GEM should be able to installed successfully without any issue. As described in the Readme, the next step is to run the code generator. rails generate bookable:install store_cars store:references car:references The code generator above will install the required files as well as creating a joint table named store_cars. store_cars will contain two reference keys: car and store. Please refer to Chapter 3.2.2 to get detail explaination on what is a joint table. The author of the GEM did not say that we are allowed to use the code generator above to create a joint table. However, since we are not following the guideline, we have to take extra steps to get it to work. The code generator will take about 30 seconds to up to a minute to generate the code. Figure 2.3.2 shows the complete output logs of my terminal. Figure 2.3.2: Result of the terminal after code generation From the above output, we can see that due to the downgrade of jbuilder, we are receiving a lot of errors. Don’t worry, I am going to explain how to resolve it later. Do note that Mime::JSON is caused by the jbuilder. As discussed in Chapter 2.2, we have to add the relationships to the joint tables we created. Add the follow code shown in Table 2.3.2, 2.3.3, and 2.3.4 to the respective file and do not remove any line in the file. You may remove any line that contain duplicates. Table 2.3.2: Code to add to store.rb #MyApp/app/models/store.rb has_many :cars, :through => :store_cars has_many :store_cars, :dependent => :destroy Table 2.3.3: Code to add to car.rb #MyApp/app/models/car.rb has_many :cars, :through => :store_cars has_many :store_cars, :dependent => :destroy Table 2.3.4: Code to add and remove from store_car.rb #MyApp/app/models/store_car.rb #Code to remove validates :name, presence: true, uniqueness: true #Code to add validates_uniqueness_of :car_id, :scope => [:store_id] belongs_to :store belongs_to :car In our view and controller, we have to replace all the code that are created by the default code generator. In Store_Cars’ controller, make the modification as stated in Table 2.3.5. Table 2.3.5: Code to add to store.rb #MyApp/app/controllers/store_cars_controller.rb #remove the mentioned part from the code def create @store_car = StoreCar.create(store_car_params) if @store_car.save name = @store_car.name In Store_Cars’ view, make the modification as stated in Table 2.3.6 and 2.3.7. Table 2.3.6: Code to add to view #MyApp/app/views/store_cars/index.html.erb #Code to remove #Code to add #Add the line below to the end of the file Table 2.3.7: Code to add to form #MyApp/app/views/store_cars/_form.html.erb #Remove everything in the file before adding the code below #Code to add In Booking’s view, make the modification as stated in Table 2.3.8, 2.3.9 and 2.3.10. Table 2.3.8: Code to add to view #MyApp/app/views/bookings/index.html.erb #add the mentioned part to the code Booking for Table 2.3.9: Code to add to view #MyApp/app/views/bookings/new.html.erb #add the mentioned part to the code Booking for Table 2.3.10: Code to add to view #MyApp/app/views/bookings/edit.html.erb #add the mentioned part to the code Booking for After the code above is added and replaced, we are able access our store_cars index page. Navigate to localhost:3000/store_cars and you should be able to get a screenshot similar to the one Figure 2.3.3. Figure 2.3.3 shows the current stage of the application after the modification in until this stage is made. Figure 2.3.3: Current stage of the joint table index Select any of the “store cars” and “Add booking”. A calendar as shown in Figure 2.3.4 will be rendered and you can now create your booking. Figure 2.3.4: Calendar in Bookable Gem Figure 2.3.5 shows a booking is created successfully. Figure 2.3.5: A booking is created successfully At this stage, you should be able to create, edit, and delete a booking and create, edit, and delete store and car association without any problem. If you are facing some errors, please go back and check the code. Figure 2.3.6 shows an association is created without any problem. Figure 2.3.6: Result of Joint Table in Index Page To verify our result, we can go one step further by investigate our data stored in our database. Figure 2.3.7 shows the content of the joint table in SQLiteStudio. Figure 2.3.7: Result of Joint Table in SQLiteStudio Figure 2.3.8 shows the content in the Car table. Figure 2.3.8: Result of Car Table in SQLiteStudio A screenshot is attached below to show the content of the Car table. Figure 2.3.9: Result of Store Table in SQLiteStudio 2.4 Routing for Bookable GEM As mentioned in one of the sections, our ideal booking feature will allow user to choose a car from a store. At the current stage, our booking feature works as shown in the route below. localhost:3000/store_cars/2/bookings/1 Note: 2 = stores_car ID and 1 = booking ID. However, our ideal routing that we are hoping to get is shown as below. localhost:3000/stores/3/store_cars/2/bookings/1 Note: 3 = store ID, 2 = stores_car ID and 1 = booking ID. In order to obtain the routing that we want, we have to modify our route files. Follow the instruction in Table 2.4.1. Table 2.4.1: Code to add to routes.rb #MyApp/config/routes.rb #Code to remove resources :store_cars do resources :bookings end resources :stores do resources :store_cars end #Code to add resources :stores do resources :store_cars do resources :bookings end end Figure 2.4.1 shows the result of the nested routing. Figure 2.4.1: Content in routes.rb In order to navigate from store to store_cars, we have to add the code shown in Table 2.4.2 to our store’s index page. Table 2.4.2: Code to add to View #MyApp/app/view/stores/index.html.erb #Code to add Figure 2.4.2: Code added to View, Line 17 Now, visit the index page of stores and you will see that there is an option to show all the cars. Figure 2.4.3 shows the result of Store Index Page at this stage. Figure 2.4.3: Stores’ Index Page In order to show the correct cars that associate with the store, we have to filter the result from the table. To do that, add the code below to the corresponding file. Please refer to the screenshot below for where to put them. Table 2.4.3 Code to add to Controller #MyApp/app/controllers/store_cars_controller.rb #Code to remove def index @store_cars = StoreCar.all end #Code to add before_action :find_store def index if @store.nil? @store_cars = StoreCar.all else @store_cars = StoreCar.where(\"store_id = ?\", @store) end end #it is best to add under private def find_store if params[:store_id] @store = Store.find_by_id(params[:store_id]) end end Figure 2.4.4: Result of the Controller In the Store_Cars’ index, we have to perform a small modification on the routes to show the booking. Perform the modification by following the instruction in Table 2.4.4. Table 2.4.4: Code to add to View #MyApp/app/views/store_cars/index.html.erb #Code to remove/replaced with the code below #Code to add Now, return to the page and click on the “show car” link. You should be able to see all the result that belongs to the store. A screenshot is attached below to show result with filter after modification. Figure 2.4.5: Index Page of Store Cars based on the Store selected In order for our application to work properly, we have to get the store ID and pass the booking form. Table 2.4.5: Code to add to Controller #MyApp/app/controllers/booking_controller.rb #Code to add before_action :find_store #it is best to add under private def find_store if params[:store_id] @store = Store.find_by_id(params[:store_id]) end end In the booking’s form, make the modification stated in Table 2.4.6 below. Table 2.4.6: Code to add to Booking form #MyApp/app/views/bookings/_form.html.rb #replace form_for with the code below Then, we have to fix all the routes in the booking controller so the page is being routed to the correct place. Follow the instruction in Table 2.4.7. Table 2.4.7: Code to add to Controller #MyApp/app/controllers/booking_controller.rb #Replaced create, destroy, update, save booking with the code below def create @booking = Booking.new(params[:booking].permit(:store_car_id, :start_time, :length)) @booking.store_car = @store_car if @booking.save redirect_to store_store_car_bookings_path(@store, @store_car, method: :get) else render 'new' end end def destroy @booking = Booking.find(params[:id]).destroy if @booking.destroy flash[:notice] = \"Booking: #{@booking.start_time.strftime('%e %b %Y %H:%M%p')} to #{@booking.end_time.strftime('%e %b %Y %H:%M%p')} deleted\" redirect_to store_store_car_bookings_path(@store, @store_car) else render 'index' end end def update @booking = Booking.find(params[:id]) # @booking.store_cars = @store_cars if @booking.update(params[:booking].permit(:store_car_id, :start_time, :length)) flash[:notice] = 'Your booking was updated successfully' if request.xhr? render json: {status: :success}.to_json else redirect_to store_store_car_bookings_path(@store, @store_car) end else render 'edit' end end def save booking if @booking.save flash[:notice] = 'booking added' redirect_to store_store_car_booking_path(@store, @store_car, @booking) else render 'new' end end In the booking index page, make the modification stated in Table 2.4.8. Table 2.4.8: Code to add to View #MyApp/app/views/bookings/index.html.erb #replaced the @booking.each for loop with the code below We have completed all the modification at this point. The modification above will fixed all the issue with routing and create, edit, and delete our booking. Figure 2.4.6 shows our application at the current stage. We are able to add a booking now. Figure 2.4.9: Booking feature added successfully Figure 2.4.10 shows a booking is created successfully. Figure 2.4.10: Booking is created successfully Figure 2.4.11 shows that a booking is deleted successfully. Figure 2.4.11: Booking is deleted successfully Figure 2.4.12 shows that data are stored in and deleted from the database successfully. Figure 2.4.12: Booking table shown in SQLiteStudio 2.5 Result Verification with SQLiteStudio To verify the result even further, we can look our database table in SQLite. Figure 2.5.1 shows the bookings table that we have currently after populating some sample data. Figure 2.5.1 shows that we have created car, ABC DEF, and have it successfully stored in the cars database table. Figure 2.5.1: Car Table in SQLiteStudio Figure 2.5.2 shows that we have created a booking that begin from the time indicated in start_time and ends on the date and time indicated on end_field. The length of the reservation is indicated in the length field. The car_id table is a reference key, referencing to the car’s id in the cars table. Figure 2.5.2: Booking Table in SQLiteStudio "},"SimpleCalendarGEM.html":{"url":"SimpleCalendarGEM.html","title":"Chapter 3. Simple Calendar Gem","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Chapter 3. Simple Calendar Gem This part of the tutorial is based on the previous earlier chapter. In Chapter 2, we used bookable Gem to created a simple Car Reservation system. However, If you looked into the files that generated by the bookable Gem, it generated a lot of Javascript that. The purpose of the Javascript files are serving as the calendar template. Since I am not a fans of Javascript and the script will slow down the performance of my Website, I am going to replace the calendar with a well known calendar Gem, simple_calendar. 3.1 Replaced JS Calendar with simple_calendar Gem To begin, head to the simple_calendar repository and follow the instruction to install the Gem. Based on the instruction given on the repository, in order to use to use the Gem, we have to add the following code in our Gemfile. Table 3.1.1: Code to add to Gemfile #MyApp/gemfile gem \"simple_calendar\", \"~> 2.0\" Since I already have a model for Booking with start_time and end_time field, I am not going to follow the instruction to generate another model. Instead, I am going to modify the current code I have to work with the Gem. The information is also stated in the repository's Readme file. Please be sure to read every repository’s Readme file to obtain more information about the Gem. Based on the example given in the repository, I tailored the code to my need. I replaced the calendar code in HTML (that run on Javascript) with a Gem. Table 3.1.2 shows the modification required to the existing feature. Please replace the parameter cars: to your respective name. If you have a vehicle Model, you should replace cars: to vehicles:. You have to remove the HTML code. The purpose of the HTML code is to render calendar. Please replace the code for both files. Figure 3.1.1 is just showing the modification on a single file. Table 3.1.2: Code to add and remove from existing Booking View #MyApp/app/views/bookings/new.html.erb #MyApp/app/views/bookings/edit.html.erb #Code to remove #Code to add Figure 3.1.1: Result of the modification of View Now, when you create a new booking for your car, you may get a similar screen as shown in Figure 3.1.2. Figure 3.1.2: Result of Calendar at current stage You may notice that the calendar look a little bit out of shape and is nowhere close to what we had before. If you read the repository Readme, you may notice that I have not import the stylesheet to my code yet. In order to import the stylesheet into our application, we have follow his instruction to add the code below to import the stylesheet. Follow the instruction in Table 3.1.3 to add the code to stylesheet. Please refer to the Figure 3.1.3 to get an idea where to add the code. Table 3.1.3: Code to add to stylesheet #MyApp/app/stylesheets/application.scss *= require simple_calendar Figure 3.1.3: Code is added to Line 13 Now, when we refresh the page, we will see that we have a nicely formatted calendar layout. Figure 3.1.4 shows a calendar that is formatted correctly. Figure 3.1.4: A finish calendar Your calendar layout should be fixed after the above code is added to your stylesheet. If you do not get the similar layout, start over the process. 3.2 Removed unnecessary files and Gem This section is based on Chapter 3.1 and Chapter 2. Since we replaced the Javascript calendar with a Gem and the code generator generated necessary files and store all the files we need, we can go ahead and remove the Gem and fix the error caused by jbuilder version earlier. Do remember that this may not be the case for all Gems. Most of the Gems do not generate any files and store it in your system. Let’s begin by removing unnecessary files. #File to delete MyApp/app/stylesheets/calendar-editable.js MyApp/app/stylesheets/fullcalendar.js MyApp/app/stylesheets/custom.js Now, remove the Gem from our Gemfile and revert the version for jbuilder to 2.5 as downgrading caused a lot of errors. Table 3.2.1: Code to modify to Gemfile #MyApp/Gemfile #Code to remove gem 'bookable', '~> 0.0.52' #Code to modify gem 'jbuilder', '~> 2.5' Run bundle command and start your Rails server. You will no longer receive any error about MIME:JSON error. Figure 3.2.1 shows the error is resolved. Figure 3.2.1: Errors are resolved If you have done everything correct, you should be able to add, modify, and edit the booking for cars without any issues. A few screenshots are attached below to show add, modify and edit operations are done successfully. Figure 3.2.2 shows a booking is added to the list. Figure 3.2.2: A booking is created successfully Figure 3.2.3 shows a booking was updated without any issue. Figure 3.2.3: A booking is updated successfully Figure 3.2.4 shows a booking that is deleted from the list. Figure 3.2.4: A booking is deleted successfully. If you are not able to perform these step, check your code. "},"SearchFeature.html":{"url":"SearchFeature.html","title":"Chapter 4. Search Feature","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Chapter 4. Search Feature The example used in this chapter is based on the previous Chapter that I have. However, you can always alter my example and fit into your own application easily. In my opinion, a well designed website should contain a feature that allow users to search through the entire database. In this chapter, we are going to start with searching on one table. Then, we expand our feature to ensure that our search bar is able to search through multiple tables. This chapter will contain a lot of SQL related material. You may use w3schools SQL Tutorial as your side reference. If you are new to SQL, I would recommend you to work with a person that has some SQL knowledge. Everything will make no sense if you jump in right away. Of course, I will try my best to explain. The example in this chapter is a minimal working example. You can always expand the search feature based on your need. 4.1 Create a page for Search Let’s begin by adding creating a search page and add a search bar. I will use a controller that I have created, pages_controller.rb. The page will be used to return a list of search result. You can use any of the controller you have, or create one. To create one, follow the instruction in Table 4.1.1. Table 4.1.1: Code to add to controler #MyApp/app/controllers/pages_controller.rb def search end In my app/view/pages, I created a file named search.html.erb. Table 4.1.2: File to create #Path MyApp/app/view/pages/ #File to create search.html.erb In my routes.rb file located in app/config, I added the code into the file. /search is the route to your search page and pages#search means your search.html.erb is located in the view folder named pages Table 4.1.3: Code to add to routes.rb #MyApp/app/config/routes.rb get '/search' => 'pages#search', :as => 'search_page' Now, you should be able to see an empty page is being rendered when you navigate to localhost:3000/search. Figure 4.1.1 shows an empty page. Figure 4.1.1: An empty search page 4.2 Create a Search Bar Before reading this section, make sure that you have a page for search result. Refer to previous section if you do not have one. After a page is successfully created, let’s add a search bar. Since I am trying to make a search bar that I can search through my entire application, I decided to put the search bar in my navigation bar. Add the code in Table 4.2.1 to your header file. If you do not have a _header.html.erb file, please follow the instruction in Part IV, Chapter 1.4 of the tutorial. You may also choose to have the code in application.html.erb. Please ensure that you are putting the code at the correct. Table 4.2.1: Code to add to header #MyApp/app/views/_header.html.erb \"get\", class: 'navbar-form navbar-left') do %> 'btn btn-info glyphicon glyphicon-search',:name => nil%> You may have to refer to the Figure 4.2.1 for the correct formating. The path search_page_path is based on your routing that you defined in your route.rb. You have to make sure that search_page exists in your route.rb. The parameter that you are going to pass from view to controller is params[:search]. Figure 4.2.1: Syntax formatting for Search Bar Figure 4.2.2 show a search bar is successfully added to my header. If you are unable to achieve this step, check your routing and header file. Make sure that you place your search bar code at the correct spot. Figure 4.2.2: Search Bar is added successfully If your search bar looks different from my search bar or it does not have the styling, you are missing Bootstrap framework. Refer to Part IV, Chapter 1 on how to install Bootstrap framework. 4.3 Adding a simple search feature This section is written based on section earlier. Please ensure that you have a search result page and a search bar before proceeding to this section. At this stage, we have an empty search result page and a search bar. Let’s add some code to turn the search bar into a working search bar. In my pages_controller.rb, I added a few lines of code as shown in Table 4.3.1 to ensure that the search feature redirect to the root page if the search field is empty. You may change it to any path based on your preference. Table 4.3.1: Code to add to Controller #MyApp/app/controllers/pages_controller.rb def search if params[:search].blank? redirect_to(root_path, alert: \"Empty field!\") and return else end end Figure 4.3.1 shows the error I received when I am trying to search with empty string. You may not the exact same result depending on your design. Figure 4.3.1: Result of the modification Now, let’s expand the feature by adding more code as shown in Table 4.3.2 to make sure the search starts to search the Model we have. In my pages_controller.rb, I added a few lines of code for search. Table 4.3.2: Code to add to Controller #MyApp/app/controllers/pages_controller.rb #add the code to the else part def search if params[:search].blank? redirect_to(root_path, alert: \"Empty field!\") and return else @parameter = params[:search].downcase @results = Store.all.where(\"lower(name) LIKE :search\", search: @parameter) end end Refer to the Figure 4.3.2 for accurate syntax formatting. Figure 4.3.2: Syntax formatting for Controller Explanation of code in Table 4.3.2: params[:search] is passing the variable :search from my search bar. .downcase will lower all the string into lowercase characters. Store (capital letter S) means select stores table .all means select everything. To filter the result, we use .where(). In this case, we are searching for the column name. The word LIKE (in capital letters) means it is trying to match the variable :search with search: In this case, search: is assigned to @parameter, where @parameter is the input by user to the search bar where we set to lowercase initially. SQL Equivalent of the code in Line 6 from Figure 4.3.2 is: SELECT * FROM Stores WHERE lower(name) LIKE “SEARCH” Explanation of code in above: Stores is the table name Name is the column name SEARCH is the parameter we entered Lower() will set the column Name to lowercase before searching is done LIKE is an operator in SQL, read more here. In my search.html.erb, add the code in Table 4.3.3. Table 4.3.3: Code to add to View #MyApp/app/views/pages/search.html.erb Search Result Figure 4.3.3 shows that we are able to search the word “north” that is available in the database. At the current stage, our search is able to handle the exact word only. You have to add your modify the code in the view to print each of the @results. Figure 4.3.3: Result of Search 4.4 How to Query in SQLiteStudio In the previous section, we discussed how to create a search feature. How do we know whether we are getting the correct result? To verify, we can use SQLiteStudio to query our data in SQL. SQL is a language for database. If you are unfamiliar with SQL, you can obtain more information from w3school website. The default Ruby code that we use in the controller will not work. You have to translate your Ruby code to SQL manually. SQL Equivalent of the screenshot of the result in previous section is: SELECT * FROM Stores WHERE Lower(Name) LIKE “north”* Explanation of code in above: SELECT simply means select * means everything as in the entire row FROM means from which table Stores refer to the table that we are searching from Lower means lower case the column named Name Name refers to the column that we are searching within the scope LIKE is SQL operator “north” is the scope that we want it to query (or search) We can manually input the SQL query in our SQLiteStudio. The return result as shown in the Figure 4.3.3 will match the result in Figure 4.4.1, providing that you have the same database. If you are unable to query, please ensure that your syntax are right. Figure 4.4.1: Step by step operation to query in SQLiteStudio 4.5 Wildcards for LIKE Operator From previous section, we used SQL LIKE operator to query. There are two symbols that we can use long with the LIKE operator: % - percent, represents zero, one, or multiple characters _ - underscore, represents a single character Note: MSSQL (Microsoft SQL) is using ? (question mark) instead of _ (underscore) to represent a character By using the two symbols above, we are able to narrow down our search or broaden our search. For example, we can use __WORD (two underscores) to query the column that begin with any two characters and ends with the parameter WORD. In the other hand, we can use %WORD% (percent) to query any column that contains the WORD in between the data in the column. For detailed explanation, please refer to w3school. Let’s modify the code to in our controller ensure that we are able to search all the words with matching characters. In the other word, we are using the percent symbol. Add the symbols “%#{some_random_pararameter}%” (with parenthesis) to our @paramter in the search to enable search any word that contain the characters. The modified version of the code is attached below. @results = Store.all.where(\"lower(name) LIKE :search\", search: \"%#{@parameter}%\") Figure 4.5.1 shows the result of the modification and the correct syntax formatting. Figure 4.5.1: Result of the modification Now, return to our search bar and type one or two characters. The search bar is able to search any name in the field with the character in the search field. Figure 4.5.2 shows our search bar is able to search any result based on the single character we input. Figure 4.5.2: Result of the search operation SQL Equivalent of the operation in Figure 4.5.2 is: SELECT * FROM Stores WHERE Lower(Name) LIKE “%o%” Figure 4.5.3 shows SQLiteStudio returns the same result as our search feature in Figure 4.5.2. If you are unable to query, please make sure that your syntax is right. Figure 4.5.3: Query in SQLiteStudio 4.6 Search across Multiple Tables This section is written based on section earlier. Please ensure that you have followed the instruction in the previous section to have a working search feature before trying to add this feature. Also, this section require minimal understanding with SQL. In order to search across multiple tables, we have to clean up the code and create our own method in the model. This will make our code so much cleaner and easier to understand. In this example, I am my cars rental example that I created from Part V, Chapter 2. Just to recap, I have two models, Store and Car. Each of the car is belong to a store. Each store has many cars. If you are unfamiliar with the structure of the two tables, please refer to chapter. In my controller, pages_controller.rb, I removed the original @result and replaced it with the one below and commented out the @parameter we created earlier. @results = Car.joins(:store).search(params[:search]).order(\"stores.name DESC\") Refer to the Figure 4.6.1 for correct syntax formatting. Figure 4.6.1: Result of the modification in Controller Explanation of code in Figure 4.6.1: Car is the model name joins(:store) joins the Car table and Store table by using inner join. If you are unable to get it to work, be sure you check the relationship between two tables. Make sure that you have added correct relationship (e.g. has_many, belongs_to). SQL equivalent of the above query is: SELECT cars.* FROM cars INNER JOIN cars on cars.store_id = cars.id ... ORDER BY stores.name DESC The rest of the query (...) is based on the search method we will create below. In my car model, car.rb, I added the following code. Table 4.6.1: Code to add to Model #MyApp/app/models/car.rb def self.search(search) where(\"lower(stores.name) LIKE :search OR lower(cars.name) LIKE :search\", search: \"%#{search.downcase}%\").uniq end Explanation of code in Table 4.6.1: OR means we are searching between two tables. If any of the result shows up in any of the table, the result will be returned. SQL equivalent of the above method is: ... WHERE lower(stores.name) OR lower(cars.name) LIKE “%SEARCH_TEXT%” ... Explanation of SQL code in above: stores.name and cars.name are the two columns that I am trying to search within .uniq will ensure that there is no duplicate (done at the last step of query) SEARCH_TEXT is a parameter is what we are going to search The complete SQL Query with the method is as below: SELECT DISTINCT cars.* FROM cars INNER JOIN stores on cars.store_id = cars.id WHERE lower(stores.name) OR lower(cars.name) LIKE “%SEARCH_TEXT%” ORDER BY stores.name DESC In my view, I replaced the code with the slightly modified code as shown in Table 4.6.2. You can always add a link to the specific page as each result contain the store and car id. Table 4.6.2: Code to add to View #MyApp/app/views/pages/search.html.erb #Code to remove Search Result #Code to add Search Result Now, by returning to your search page, we are able to search any values that show up in any of the database table. Figure 4.6.2 shows the final result of the search feature. Figure 4.6.2: Result of the Search By querying the result in SQLiteStudio as shown in Figure 4.6.3, we obtained the same result. Figure 4.6.3: Result of the query in SQLiteStudio 4.7 Testing and Verification This section is series of previous sections. In this section, we are going to test whether our search bar actually work as it should. To begin, open your SQLiteStudio and check both of the tables that you have. In my case, I have cars and stores table. The data contains in each table is shown below. Figure 4.7.1 shows the data in my stores table. Figure 4.7.1: Data in Store table Figure 4.7.2 shows the data in my cars table. Figure 4.7.2: Data in Car table Since my cars table’s name field begin with A, I decided begin from there. In my search bar, I entered lowercase a. By default, SQL query is case sensitive. Lowercase and Uppercase letter are different. Since we have already downcase-ed our search result and table column result for query purpose, it should be able to return any result that contain the character a, no matter it is uppercase or lowercase. Figure 4.7.3 shows that my output result is as expected. Figure 4.7.3: Result of the search operation Now, let’s search something that contain the value 1. From our database table, it should return two rows. Figure 4.7.4 shows that our search result is as expected. Figure 4.7.4: Result of the search operation Then, let’s search something that contain the value so. From our database table, it should return one rows. Figure 4.7.5 shows that our search result is as expected. Figure 4.7.5: Result of the search operation Finally, let’s search something that contain the string xo. From our database table, we know that it should not return anything. Figure 4.7.6 shows that our search result is as expected. Figure 4.7.6: Result of the search operation "},"AddingUserToAnyTable.html":{"url":"AddingUserToAnyTable.html","title":"Chapter 5. Adding User to Any Table","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Chapter 5. Adding User to Any Table In the previous chapter, we created a simple car reservation system. However, the bookings are useless if they are not associated with any user. In order make sure the booking is assigned to the logged in user, we have to modify the model and controller. You may use the similar concept to apply it to any model and controller. 5.1 Adding User Association To begin, let’s add a user_id column in our Booking model. Figure 5.1.1 shows the code in Table 5.1.1 is added to Line 8. Table 5.1.1: Code to add to DB #MyApp/app/db/migrate/YYYYMMDDHHMMSS_create_bookings.rb t.belongs_to :user, foreign_key: true The code in Table 5.1.1 is saying that we are adding a column that have a foreign key that belongs to my User model. If you name your User model differently, you have to rename :user to your respective model. YYYYMMDDHHMMSS is the date and time of the file is created. Figure 5.1.1: Code to add to Booking Table, Line 8 Add the following code in Table 5.1.2 to file respective file. Figure 5.1.2 shows the result of the operation shown in Table 5.1.2. operation is shown below. Table 5.1.2: Code to add to Controller #MyApp/app/controllers/bookings_controller.rb #add after permit .merge(user_id: current_user.id) Figure 5.1.2: Code to add to Controller, Line 16 You may not have current_user.id defined if you are not using Devise Gem. Please follow the next section, Chapter 5.2, or skip the section if you have it defined. If you are getting an error saying that current_user is not defined, you have to add to follow the instruction in Chapter 5.2. Delete your development.sqlite3 and migrate your database once you are done modifying the file. You may have to turn off your rails server and SQLiteStudio if you have it opened before deleting development.sqlite3 5.2 The Famous current_user You may have seen a lot of tutorials online and wonders why people are using current_user and where does it actually come from. If you are using devise Gem to model your User, current_user is already built in in the Gem. What if you are not using the devise Gem and still want to have the ability to use the method? In this case, we have to add the method manually. Follow the instruction in Table 5.2.1. Table 5.2.1: Code to add to Controller #MyApp/app/controllers/application_controller.rb class ApplicationController I have not tested the code In Table 5.2.1 in my Application since I have my User model generated by Devise gem. However, I have used this code earlier. In order for the code to function properly, you have to have a user logged it when current_user. 5.3 More Testing and Function Verification Since we added a new column to the User model, we have to delete the development.sqlite3 so that we can migrate the database and rebuild the table. In order to delete the file, you may have to close your SQLiteStudio and your Rails server. Now, start your server and create your booking with a logged in user. Figure 5.3.1 shows the newly rebuild database with user_id field and the user_id is recorded and stored in the database when a booking is created by the user. user_id filled will be filled in automatically as we have a current_user declared in Application Controller (more like a global method) and can be used in any controller. The method, current_user.id, will return the current logged in user ID. Figure 5.3.1: Booking is now associate to currently logged in user "},"GoogleMap.html":{"url":"GoogleMap.html","title":"Chapter 6. Google Map","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Chapter 6. Google Map Having a dynamic generated Google Map on a Website enhances the look. It is not hard to implement Google Map to Ruby on Rails Web Application as there is already a Gem, gmaps4rails, that helps us to do the job. In this example, I am going to build a sample application that will show all the Wireless Router information on Google Map. It serve as a dashboard for Networking Engineer. 6.1 Initial Setup A location on Google Map contains two piece of information: longitude and latitude. In order for me to generate the information dynamically from database, I will use scaffold command to generate MVC components. Assuming that we are generating a page for Router to show each Wireless Router’s information and each router contains a location (longitude and latitude) and a name, we would use the command below. rails generate scaffold Router name:string latitude:float longitude:float Then, migrate the database by using the command below. rake db:migrate Figure 6.1.1 shows the index page of Router with three fields, name, latitude, and longitude. Figure 6.1.1: Index of Router 6.2 Configure gmaps4rails Head to gmaps4rails repository or follow the instruction below to install and configure the Gem. The Gem contains a lot of feature and you may want to consider reading the Readme file in their repository. To begin, add the Gem to gemfile and perform bundle install to install the newly added Gem. gem 'gmaps4rails' Then add the code in Table 6.2.1 to the respective file. Do notice that there is a section (highlighted in yellow) that require you to fill in your API key. We will go through the process on how to obtain an API key from Google in Chapter 6.3. As a side note, you can always place the code at the beginning of the View where you want your map to show. If you are placing the script in the location mentioned in Table 6.2.1, it will serve as global. Table 6.2.1: Code to add to Application MyApp/app/views/layouts/application.html.erb #refer to the repository for code Figure 6.2.1 shows the formatting for the code in Table 6.2.1. Figure 6.2.1: Syntax formatting for code in Table 6.2.1 Now, we have to add the asset pipeline. Follow the instruction in Table 6.2.2 to add the required asset pipeline to your application. Table 6.2.2: Code to add to Application #MyApp/app/javascripts/application.js //= require gmaps/google 6.3 Obtain API Key To obtain an API key for your project, head to Google Maps APIs website to obtain a key. Figure 6.3.1 shows the website where you will be redirected to. Press “GET A KEY”, agree with the terms and condition, and generate a key. Figure 6.3.1: Generate an API key Figure 6.3.2: Your API Key Figure 6.3.2 shows the screen that you will obtain after a key is generated. Replace [your API key] with the key that shown on the screen. Square bracket is not required and should be removed. 6.4 Add Google Map To View To add a Google Map to your view, follow the instruction in Table 6.4.1. The code below will add a Map template to your view. Since the Map is written in Javascript, the Javascript code is required and is part of the Google Map. Table 6.4.1: Code to add to View #MyApp/app/views/routers/index.html.erb handler = Gmaps.build('Google'); handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){ markers = handler.addMarkers([ { \"lat\": 37.3333945, \"lng\": -121.8806499, \"picture\": { \"width\": 32, \"height\": 32 }, \"infowindow\": \"SJSU\" } ]); handler.bounds.extendWith(markers); handler.fitMapToBounds(); }); Figure 6.4.1 shows a Google Map that is added to our view. In the Google Map, we can see that there is a Location Marker. In the location marker, there is a message. The information of the marker can be altered based on your need. Those information can be found in Table 6.4.1. If you are trying to create a static Google Map with static information, you can stop here. The next section, Chapter 6.5, will discuss how to create a dynamic Google Map. Figure 6.4.1: Google Map added to Router 6.5 Dynamic Map Marker We have successfully created and inserted a Google Map to our Router index page. In order for our Google Map to fetch and display the information from our database, we have to create our own method in the controller. Table 6.5.1: Code to add to Controller #MyApp/app/views/controllers/routers_controller.rb #Add load_routers and replaced index with the code below def load_routers @routers_default = Gmaps4rails.build_markers(Router.all) do |plot, marker| marker.lat plot.latitude marker.lng plot.longitude @status = rand(1..4) @battery = rand(10..90) @ip = \"192.168.\"+rand(0..255).to_s+\".\"+rand(15..250).to_s @connected = rand(50..100) if @status == 1 url_alert = \"/good.png\" @status == \"Normal\" else url_alert = \"/alert.png\" end marker.picture({ \"url\" => url_alert, \"width\" => 35, \"height\" => 30 }) marker.infowindow render_to_string(:partial => \"/routers/info\", :locals => {:name => plot.name, :battery => @battery, :date => rand(6.months.ago..Time.now), :ip => @ip, :connected => @connected }) end end def index load_routers @routers = Router.all end In Table 6.5.1, we first create a method called load_routers. In the method, fetch each row of the database and rename the object name from latitude and longitude to lat and lng. The reason of why a conversion is needed is due to the library that we are using accepts the parameter lat and lng. Then, we use rand method to generate a few random values to serve as the information on the marker box. You can always replace the object with the values from database. There is a conditional statement that check the status. If the status is equal to one, it will assign url_alert object to /good.png or /alert.png if it is not equal to one. good.png and alert.png are two pictures that are located in MyApp/public/ folder. They serve as two status marker symbols. Then, the two status images will then be resized to the respective width and height. All the information will then be parsed from the controller to the view. A partial is then created to show the information of each marker window. Follow the instruction in Table 6.5.2 to create a partial and add the code. Table 6.5.2: Partial and code to add #File to create #MyApp/app/views/routers/_info.html.erb #low { color: red; } #medium { color: orange; } #high { color: green; } Name: Status: Low Battery! Status: System Normal Status: High Network Traffic Status: System Error! Status: High Network Traffic Battery: % Battery: % Last collection: WiFi SSID: SJSU_Premier IP Address: Connected Users: In order to work with the modification that we have made in controller and partial, we have to removed Javascript in view and replaced it with the code in Table 6.5.3. Table 6.5.1: Code to add to View #MyApp/app/views/routers/index.html.erb #Code to remove handler = Gmaps.build('Google'); handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){ markers = handler.addMarkers([ { \"lat\": 37.3333945, \"lng\": -121.8806499, \"picture\": { \"width\": 32, \"height\": 32 }, \"infowindow\": \"SJSU\" } ]); handler.bounds.extendWith(markers); handler.fitMapToBounds(); }); #Code to add handler = Gmaps.build('Google'); handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){ markers = handler.addMarkers(); handler.bounds.extendWith(markers); handler.fitMapToBounds(); }); Obtain some Longitude and Latitude values from Google Map and insert it to the database. The final result of the modification in Chapter 6.5 is shown in Figure 6.5.1, Figure 6.5.2 and Figure 6.5.3. Since we are using random value method, on each refresh, the value will be different for each object. Figure 6.5.1: Google Map in Router index page Figure 6.5.2: Google Map with Custom Map Marker in Router index page Figure 6.5.3: Google Map with Custom Map Marker in Router index page "},"ShortestPathFinder.html":{"url":"ShortestPathFinder.html","title":"Chapter 7. Shortest Path Finder","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Chapter 7. Shortest Path Finder This Shortest Path Finder Web Application will be build on top of Chapter 6’s Application. In Chapter 6, we created an application that is able to retrieve coordinates from the database and plot on the map. We are going to use Dijkstra Shortest Path algorithm and available library to plot the shortest path between two routers. The use case for this application would allow Network Engineer to travel the least distance while doing a monthly maintenance. Do note that this example is a class project. Do not duplicate this project and submit as your class project without seeking the permission of the author. You may put yourself into trouble due to this is the author’s original work. 7.1 Initial Setup To begin, follow the instruction the instruction in Chapter 6.1, 6.2, and 6.3 to install the require Gem. At this point, we have everything setup correctly. The example in this chapter will also use the Router example. In order for our application to calculate the distance and find the shortest path between two points, we need to generate a table that store the distance between two points. You may need to look up how Dijkstra Shortest Path algorithm works before continue reading this chapter. To create a database table that stores two points, begin and end, and the distance or cost between two points, unit, we use the command below. Depending on your preference, you may use a reference key instead of the method that I use below. rails g scaffold Point begin:string end:string unit:float After that, perform a database migration. By default, when we are creating a new point, there are three input parameters: begin, end, and unit. Since we are going to allow user to choose the points from our table that contains coordinates, we only need two fields: begin and end. The unit or distance between two points will be calculated based on the formula we will create later. Perform the modification as shown in Table 7.1.1 to allow user to choose the begin and end point from the coordinates database that we have. In this case, the coordinates are coming from Router database table. Table 7.1.1: Code to remove and add from form #MyApp/app/views/points/_form.html.erb #Code to remove #Code to add \"Select Start Point\" %> \"Select End Point\" %> API for connection_select method can be found here. You may have to read the documentation in order to understand what is each field in the method. collection_select(object, method, collection, value_method, text_method, options = {}, html_options = {}) Figure 7.1.1 shows the new point after the modification is made according to Table 7.1.1. Figure 7.1.1: Creating new point Figure 7.1.2 shows a drop down menu with information populated from Router database table. Select two different begin and end point and you should be able to create a point without any issue. Figure 7.1.3 shows a point is created successfully with different begin and end point. Figure 7.1.2: Drop down menu Figure 7.1.3: Point was successfully created 7.2 Distance Calculation To calculate the distance between two coordinates, we need to define a method and use some math formula. Add the following code in Table 7.2.1 to your controller. The method distance_between will take in four parameters and it will return the distance in meters. Table 7.2.1: Code to add to controller #MyApp/app/controllers/points_controller.rb def distance_between(lat1, lon1, lat2, lon2) rad_per_deg = Math::PI / 180 rm = 6371000 # Earth radius in meters lat1_rad, lat2_rad = lat1 * rad_per_deg, lat2 * rad_per_deg lon1_rad, lon2_rad = lon1 * rad_per_deg, lon2 * rad_per_deg a = Math.sin((lat2_rad - lat1_rad) / 2) ** 2 + Math.cos(lat1_rad) * Math.cos(lat2_rad) * Math.sin((lon2_rad - lon1_rad) / 2) ** 2 c = 2 * Math::atan2(Math::sqrt(a), Math::sqrt(1 - a)) rm * c # Delta in meters end After that, follow the instruction in Table 7.2.2 to add the code to controller. In Table 7.2.2, we create a load_distance_to_db method to obtain the name from the dropdown menu where user selects. The selected values will then assigned to @start_point and @end_point. We then look up the Router database table to find the row where it matches the name. .first method is used to get the first row of the result. The coordinates of start and end points will be parsed into the distrance_between method and the result will then assigned to @ans. Table 7.2.2: Code to add to controller #MyApp/app/controllers/points_controller.rb def load_distance_to_db @start_point = params[:point][:begin] @end_point = params[:point][:end] @get_start_point = Router.all.where('name' => @start_point).first @get_end_point = Router.all.where('name' => @end_point).first @start_long = @get_start_point.longitude @start_lat = @get_start_point.latitude @end_long = @get_end_point.longitude @end_lat = @get_end_point.latitude @ans = distance_between(@start_lat, @start_long, @end_lat, @end_long) end After that, follow the instruction in Table 7.2.3 to add the code to controller. In Table 7.2.3, we create a check_param method to check if the begin is equal to the end point. If begin is equal to the end point, it will redirect user back to the form and alert them that they have chosen the same point. The create and update method are altered slightly to make include the calculation method that we defined earlier. Table 7.2.3: Code to add to controller MyApp/app/controllers/points_controller.rb #Code to delete def create @point = Point.new(point_params) respond_to do |format| if @point.save format.html { redirect_to @point, notice: 'Point was successfully created.' } format.json { render :show, status: :created, location: @point } else format.html { render :new } format.json { render json: @point.errors, status: :unprocessable_entity } end end end def update respond_to do |format| if @point.update(point_params) format.html { redirect_to @point, notice: 'Point was successfully updated.' } format.json { render :show, status: :ok, location: @point } else format.html { render :edit } format.json { render json: @point.errors, status: :unprocessable_entity } end end end #Code to add def check_param if params[:point][:begin].blank? || params[:point][:end].blank? redirect_to(:back, notice: \"Select something!\") and return end end def create check_param load_distance_to_db @point = Point.new @point.begin = params[:point][:begin] @point.end = params[:point][:end] @point.unit = @ans respond_to do |format| if @point.begin == @point.end redirect_to(:back, notice: \"Begin and End are the same!\") and return elsif @point.save format.html { redirect_to action: \"index\", notice: 'Point was successfully created.' } format.json { render :show, status: :created, location: @point } else format.html { render :new } format.json { render json: @point.errors, status: :unprocessable_entity } end end end def update check_param load_distance_to_db @point.begin = params[:point][:begin] @point.end = params[:point][:end] @point.unit = @ans respond_to do |format| if @point.begin == @point.end redirect_to(:back, notice: \"Begin and End are the same!\") and return elsif @point.update(point_params) format.html { redirect_to action: \"index\", notice: 'Point was successfully updated.' } format.json { render :show, status: :ok, location: @point } else format.html { render :edit } format.json { render json: @point.errors, status: :unprocessable_entity } end end end After the modification is made, remove the existing points. Create a new points by choosing two different locations and the distance will then be calculated and stored in unit field in database. Figure 7.2.1 shows the distance between two points is calculated successfully. Figure 7.2.1: Distance between two points is calculated successfully 7.3 Dijkstra Library There is one Dijkstra Gem, dijkstra, available that can calculate the shortest distance between two points. However, I found out that the Gem is not really useful for what I am doing. I extracted the main class and include it in my Web Application’s library folder. You may obtain the main class from the dijkstra Gem’s repository or use the code in Table 7.3.1. Table 7.3.1: Main class of Dijkstra Gem #File to create MyApp/lib/dijkstra.rb Code to add # Class that calculates the smallest path using Dijkstra Algorithm class Dijkstra # constructor of the class def initialize(startpoint, endpoint, matrix_of_road) @start = startpoint # start node @end = endpoint # end node @path = [] @infinit = Float::INFINITY # Recreating matrix_of_road to avoid passing the number # of vertices in the first element. vertices = number_of_vertices(matrix_of_road.dup) matrix_of_road = matrix_of_road.unshift([vertices]) read_and_init(matrix_of_road) dijkstra # Dijkstra's algorithm in action and good luck end # Calculates the number of vertices (unique elements) in a matrix of road def number_of_vertices(matrix) # Ignoring the weight element (third element) matrix = matrix.collect { |x| [x[0], x[1]] } matrix = matrix.zip.flatten.compact # Merging all the path arrays @nodes = matrix.uniq.dup # All the vertices matrix.uniq.count # Returning the number of unique elements (vertices) end # This method determines the minimum cost of the shortest path def cost @r[@end] end # get the shortest path def shortest_path road(@end) @path end def road(node) road(@f[node]) if @f[node] != 0 @path.push(node) end def dijkstra min = @infinit pos_min = @infinit @nodes.each do |i| @r[i] = @road[[@start, i]] @f[i] = @start if i != @start && @r[i] @r[pos_min] + @road[[pos_min, j]] @r[j] = @r[pos_min] + @road[[pos_min, j]] @f[j] = pos_min end end end end end def read_and_init(arr) n = arr.size - 1 @road = Hash.new(@nodes) @r = Hash.new(@nodes) @s = Hash.new(@nodes) @f = Hash.new(@nodes) @nodes.each do |i| @r[i] = 0 end @nodes.each do |i| @s[i] = 0 end @nodes.each do |i| @f[i] = 0 end @nodes.each do |i| @nodes.each do |j| if i == j @road[[i, j]] = 0 else @road[[i, j]] = @infinit end end end (1..n).each do |i| x = arr[i][0] y = arr[i][1] c = arr[i][2] @road[[x, y]] = c end end end To use the library, include the dijkstra library by specifying require 'dijkstra' at the beginning of your controller. 7.4 Search and Result Page Now, we need to create a search page and a result page. You can use any existing controller for two of the pages. For my choice, I am going to leave it in my points_controller. Table 7.4.1 shows the newly created method for two new pages. Table 7.4.1: Code to add to controller #MyApp/app/controllers/points_controller.rb def search end def result end In my routes.rb, I have to add the route as shown in Table 7.4.2 to two of the pages. Table 7.4.2: Code to add to routes #MyApp/app/config/routes.rb get '/search' => 'points#search', :as => ‘points_search’ post '/result' => 'points#result', :as => ‘points_result’ Then, we have to create two new files for the view. Table 7.4.3 shows two of the new pages are located in Points’ view. Table 7.4.3: Code to add to view #File to create MyApp/app/views/points/search.html.erb MyApp/app/views/points/result.html.erb Since we do not have anything in the two newly created files yet, the page should show a blank page. Figure 7.4.1 shows an empty page for localhost:3000/search. Figure 7.4.1: Empty page You should be able to visit localhost:3000/search but not localhost:3000/result since POST method (refer to Table 7.4.2) will create a new resources. In our search page, we are going to have a Google Map and drop down menus to allow user to choose from two points while the result page will show the result on a Google Map. Table 7.4.4 shows the code for dropdown menu, Google Map, and required Google Map script. Table 7.4.4: Code to add to search page #MyApp/app/views/points/search.html.erb Input Path \"Select Start Point\" %> \"Select End Point\" %> handler = Gmaps.build('Google'); handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){ markers = handler.addMarkers(); handler.bounds.extendWith(markers); handler.fitMapToBounds(); }); You may need to look up the documentation for collection_select helper. Do note that f.collection_select and collection_select are two different helpers. Table 7.4.5 shows the code for result page. The page contains a Google Map and a table to show the visited path in detail. The table will provide starting point, ending point, distance travelled in km and distance travelled in miles, Table 7.4.5: Code to add to result page #MyApp/app/views/points/search.html.erb Shortest Path Result on Google Map handler = Gmaps.build('Google'); handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){ polyline = ; handler.addPolyline(polyline); handler.bounds.extend(polyline[0]); handler.bounds.extend(polyline[ polyline.length - 1]); handler.fitMapToBounds(); }); Results Starting Point: Ending Point: Distance travelled (km): km Distance travelled (miles): mi 7.5 Define Search and Result in Controller The only thing we are missing right now is we have to puzzle everything we have in controller. In Table 7.5.1, we created a new method, load_plot. The method will create fetch @plots object and place it in Gmaps4rails class and method, a method in the Google Map Gem. The name of each of the Router’s name will be put into the info window on the Google Map in load_plot method. Table 7.5.1: Code to add to controller #MyApp/app/controllers/points_controller.rb def search @plots = Router.all load_plot end def load_plot @search_default = Gmaps4rails.build_markers(@plots) do |plot, marker| marker.lat plot.latitude marker.lng plot.longitude marker.infowindow plot.name end end Figure 7.5.1 shows a Google Map with router’s name showing on the info window. Figure 7.5.1: Result of the View After the modification above is made, in my search page, we are able to see the name of each router on the map in the info window. We are still unable to perform any search since we have not completely defined our result method. Table 7.5.2 shows the updated method for search and result. Table 7.5.2: Code to add to controller #MyApp/app/controllers/points_controller.rb def search @plots = Router.all load_plot end def result @c = Router.pluck(:name, :longitude, :latitude) @r_left = Point.pluck(:begin, :end, :unit) @r_right = Point.pluck(:end, :begin, :unit) @r = @r_left+@r_right @start_point = params[:point][:begin] @end_point = params[:point][:end] @ob = Dijkstra.new(@start_point, @end_point, @r) @shortest_path = @ob.shortest_path @distance = @ob.cost @distance_km = (@distance/1000).round(3) @distance_mi = (@distance*0.00062137).round(3) @count = @shortest_path.count $i = 0; $num = @count; @output = [] while $i @shortest_path[$i]) @result.each do |result| @output result.latitude, :lng => result.longitude} end $i +=1 end search end 7.6 Test and Verify Feature In order to test and verify my newly added feature, I went to Google Map and obtained a new coordinates. The coordinates are stored in router database table. Then, I create new point by specifying the begin and end location. Figure 7.6.1 shows a list of routers’ location loaded to the database. Figure 7.6.1: A list of sample coordinates loaded to the Application Figure 7.6.2 shows a list of points that I created. The points I loaded to my application are the walkable locations. Each location is connected to the junction. Figure 7.6.2: A list of points and the distance between two points were generated In the search page, choose a starting and an ending point. Figure 7.6.3 shows “Associate Student House” is chosen as the starting point and “D1_05” is chosen as the ending point. The walkable distance is then drawn on the Google Map. The distance travelled in kilometer (km) and miles are also shown in the Results section. Figure 7.6.3: Result of the shortest path drawn on the screen "},"DataAnalysis.html":{"url":"DataAnalysis.html","title":"Chapter 8. Data Analysis","keywords":"","body":" Last modified: Sat Mar 23 2019 14:48:53 GMT+0800 (Malay Peninsula Standard Time) Chapter 8. Data Analysis The example in this chapter requires above average database knowledge and will not provide a step by step process to achieve our final goal. You may have to create your own view and controller components and perform modification for the routes. Reading the documentation and understand what each method perform is required and crucial. If you are new to Ruby on Rails, do not attempt this example. Data is always free and available anywhere. We can use the data available in the internet to turn it into a more readable form that can provide us useful information. In this chapter, daru gem will be used and discussed. daru is a library for storage, analysis, manipulation and visualization of data in Ruby. The complete documentation for daru can be found here. In this chapter, we will use an open source data that shows each California State University employee’s salary in the year. All the code discussed in this chapter can be placed in the same controller. I chose to place it in my pages_controller.rb. Do note that this example has already been presented as a class project by the author. Do not duplicate this project and submit as your class project without seeking the permission of the author. You may put yourself into trouble due to this is the author’s original work. 8.1 Initial Setup To begin, add the gem daru to your gemfile as shown in Table 8.1.1. #MyApp/gemfile gem 'daru' 8.2 Import Data From CSV File According to the documentation, there are a few ways that you can import your data. In this example, instead of reading from modal or database, data will be imported from .csv (Microsoft Excel or Spreadsheet) file. Figure 8.2.1 shows a spreadsheet that contains employee that works for California State University (CSU) that is saved in .csv extension. Figure 8.2.1: A sample .csv file. Since this program will be large (eventually), each of the operation will be created as a method. This allows us to find our code in the method quickly and correctly. Table 8.2.1 shows a method, load_csv is created to load the .csv file. YOUR-DATA.csv is a spreadsheet that is located in the data folder at the root app directory. #MyApp/controllers/pages_controller.rb def load_csv @data_frame = Daru::DataFrame.from_csv('data/YOUR-DATA.csv') end 8.3 Output The Table Outputting the result in the view is very straight forward. Before we are able to print out the result, we have to include the method that we created in Table 8.2.1 to our method for the page. Table 8.3.1 shows a result method is created and have the load_csv method included. #MyApp/controllers/pages_controller.rb def result load_csv end There is nothing much that we have to do. By default, @data_frame method will output the result in table but in the form of HTML code. To print the HTML code on Rails’ view, we have to include the raw method shown in Table 8.3.2. #MyApp/views/pages/result.html.erb Figure 8.3.1 shows 3000 rows and 11 columns of data are processed by daru, Daru::DataFrame(3000x11). The table will not show all the data that you have. In fact, it will show the first 30 rows of data and the last row of data. Figure 8.3.1: Table printed in the view 8.4 Group By And Mean To get the mean of each job, we first have to group all the job title by using group_by method. Then, we can use the method .mean to get the mean of each job. Table 8.4.1 shows the group_by and mean method. #MyApp/controllers/pages_controller.rb def mean_group_by_job @group_by_job = @data_frame.group_by('Job Title') @output = @group_by_job.mean end Figure 8.4.1 shows the result group by job title. There are a total of 180 rows of data, indicating 180 types of different jobs. Figure 8.4.1: Result of the view 8.5 Filter By (String) To get only the job title we want, we can use predefined method, .eq(param). param is the parameter that we want to look for. Table 8.5.1 shows the .eq() method which contains a method @filter_job_title that user can indicate any job title that they want. Do note that ‘Job Title’ indicates that we are using the ‘Job Title’ column in the table. #MyApp/controllers/pages_controller.rb def filter data @output = @data_frame.where(@data_frame['Job Title'].eq(@filter_job_title)) end Figure 8.5.1 shows the result group filtered by job title ACCOUNTANT II. There are a total of 4 rows of data that contains ACCOUNTANT II. Figure 8.5.1: Result of the view 8.6 Filter By (Value) To get only the job pay in the range based on the columns we want, we can use predefined method shown in Table 8.6.1. Table 8.6.1: Predefined Method Comparator Method Description lt returns true for each entry less than the supplied object lteq returns true for each entry less than or equal to the supplied object mt > returns true for each entry more than the supplied object mteq >= returns true for each entry more than or equal to the supplied object Since we have a few different column of data, we can only choose to filter one column at a time and get the data based on the input range we wish to. Ideally, user can input one or two values to indicate the minimum and the maximum range of values they are looking for. Table 8.6.2 shows a method to filter the value that is greater than the value specified. @filter_option is a column that we would like to have the @greater_than value filter in. #MyApp/controllers/pages_controller.rb def filter data @output = @data_frame.where(@data_frame[@filter_option].gt(@greater_than.to_i)) end Figure 8.6.1 shows the result group filtered by job title ACCOUNTANT II and the total pay is filter by the value greater than 70000. There is only one result that based on the constraint that we defined. Figure 8.6.1: Result of the view 8.7 Sort By (Value) To sort the values based on the column we choose, we can use predefined method, .sort(param) to sort in ascending or descending order. The process is very straight forward. We pass in a parameter, @sort_by, to indicate which column we would like to have it sorted based on. Then we included true or false for sorting it in ascending order. Table 8.6.2 shows a sample code for sorting in descending order. #MyApp/controllers/pages_controller.rb def sort_data @output = @data_frame.sort([@sort_by], ascending: [false]) end Figure 8.7.1 shows the data in the table is sorted descending order based on the Base Pay column. Figure 8.7.1 Result of the view "},"PlottingAChart.html":{"url":"PlottingAChart.html","title":"Chapter 9. Plotting A Chart","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Chapter 9. Plotting A Chart One way of presenting data in an interactive way is to use chart. Chartkick is a gem that can take in your data and plot it into an interactive chat providing that you are sending in the correct format that it takes. Chartkick’s website shows a great example on how to implement the chart and sample code are also included in the website. In this example, instead of using the example from the website, data conversion from array of hash to array of array will be discussed. The example of charts will be discussed in this chapter are bar chart and pie chart. 9.1 Initial Setup To begin, add the gem chartkick to your gemfile as shown in Table 9.1.1. Table 9.1.1: Code to add to gemfile #MyApp/gemfile gem ‘chartkick’ Then, add the following code as shown in Table 9.1.2 to your application layout. This is to include the required library for chartkick. Table 9.1.2: Code to add to view #MyApp/views/layouts/application.html.erb If you are going to use more features, you may have to refer to the website to include more required libraries. 9.2 Hash and Array Explanation Before we can begin implementing, we have to understand the difference between array and hash. The code below is an example of array of hash. array_of_hash = [{\"name\"=>\"aa\", \"job\"=>\"a\", \"pay\"=> 2, ... }, {\"name\"=>\"bb\", \"job\"=>\"a\", \"pay\"=> 4, ... }, {\"name\"=>\"cc\", \"job\"=>\"a\", \"pay\"=> 6, ... }, {\"name\"=>\"dd\", \"job\"=>\"a\", \"pay\"=> 8, ... }, {\"name\"=>\"ee\", \"job\"=>\"b\", \"pay\"=> 2, ... }, {\"name\"=>\"ff\", \"job\"=>\"b\", \"pay\"=> 4, ... }, {\"name\"=>\"gg\", \"job\"=>\"b\", \"pay\"=> 6, ... }, {\"name\"=>\"hh\", \"job\"=>\"b\", \"pay\"=> 9, ... }] The code below is an example of array of array. array_of_array = [[\"a\", 2], [\"a\", 4], [\"a\", 6], [\"a\", 8], [\"b\", 2], [\"b\", 4], [\"b\", 6], [\"b\", 10]] According to Charkick’s documentation, you are able to pass data as hash or array. However, I was unable to get array of hash to work while I was experimenting with one Web Application I wrote. You may need to do some research if you are planning to use array of hash instead of array of array that I am going to discuss. 9.3 Array of Hash to Array of Array Based on the Daru Gem that we used in Chapter 8, we can decode the data, @output, from the Daru table and turns it into JSON format by using .to_json method. To achieve that, we can use the code below. The above be @array_of_hash = ActiveSupport::JSON.decode(@output.to_json) If you are not using Daru Gem and simply want to use the chart feature, the code below shows an array of hash. @array_of_hash contains all the keys and values of the hash and in the form of array. @array_of_hash = [{\"name\"=>\"aa\", \"job\"=>\"a\", \"pay\"=> 2, ... }, {\"name\"=>\"bb\", \"job\"=>\"a\", \"pay\"=> 4, ... }, {\"name\"=>\"cc\", \"job\"=>\"a\", \"pay\"=> 6, ... }, {\"name\"=>\"dd\", \"job\"=>\"a\", \"pay\"=> 8, ... }, {\"name\"=>\"ee\", \"job\"=>\"b\", \"pay\"=> 2, ... }, {\"name\"=>\"ff\", \"job\"=>\"b\", \"pay\"=> 4, ... }, {\"name\"=>\"gg\", \"job\"=>\"b\", \"pay\"=> 6, ... }, {\"name\"=>\"hh\", \"job\"=>\"b\", \"pay\"=> 9, ... }] 9.4 Bar Chart The solution discussed may not be the most optimized and efficient solution. You may have an even optimal solution that can perform the same task. We can see that there are multiple keys in the array of hash: name, job, pays, ... in @array_of_hash from Chapter 9.3. Since we are plotting bar chart we have limited options for x axis (keys). The keys that we can use as an example for x axis will be name and job (job title) while data such as pay can be used for y axis data representation. We can use the code below to extract the keys and values we want. @array_of_hash.each { |h| @sliced For Daru users, we can also choose to turn it into a single operation by using the @output we have earlier. ActiveSupport::JSON.decode(@array_of_hash.to_json).each { |h| @sliced The result of both the above operations will give us the same result. The result is shown as below. @sliced = [[\"a\", 2], [\"a\", 4], [\"a\", 6], [\"a\", 8], [\"b\", 2], [\"b\", 4], [\"b\", 6], [\"b\", 10]] The array of array @sliced now contains two keys, a key for x axis and y axis. We can now pass our data @sliced into the chart input as shown in the code below. The chart input will take care of grouping the data and show the average value based on the key you provide. The height, 1000px, can changed by replacing ti with a different value. The result of the bar chart is shown in Figure 9.4.1. Figure 9.4.1: Bar Chart of Average Total Pay & Benefits against Job Title 9.5 Pie Chart The solution discussed may not be the most optimized and efficient solution. You may have an even optimal solution that can perform the same task. We can see that there are multiple keys in the array of hash: name, job, pays, ... in @array_of_hash from Chapter 9.3. We have to group the data based on the key in order to represent it in the form of pie chart. The keys that we can use as data representation of each sector will be name and job (job title) while data such as pay can be used for y axis data representation. We can use the code below to extract the keys and values we want. @array_of_hash.each { |h| @sliced For Daru users, we can also choose to turn it into a single operation by using the @output we have earlier. ActiveSupport::JSON.decode(@array_of_hash.to_json).each { |h| @sliced The result of both the above operations will give us the same result. The result is shown as below. @sliced = [[\"a\", 2], [\"a\", 4], [\"a\", 6], [\"a\", 8], [\"b\", 2], [\"b\", 4], [\"b\", 6], [\"b\", 10]] The array of array @sliced now contains two keys, a key for x axis and y axis. Then, before we can put it in the form of pie chart. There are two methods that we can use to represent the data. The first method will be get the total based on the key and the second method will be get the average based on the key. For the first method, we can use the code below to sum up the values based on the key. The total value of each key will be computed. @res = @sliced.inject({}) { |h,(name, data)| h[name] ||= 0; h[name] += data; h }.to_a The result of the operation above is shown below. @res = [[\"a\", 20], [\"b\", 22]] Now, we can put our data into the pie chart. Figure 9.5.1 shows one of the example that we can obtained based on the above operation. Figure 9.5.1: Pie Chart of Total Total Pay & Benefits by Job Title For the second method, we have to group each of the values based the key and find the average value based on each key. This is because we are trying to show the average of each key and pie chart does not take care of it. To group and get the average, we can use the code below. @res = @sliced.group_by { |key, _value| key }.map do |key, list| [key, list.map(&:last).reduce(:+) / list.size.to_f] end We first group by the value where key is what the value will be group based on. Then, .reduce(:+) is an accumulator method. The accumulator method will sum up all the values and divide the value returned by the method list.size.to_f, where the total size of the element based on each key is obtained. The result of the operation above is shown below. @res = [[\"a\", 5], [\"b\", 5.5]] Now, we can put our data into the pie chart. Figure 9.5.2 shows one of the example that we can obtained based on the above operation. Figure 9.5.2: Pie Chart of Average Total Pay & Benefits by Job Title "},"Devise.html":{"url":"Devise.html","title":"Chapter 10. Devise","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Chapter 10. Devise Devise Gem is a gem that provide authentication for Rails application. In short, it is a gem that will generate all required code for user management and authentication. You can easily get the authentication to work within minutes. You may obtain more information from their Github Repository. There will be no tutorial for this topic as their Github Repository provides a complete information on how to get the gem to work. "},"OtherRailsApplication.html":{"url":"OtherRailsApplication.html","title":"Part VI. Other Rails Application","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Part VI. Other Rails Applications If you are new to Ruby on Rails, I highly recommend you to not read this part. This part of the tutorial will discuss a few other ways of using and enhancing Ruby on Rails. I use Ruby on Rails very frequently, especially when it comes to Rapid Prototyping challenge and Hackathon. I have created a few Rails Application for homework assignments, class projects, and business purposes. This part of the tutorial is for people who has some knowledge on Ruby on Rails and want to do something different. "},"RESTfulJSONAPI.html":{"url":"RESTfulJSONAPI.html","title":"Chapter 1. RESTful JSON API","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Chapter 1. RESTful JSON API This Chapter is written for people who are familiar with Web Development and has minimal networking knowledge, if you are unfamiliar with any of these, please skip this chapter. The purpose of RESTful API is to allow third party integration. By default, we choose to generate a Rails Application with Model, View, and Controller. However, you can generate a Rails Application with just View and Controller for API purpose. You may want to read more about Ruby on Rails API in order to understand the this chapter. Assume that you are in a Hackathon or a Rapid Prototyping challenge, you can choose to use a microcontroller (Raspberry Pi or Intel Edison) to interact with your Ruby on Rails application. An example of the application would be reading from a sensor and send the sensor value via HTTP to Ruby on Rails server. Do notice that example that I shown below is not the best example. It may has security exploit depending on how you implement it. 1.1 Initial Setup Assume that this application is created for a Hackathon or Rapid Prototyping Challenge, the fastest way to generate a Rails Application with MVC instead of API. To create a Rails application and use the scaffold command to create the major piece of MVC. rails new Blog rails generate scaffold Event message:string Then, migrate the database by using the command below. rake db:migrate Figure 1.1.1 shows the index page of Message with one field, named text and Figure 1.1.2 shows the new message page. Figure 1.1.1: Index of Event Figure 1.1.2: New Event 1.2 Controller Setup In order for our Rails application to receive external request, we have to turn off the request forgery protection. To achieve that, follow the instruction in Table 1.2.1 and Table 1.2.2. Do note that after the code in Table 1.2.1 is added to your controller, you will not able to create any new Event from localhost:3000/events/new. Table 1.2.1: Code to add to Event controller #MyApp/app/controllers/events_controller.rb protect_from_forgery :except => :create Table 1.2.2: Code to modify in Event controller #MyApp/app/controllers/events_controller.rb #Code to remove def event_params params.require(:event).permit(:message) end #Code to add def event_params params.permit(:message) end 1.3 HTTP POST Script To send a HTTP POST request from your machine or microcontroller, you will have to use a script. A sample Ruby and Python scripts with http://localhost:3000/events as the endpoint and message as the parameter are shown below. For your convenience, you should save the HTTP POST Script at the root directory of your Ruby on Rails Web Application. Ruby HTTP POST Script, YOUR_FILE_NAME.rb: require 'net/http' require 'uri' url = 'http://localhost:3000/events' uri = URI.parse(url) params = {'message' => 'yes'} Net::HTTP.post_form(uri, params) As a side note, Python2 and Python3 codes are not interchangeable. In order to run the Python script, you are required to install the libraries. Python3 HTTP POST Script, YOUR_FILE_NAME.py: import urllib3 import requests import json encoded_body = json.dumps({ \"message\": \"yes\" }) http = urllib3.PoolManager() response = http.request(\"POST\", \"localhost:3000/events\", headers={'Content-Type': 'application/json'}, body=encoded_body) Python2 HTTP POST Script, YOUR_FILE_NAME.py: import urllib import requests status = { \"message\": yes } response = requests.post(\"http://localhost:3000/events\", json=status) 1.4 Run the Script Run the script and send the data in the script to your Ruby on Rails, use the command below to run Python and Ruby script. Both the commands below assume that your script is stored at the root directory of your Web Application. Figure 1.4.1 shows a Ruby script is ran and by investigate our Rails server logs as shown in Figure 1.4.2, we can see that our data is successfully inserted into the database. For Python scripts: ruby YOUR_FILE_NAME.rb For Ruby scripts: python YOUR_FILE_NAME.py Figure 1.4.1: Ruby script successfully ran Figure 1.4.2: Logs of Rails server You can also view the result by visiting the Events index page. Figure 1.4.3 shows the result of the Events index page. Figure 1.4.3: index of Events page 1.5 Clean Up Since we are just using the controller for RESTful API request, we can technically get rid of most of parts in the controller. Figure 1.5.1 shows the minimal code required for HTTP POST. If you are trying to use HTTP GET, PUT, PATCH, and DELETE, you have to add the required code and change your script. Figure 1.5.1: Events controller "},"ActionCable.html":{"url":"ActionCable.html","title":"Chapter 2. ActionCable","keywords":"","body":" Last modified: Thu Aug 16 2018 22:49:02 GMT+0800 (Malay Peninsula Standard Time) Chapter 2. ActionCable Rails 5 has one of the most highly anticipated features: Websocket support via Action Cable. With the new feature, we are able to build a real-time chat or messaging Web Application. There are a lot of tutorial online on teaching you how to create a messaging Web Application. There is no point for me to repeat again. In this chapter, I will use Action Cable to refresh the page when a new data is committed to the database. The use case of my example would be a dashboard to receive real time order update. 2.1 Initial Setup To generate MVC components, use the scaffold command. Assuming that we are generating a page for order and the order contains a field name item, we would use the command below. rails generate scaffold Order item:string Then, migrate the database by using the command below. rake db:migrate Figure 2.1.1 shows the index page of Order with one field, named item. Figure 2.1.1: Index of Order 2.2 Configure Model, Channel, and Job Now, we have to use the commonly used rails command to generate Action Cable channels. Since we are generating a channel for our order, I will name my channel Order. rails generate channel Order Figure 2.2.1 shows three files are generated after the command above is executed. Figure 2.2.1: Three files are created Figure 2.2.2 shows there are two default methods in order_channel.rb created by the ActionCable subscribed and unsubscribed. A user will be automatically subscribed to the particular channel when the specific page is visited. Figure 2.2.2: Default method created by the channel Add the code in Table 2.2.1 to allow streaming to all users. This method is global and not user specific. This means that all the users that have the page open will receive the broadcast. Table 2.2.1: Code to add to channel #MyApp/app/channels/order_channel.rb #add in subscribed method stream_from “order_channel” Then, add the code in Table 2.2.2 to the route. This is part of the ActionCable configuration. Table 2.2.2: Code to add to routes #MyApp/app/config/routes.rb mount ActionCable.server, at: '/cable' Now, we have to add the action where each commit to the database will trigger the broadcast action. This includes create, update, and delete actions. Table 2.2.3: Code to add to Model #MyApp/app/model/order.rb #Code to remove class Order We have almost everything set up. Now, we have to create a broadcast job for our Order. Follow the instruction in Table 2.2.4 and Table 2.2.5 and add the code to the file. Whenever a job is triggered, it will go to the perform method and then render method to render the page. Whenever a data is received, the index page will be reloaded. Table 2.2.4: File to create and code to add to Job #MyApp/app/jobs/order_broadcast_job.rb class OrderBroadcastJob Table 2.2.5: Code to add to Channel #MyApp/app/assets/javascripts/channels/order.coffee #Add mentioned code App.order = App.cable.subscriptions.create \"OrderChannel\", connected: -> # Called when the subscription is ready for use on the server disconnected: -> # Called when the subscription has been terminated by the server received: (data) -> # Called when there's incoming data on the websocket for this channel location.reload(); 2.3 Testing and Verification We have successfully set up everything that we need to do. Fire up your Rails server to do some testing. Visit our Order index page and your Rails server output log will show something similar to Figure 2.3.1. The highlighted box shows the Web Application is listening and waiting for request. Figure 2.3.1: Rails server log Open two browsers side by side to perform testing. In the first browser window, stay at the index page. Create a new Order by using your second browser window. When a new item is created successfully, the first browser will reload automatically. Figure 2.3.2 shows the result when a new Order was created. Figure 2.3.2: Result of both browser windows when an order is created Figure 2.3.3 shows the result when an order is edited. We can see that the first browser window is reloaded by itself and shows the updated information. Figure 2.3.3: Result of both browser windows when an order is edited Figure 2.3.4 shows the result when an order is deleted. We can see that the first browser window is reloaded by itself and removed from the list. Figure 2.3.4: Result of both browser windows when an order is deleted Whenever a user leave the specific webpage that you have ActionCable feature, the server will show the log. Figure 2.3.5 shows the result where two users leave the page. The highlighted box shows the time where each user leave the page. Figure 2.3.5: Server log when two users leave the page 2.4 Deploy Feature To Heroku The feature that we have tested in Chapter 2.3 will only work locally. In order for the application to work correctly when we deploy it to Heroku PaaS, we have to add a Gem to our Gemfile. Follow the instuction in Table 2.4.1 to add the Gem. Table 2.4.1: Code to add to Gemfile #MyApp/gemfile gem 'redis', '~> 3.0' In your Heroku dashboard, go to your application and search “Redis To Go” in the Add-ons section. Figure 2.4.1 shows the operation where Redis To Go is being added to my application. Figure 2.4.1: Provision Redis To Go After provisioning, the add on will show up in the Add-ons list. Figure 2.4.2 shows Redis To Go is added to my Add-ons. Figure 2.4.2: Redis To Go added to Add-ons list Select “Redis To Go” and you will be redirected to a configuration page. Figure 2.4.3 shows a Redis link shown in the General section. Figure 2.4.3: Link of Redis is shown in General section In the configuration page, copy the link in the General section and replace it based on the section stated in Table 2.4.2. Do note that your link begins with redis://……. Table 2.4.2: Code to add to cable.yml #MyApp/config/cable.yml #replace YOUR_LINK_HERE with your Redis link production: adapter: redis url: YOUR_LINK_HERE Commit your changes and your Web Application in Heroku will be able to work as expected after it is built successfully. "},"OfflineApplicationCache.html":{"url":"OfflineApplicationCache.html","title":"Chapter 3. Offline Application Cache","keywords":"","body":" Last modified: Sat Mar 23 2019 14:49:08 GMT+0800 (Malay Peninsula Standard Time) Chapter 3. Offline Application Cache Many of you may have used a Web Application that is able to run even when your device is at offline mode or not connected to the internet. There is an available Gem, rack-offline, that is able to handle the operation. However, I found that the Gem does not work for me. It may be outdated or I integrated it wrongly. Then, I came across another solution in Stackoverflow forum. The solution of implementing cache to Ruby on Rails Web Application is simple and straightforward. All the code that you seen in this chapter belongs to the owner ErwinGO. This solution may be browser specific and you should read more here. In Information Security perspective, it is a bad to cache your website as your application may be attacked in the form of main-in-the-middle attack. 3.1 Setup Assume that you have already have a working Web Application and you wish to add offline cache feature. Follow the instruction in Table 3.1.1 to create a file and add the code to the file. Table 3.1.1: File to create and code to add #MyApp/lib/tasks/generate_appcahe_manifest.rake task :generate_appcache_file => ['deploy:precompile_assets', 'html5_manifest'] desc \"Create html5 manifest.appcache\" task :html5_manifest => :environment do puts 'Creating appcache manifest file...' File.open(\"public/manifest.appcache\", \"w\") do |f| f.write(\"CACHE MANIFEST\\n\") f.write(\"# Version #{Time.now.to_i}\\n\\n\") f.write(\"CACHE:\\n\") assets = Dir.glob(File.join(Rails.root, 'public/assets/**/*')) assets.each do |asset| if File.extname(asset) != '.gz' && File.extname(asset) != '' && File.extname(asset) != '.json' filename_path = /#{Rails.root.to_s}\\/public\\/(assets\\/.*)/.match(File.absolute_path(asset))[1].to_s f.write(filename_path.concat(\"\\n\")) end end f.write(\"\\nNETWORK:\\n\") f.write(\"*\\n\") f.write(\"http://*\\n\") f.write(\"https://*\\n\") end puts 'Done.' end namespace :deploy do task :precompile_assets do require 'fileutils' if File.directory?(\"#{Rails.root.to_s}/public/assets\") FileUtils.rm_r \"#{Rails.root.to_s}/public/assets\" end puts 'Precompiling assets...' puts `RAILS_ENV=production bundle exec rake assets:precompile` puts 'Done.' end end Then, we have to run the file that we created above in our terminal. To run the file, use the command below. rake generate_appcache_file A file named manifest.appcache will then be created in the folder MyApp/public/. After that, we have to call the file that we have just created to our application.html.erb. Table 3.1.2: Code to add #MyApp/app/views/layouts/application.html.erb #Code to remove #Code to add 3.2 Testing and Verification The testing phase for this feature is very straight forward. Start your Rails server, visit a few pages, and terminate your Rails server. Then, revisit the pages that you have visited and you should be able to visit the page even the server is terminated (for local host) or in offline mode (website hosted in the internet). "},"RailsJSONB.html":{"url":"RailsJSONB.html","title":"Chapter 4. Rails JSONB","keywords":"","body":" Last modified: Sat Mar 23 2019 15:47:44 GMT+0800 (Malay Peninsula Standard Time) Chapter 4. Rails JSONB Can you take the advantage of NoSQL in a Relational Database? The answer is yes. I was working on a project a while back and I accidentally discovered that you can store a JSONB in a relational database. You can read more about the JSONB available in PostgreSQL It is reasonable to take advantage of JSON column type in the table. For example, if you would like to store a config in the database, it is a good choice to take advantage of it, which we are going through in the next section. Note: The tutorial below shows how to setup and use JSONB as a column type in PostgreSQL (PG) Database. The data type is available in MySQL, but I have not tested it. 4.1 Initial Setup For this example, I used scaffold command to create a Post page. rails g scaffold Post name:string Figure below shows my Post table that contains a name column after I perform a database migration for the new changes. Figure 4.1.1: Picture of my Post table. 4.2 Add a JSONB Column To Existing Table Now, let's create a migration file and add a new JSONB column. rails g migration AddConfigToPost A file named YYYYMMDDSSSSSS_add_config_to_post.rb is then created and can be found in the app/db/migrate folder. Figure below shows the content of the folder. Figure 4.2.1: Content of YYYYMMDDSSSSSS_add_config_to_post.rb. Modify the file by adding the code below to the file. # app/db/migrate/YYYYMMDDSSSSSS_add_config_to_post.rb #Code to remove class AddConfigToPost false, :default => {} add_index :posts, :config, using: :gin end end The code above will add a column named config to the Post table. The default value of the column is an empty JSON: {}. Then, an index type GIN is added. After a database migration is performed, our Post table is illustrated as the figure below. Figure 4.2.2: config column is added to Post table successfully. By inspecting the Structure Tab, we can see that the config column is having JSONB column type with default value set to {} Figure 4.2.3: Table structure for Post. 4.3 Use JSONB Column To In Form A few changes need to be made before we can store and retrieve from database. The JSON below is the data that I would like to store in the config field. { \"enable\" : \"true\", \"type\" : \"value\", } The JSON above contains two keys: enable and type. Now, we will need to add the line below to our Post model. It provide information to the model that the config column contains two accessor enable and disable. # app/models/post.rb # Code to remove class Post Note: You may find more information regarding the store_accessor here In our Post controller, we have to add the keys enable and disable to the post_params method # app/controllers/posts_controller.rb # Code to remove def post_params params.require(:post).permit(:name) end # Code to add def post_params params.require(:post).permit(:name, :enable, :value) end Now, we are able to access the enable and value keys easily. In the form, add two input fields. # app/views/posts/_form.rb # Code to add to form ... ... Figure 4.3.1: The final look of the form. 4.4 Testing and Validation Input values to the form as shown in Figure 4.3.1. Figure 4.4.1: Input values are shown up correctly To access the value of enable and value keys from config column, it can be access normally by access it's object. "}}